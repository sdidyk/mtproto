package mtproto

import "fmt"

const (
	crc_boolFalse                                                         = 0xbc799737
	crc_boolTrue                                                          = 0x997275b5
	crc_true                                                              = 0x3fedd339
	crc_error                                                             = 0xc4b9f9bb
	crc_null                                                              = 0x56730bcc
	crc_inputPeerEmpty                                                    = 0x7f3b18ea
	crc_inputPeerSelf                                                     = 0x7da07ec9
	crc_inputPeerChat                                                     = 0x35a95cb9
	crc_inputUserEmpty                                                    = 0xb98886cf
	crc_inputUserSelf                                                     = 0xf7c1b13f
	crc_inputPhoneContact                                                 = 0xf392b7f4
	crc_inputFile                                                         = 0xf52ff27f
	crc_inputMediaEmpty                                                   = 0x9664f57f
	crc_inputMediaUploadedPhoto                                           = 0x1e287d04
	crc_inputMediaPhoto                                                   = 0xb3ba0635
	crc_inputMediaGeoPoint                                                = 0xf9c44144
	crc_inputMediaContact                                                 = 0xf8ab7dfb
	crc_inputChatPhotoEmpty                                               = 0x1ca48f57
	crc_inputChatUploadedPhoto                                            = 0xbdcdaec0
	crc_inputChatPhoto                                                    = 0x8953ad37
	crc_inputGeoPointEmpty                                                = 0xe4c123d6
	crc_inputGeoPoint                                                     = 0x48222faf
	crc_inputPhotoEmpty                                                   = 0x1cd7bf0d
	crc_inputPhoto                                                        = 0x3bb3b94a
	crc_inputFileLocation                                                 = 0xdfdaabe1
	crc_peerUser                                                          = 0x59511722
	crc_peerChat                                                          = 0x36c6019a
	crc_storage_fileUnknown                                               = 0xaa963b05
	crc_storage_filePartial                                               = 0x40bc6f52
	crc_storage_fileJpeg                                                  = 0x007efe0e
	crc_storage_fileGif                                                   = 0xcae1aadf
	crc_storage_filePng                                                   = 0x0a4f63c0
	crc_storage_filePdf                                                   = 0xae1e508d
	crc_storage_fileMp3                                                   = 0x528a0677
	crc_storage_fileMov                                                   = 0x4b09ebbc
	crc_storage_fileMp4                                                   = 0xb3cea0e4
	crc_storage_fileWebp                                                  = 0x1081464c
	crc_userEmpty                                                         = 0xd3bc4b7a
	crc_userProfilePhotoEmpty                                             = 0x4f11bae1
	crc_userProfilePhoto                                                  = 0x82d1f706
	crc_userStatusEmpty                                                   = 0x09d05049
	crc_userStatusOnline                                                  = 0xedb93949
	crc_userStatusOffline                                                 = 0x008c703f
	crc_chatEmpty                                                         = 0x29562865
	crc_chat                                                              = 0x41cbf256
	crc_chatForbidden                                                     = 0x6592a1a7
	crc_chatFull                                                          = 0xc9d31138
	crc_chatParticipant                                                   = 0xc02d4007
	crc_chatParticipantsForbidden                                         = 0x8763d3e1
	crc_chatParticipants                                                  = 0x3cbc93f8
	crc_chatPhotoEmpty                                                    = 0x37c1011c
	crc_chatPhoto                                                         = 0x1c6e1c11
	crc_messageEmpty                                                      = 0x90a6ca84
	crc_message                                                           = 0x76bec211
	crc_messageService                                                    = 0x2b085862
	crc_messageMediaEmpty                                                 = 0x3ded6320
	crc_messageMediaPhoto                                                 = 0x695150d7
	crc_messageMediaGeo                                                   = 0x56e0d474
	crc_messageMediaContact                                               = 0x70322949
	crc_messageMediaUnsupported                                           = 0x9f84f49e
	crc_messageActionEmpty                                                = 0xb6aef7b0
	crc_messageActionChatCreate                                           = 0xbd47cbad
	crc_messageActionChatEditTitle                                        = 0xb5a1ce5a
	crc_messageActionChatEditPhoto                                        = 0x7fcb13a8
	crc_messageActionChatDeletePhoto                                      = 0x95e3fbef
	crc_messageActionChatAddUser                                          = 0x15cefd00
	crc_messageActionChatDeleteUser                                       = 0xa43f30cc
	crc_dialog                                                            = 0xd58a08c6
	crc_photoEmpty                                                        = 0x2331b22d
	crc_photo                                                             = 0xfb197a65
	crc_photoSizeEmpty                                                    = 0x0e17e23c
	crc_photoSize                                                         = 0x75c78e60
	crc_photoCachedSize                                                   = 0x021e1ad6
	crc_geoPointEmpty                                                     = 0x1117dd5f
	crc_geoPoint                                                          = 0xb2a2f663
	crc_auth_sentCode                                                     = 0x5e002502
	crc_auth_authorization                                                = 0x2ea2c0d4
	crc_auth_exportedAuthorization                                        = 0xb434e2b8
	crc_inputNotifyPeer                                                   = 0xb8bc5b0c
	crc_inputNotifyUsers                                                  = 0x193b4417
	crc_inputNotifyChats                                                  = 0x4a95e84e
	crc_inputPeerNotifySettings                                           = 0xcacb6ae2
	crc_peerNotifySettings                                                = 0x99622c0c
	crc_peerSettings                                                      = 0xa518110d
	crc_wallPaper                                                         = 0xa437c3ed
	crc_inputReportReasonSpam                                             = 0x58dbcab8
	crc_inputReportReasonViolence                                         = 0x1e22c78d
	crc_inputReportReasonPornography                                      = 0x2e59d922
	crc_inputReportReasonChildAbuse                                       = 0xadf44ee3
	crc_inputReportReasonOther                                            = 0xc1e4a2b1
	crc_userFull                                                          = 0xb9b12c6c
	crc_contact                                                           = 0x145ade0b
	crc_importedContact                                                   = 0xc13e3c50
	crc_contactStatus                                                     = 0x16d9703b
	crc_contacts_contactsNotModified                                      = 0xb74ba9d2
	crc_contacts_contacts                                                 = 0xeae87e42
	crc_contacts_importedContacts                                         = 0x77d01c3b
	crc_contacts_blocked                                                  = 0x0ade1591
	crc_contacts_blockedSlice                                             = 0xe1664194
	crc_messages_dialogs                                                  = 0x15ba6c40
	crc_messages_dialogsSlice                                             = 0x71e094f3
	crc_messages_messages                                                 = 0x8c718e87
	crc_messages_messagesSlice                                            = 0x3a54685e
	crc_messages_chats                                                    = 0x64ff9fd5
	crc_messages_chatFull                                                 = 0xe5d7d19c
	crc_messages_affectedHistory                                          = 0xb45c69d1
	crc_inputMessagesFilterEmpty                                          = 0x57e2f66c
	crc_inputMessagesFilterPhotos                                         = 0x9609a51c
	crc_inputMessagesFilterVideo                                          = 0x9fc00e65
	crc_inputMessagesFilterPhotoVideo                                     = 0x56e9f0e4
	crc_inputMessagesFilterDocument                                       = 0x9eddf188
	crc_inputMessagesFilterUrl                                            = 0x7ef0dd87
	crc_inputMessagesFilterGif                                            = 0xffc86587
	crc_updateNewMessage                                                  = 0x1f2b0afd
	crc_updateMessageID                                                   = 0x4e90bfd6
	crc_updateDeleteMessages                                              = 0xa20db0e5
	crc_updateUserTyping                                                  = 0xc01e857f
	crc_updateChatUserTyping                                              = 0x83487af0
	crc_updateChatParticipants                                            = 0x07761198
	crc_updateUserStatus                                                  = 0xe5bdf8de
	crc_updateUserName                                                    = 0xa7848924
	crc_updateNewAuthorization                                            = 0x8951abef
	crc_updates_state                                                     = 0xa56c2a3e
	crc_updates_differenceEmpty                                           = 0x5d75a138
	crc_updates_difference                                                = 0x00f49ca0
	crc_updates_differenceSlice                                           = 0xa8fb1981
	crc_updatesTooLong                                                    = 0xe317af7e
	crc_updateShortMessage                                                = 0x313bc7f8
	crc_updateShortChatMessage                                            = 0x4d6deea5
	crc_updateShort                                                       = 0x78d4dec1
	crc_updatesCombined                                                   = 0x725b04c3
	crc_updates                                                           = 0x74ae4240
	crc_photos_photos                                                     = 0x8dca6aa5
	crc_photos_photosSlice                                                = 0x15051f54
	crc_photos_photo                                                      = 0x20212ca8
	crc_upload_file                                                       = 0x096a18d5
	crc_dcOption                                                          = 0x18b7a10d
	crc_config                                                            = 0xcc1a241e
	crc_nearestDc                                                         = 0x8e1a1775
	crc_help_appUpdate                                                    = 0xccbbce30
	crc_help_noAppUpdate                                                  = 0xc45a6536
	crc_help_inviteText                                                   = 0x18cb9f78
	crc_updateNewEncryptedMessage                                         = 0x12bcbd9a
	crc_updateEncryptedChatTyping                                         = 0x1710f156
	crc_updateEncryption                                                  = 0xb4a2e88d
	crc_updateEncryptedMessagesRead                                       = 0x38fe25b7
	crc_encryptedChatEmpty                                                = 0xab7ec0a0
	crc_encryptedChatWaiting                                              = 0x66b25953
	crc_encryptedChatRequested                                            = 0x48f1d94c
	crc_encryptedChat                                                     = 0x61f0d4c7
	crc_encryptedChatDiscarded                                            = 0x1e1c7c45
	crc_inputEncryptedChat                                                = 0xf141b5e1
	crc_encryptedFileEmpty                                                = 0xc21f497e
	crc_encryptedFile                                                     = 0xa8008cd8
	crc_inputEncryptedFileEmpty                                           = 0x1837c364
	crc_inputEncryptedFileUploaded                                        = 0x64bd0306
	crc_inputEncryptedFile                                                = 0x5a17b5e5
	crc_inputEncryptedFileLocation                                        = 0xf5235d55
	crc_encryptedMessage                                                  = 0xed18c118
	crc_encryptedMessageService                                           = 0x23734b06
	crc_messages_dhConfigNotModified                                      = 0xc0e24635
	crc_messages_dhConfig                                                 = 0x2c221edd
	crc_messages_sentEncryptedMessage                                     = 0x560f8935
	crc_messages_sentEncryptedFile                                        = 0x9493ff32
	crc_inputFileBig                                                      = 0xfa4f0bb5
	crc_inputEncryptedFileBigUploaded                                     = 0x2dc173c8
	crc_updateChatParticipantAdd                                          = 0x3dda5451
	crc_updateChatParticipantDelete                                       = 0xe32f3d77
	crc_updateDcOptions                                                   = 0x8e5e9873
	crc_inputMediaUploadedDocument                                        = 0x5b38c6c1
	crc_inputMediaDocument                                                = 0x33473058
	crc_messageMediaDocument                                              = 0x4cf4d72d
	crc_inputDocumentEmpty                                                = 0x72f0eaae
	crc_inputDocument                                                     = 0x1abfb575
	crc_inputDocumentFileLocation                                         = 0xbad07584
	crc_documentEmpty                                                     = 0x36f8c871
	crc_document                                                          = 0x8fd4c4d8
	crc_help_support                                                      = 0x17c6b5f6
	crc_notifyPeer                                                        = 0x9fd40bd8
	crc_notifyUsers                                                       = 0xb4c83b4c
	crc_notifyChats                                                       = 0xc007cec3
	crc_updateNotifySettings                                              = 0xbec268ef
	crc_sendMessageTypingAction                                           = 0x16bf744e
	crc_sendMessageCancelAction                                           = 0xfd5ec8f5
	crc_sendMessageRecordVideoAction                                      = 0xa187d66f
	crc_sendMessageUploadVideoAction                                      = 0xe9763aec
	crc_sendMessageRecordAudioAction                                      = 0xd52f73f7
	crc_sendMessageUploadAudioAction                                      = 0xf351d7ab
	crc_sendMessageUploadPhotoAction                                      = 0xd1d34a26
	crc_sendMessageUploadDocumentAction                                   = 0xaa0cd9e4
	crc_sendMessageGeoLocationAction                                      = 0x176f8ba1
	crc_sendMessageChooseContactAction                                    = 0x628cbc6f
	crc_contacts_found                                                    = 0xb3134d9d
	crc_updateServiceNotification                                         = 0xebe46819
	crc_userStatusRecently                                                = 0xe26f42f1
	crc_userStatusLastWeek                                                = 0x07bf09fc
	crc_userStatusLastMonth                                               = 0x77ebc742
	crc_updatePrivacy                                                     = 0xee3b272a
	crc_inputPrivacyKeyStatusTimestamp                                    = 0x4f96cb18
	crc_privacyKeyStatusTimestamp                                         = 0xbc2eab30
	crc_inputPrivacyValueAllowContacts                                    = 0x0d09e07b
	crc_inputPrivacyValueAllowAll                                         = 0x184b35ce
	crc_inputPrivacyValueAllowUsers                                       = 0x131cc67f
	crc_inputPrivacyValueDisallowContacts                                 = 0x0ba52007
	crc_inputPrivacyValueDisallowAll                                      = 0xd66b66c9
	crc_inputPrivacyValueDisallowUsers                                    = 0x90110467
	crc_privacyValueAllowContacts                                         = 0xfffe1bac
	crc_privacyValueAllowAll                                              = 0x65427b82
	crc_privacyValueAllowUsers                                            = 0xb8905fb2
	crc_privacyValueDisallowContacts                                      = 0xf888fa1a
	crc_privacyValueDisallowAll                                           = 0x8b73e763
	crc_privacyValueDisallowUsers                                         = 0xe4621141
	crc_account_privacyRules                                              = 0x50a04e45
	crc_accountDaysTTL                                                    = 0xb8d0afdf
	crc_updateUserPhone                                                   = 0x05492a13
	crc_documentAttributeImageSize                                        = 0x6c37c15c
	crc_documentAttributeAnimated                                         = 0x11b58939
	crc_documentAttributeSticker                                          = 0x6319d612
	crc_documentAttributeVideo                                            = 0xd38ff1c2
	crc_documentAttributeAudio                                            = 0x9852f9c6
	crc_documentAttributeFilename                                         = 0x15590068
	crc_messages_stickersNotModified                                      = 0xf1749a22
	crc_messages_stickers                                                 = 0x30a6ec7e
	crc_stickerPack                                                       = 0x12b299d4
	crc_messages_allStickersNotModified                                   = 0xe86602c3
	crc_messages_allStickers                                              = 0xcdbbcebb
	crc_updateReadHistoryInbox                                            = 0x9c974fdf
	crc_updateReadHistoryOutbox                                           = 0x2f2f21bf
	crc_messages_affectedMessages                                         = 0x84d19185
	crc_updateWebPage                                                     = 0x7f891213
	crc_webPageEmpty                                                      = 0x211a1788
	crc_webPagePending                                                    = 0xb0d13e47
	crc_webPage                                                           = 0xe89c45b2
	crc_messageMediaWebPage                                               = 0xddf10c3b
	crc_authorization                                                     = 0xad01d61d
	crc_account_authorizations                                            = 0x4bff8ea0
	crc_account_password                                                  = 0x957b50fb
	crc_account_passwordSettings                                          = 0x9a5c33e5
	crc_account_passwordInputSettings                                     = 0xc23727c9
	crc_auth_passwordRecovery                                             = 0x137948a5
	crc_inputMediaVenue                                                   = 0xc13d1c11
	crc_messageMediaVenue                                                 = 0x2ec0533f
	crc_receivedNotifyMessage                                             = 0xa384b779
	crc_chatInviteExported                                                = 0x0ab4a819
	crc_chatInviteAlready                                                 = 0x5a686d7c
	crc_chatInvite                                                        = 0xcde0ec40
	crc_messageActionChatJoinedByLink                                     = 0x031224c3
	crc_updateReadMessagesContents                                        = 0xf8227181
	crc_inputStickerSetEmpty                                              = 0xffb62b95
	crc_inputStickerSetID                                                 = 0x9de7a269
	crc_inputStickerSetShortName                                          = 0x861cc8a0
	crc_stickerSet                                                        = 0x2dd14edc
	crc_messages_stickerSet                                               = 0x6e153f16
	crc_user                                                              = 0x215c4438
	crc_botCommand                                                        = 0xc27ac8c7
	crc_botInfo                                                           = 0x8f300b57
	crc_keyboardButton                                                    = 0xa2fa4880
	crc_keyboardButtonRow                                                 = 0x77608b83
	crc_replyKeyboardHide                                                 = 0xa03e5b85
	crc_replyKeyboardForceReply                                           = 0x86b40b08
	crc_replyKeyboardMarkup                                               = 0x85dd99d1
	crc_inputPeerUser                                                     = 0xdde8a54c
	crc_inputUser                                                         = 0xf21158c6
	crc_messageEntityUnknown                                              = 0xbb92ba95
	crc_messageEntityMention                                              = 0xfa04579d
	crc_messageEntityHashtag                                              = 0x6f635b0d
	crc_messageEntityBotCommand                                           = 0x6cef8ac7
	crc_messageEntityUrl                                                  = 0x6ed02538
	crc_messageEntityEmail                                                = 0x64e475c2
	crc_messageEntityBold                                                 = 0xbd610bc9
	crc_messageEntityItalic                                               = 0x826f8b60
	crc_messageEntityCode                                                 = 0x28a20571
	crc_messageEntityPre                                                  = 0x73924be0
	crc_messageEntityTextUrl                                              = 0x76a6d327
	crc_updateShortSentMessage                                            = 0x9015e101
	crc_inputChannelEmpty                                                 = 0xee8c1e86
	crc_inputChannel                                                      = 0xf35aec28
	crc_peerChannel                                                       = 0xa2a5371e
	crc_inputPeerChannel                                                  = 0x27bcbbfc
	crc_channel                                                           = 0x0aadfc8f
	crc_channelForbidden                                                  = 0x17d493d5
	crc_contacts_resolvedPeer                                             = 0x7f077ad9
	crc_channelFull                                                       = 0x0f2bcb6f
	crc_messageRange                                                      = 0x0ae30253
	crc_messages_channelMessages                                          = 0xc776ba4e
	crc_messageActionChannelCreate                                        = 0x95d2ac92
	crc_updateChannelTooLong                                              = 0x108d941f
	crc_updateChannel                                                     = 0x635b4c09
	crc_updateNewChannelMessage                                           = 0x62ba04d9
	crc_updateReadChannelInbox                                            = 0x922e6e10
	crc_updateDeleteChannelMessages                                       = 0xc32d5b12
	crc_updateChannelMessageViews                                         = 0xf226ac08
	crc_updates_channelDifferenceEmpty                                    = 0x3e11affb
	crc_updates_channelDifferenceTooLong                                  = 0xa4bcc6fe
	crc_updates_channelDifference                                         = 0x2064674e
	crc_channelMessagesFilterEmpty                                        = 0x94d42ee7
	crc_channelMessagesFilter                                             = 0xcd77d957
	crc_channelParticipant                                                = 0xc00c07c0
	crc_channelParticipantSelf                                            = 0x35a8bfa7
	crc_channelParticipantCreator                                         = 0x2fe601d3
	crc_channelParticipantsRecent                                         = 0xde3f3c79
	crc_channelParticipantsAdmins                                         = 0xb4608969
	crc_channelParticipantsKicked                                         = 0xa3b54985
	crc_channels_channelParticipants                                      = 0x9ab0feaf
	crc_channels_channelParticipant                                       = 0xdfb80317
	crc_chatParticipantCreator                                            = 0xe46bcee4
	crc_chatParticipantAdmin                                              = 0xa0933f5b
	crc_updateChatParticipantAdmin                                        = 0xd7ca61a2
	crc_messageActionChatMigrateTo                                        = 0xe1037f92
	crc_messageActionChannelMigrateFrom                                   = 0xea3948e9
	crc_channelParticipantsBots                                           = 0xb0d1865b
	crc_help_termsOfService                                               = 0x780a0310
	crc_updateNewStickerSet                                               = 0x688a30aa
	crc_updateStickerSetsOrder                                            = 0x0bb2d201
	crc_updateStickerSets                                                 = 0x31c24808
	crc_messages_savedGifsNotModified                                     = 0xe8025ca2
	crc_messages_savedGifs                                                = 0x84a02a0d
	crc_updateSavedGifs                                                   = 0x9375341e
	crc_inputBotInlineMessageMediaAuto                                    = 0x3380c786
	crc_inputBotInlineMessageText                                         = 0x3dcd7a87
	crc_inputBotInlineResult                                              = 0x88bf9319
	crc_botInlineMessageMediaAuto                                         = 0x764cf810
	crc_botInlineMessageText                                              = 0x8c7f65e2
	crc_botInlineResult                                                   = 0x11965f3a
	crc_messages_botResults                                               = 0xe021f2f6
	crc_updateBotInlineQuery                                              = 0x496f379c
	crc_updateBotInlineSend                                               = 0x12f12a07
	crc_inputMessagesFilterVoice                                          = 0x50f5c392
	crc_inputMessagesFilterMusic                                          = 0x3751b49e
	crc_inputPrivacyKeyChatInvite                                         = 0xbdfb0426
	crc_privacyKeyChatInvite                                              = 0x500e6dfa
	crc_exportedMessageLink                                               = 0x5dab1af4
	crc_messageFwdHeader                                                  = 0x4e4df4bb
	crc_updateEditChannelMessage                                          = 0x1b3f4df7
	crc_messageActionPinMessage                                           = 0x94bd38ed
	crc_auth_codeTypeSms                                                  = 0x72a3158c
	crc_auth_codeTypeCall                                                 = 0x741cd3e3
	crc_auth_codeTypeFlashCall                                            = 0x226ccefb
	crc_auth_sentCodeTypeApp                                              = 0x3dbb5986
	crc_auth_sentCodeTypeSms                                              = 0xc000bba2
	crc_auth_sentCodeTypeCall                                             = 0x5353e5a7
	crc_auth_sentCodeTypeFlashCall                                        = 0xab03c6d9
	crc_keyboardButtonUrl                                                 = 0x258aff05
	crc_keyboardButtonCallback                                            = 0x35bbdb6b
	crc_keyboardButtonRequestPhone                                        = 0xb16a6c29
	crc_keyboardButtonRequestGeoLocation                                  = 0xfc796b3f
	crc_keyboardButtonSwitchInline                                        = 0x93b9fbb5
	crc_replyInlineMarkup                                                 = 0x48a30254
	crc_messages_botCallbackAnswer                                        = 0x36585ea4
	crc_updateBotCallbackQuery                                            = 0xb9cfc48d
	crc_messages_messageEditData                                          = 0x26b5dde6
	crc_updateEditMessage                                                 = 0xe40370a3
	crc_inputBotInlineMessageMediaGeo                                     = 0x96929a85
	crc_inputBotInlineMessageMediaVenue                                   = 0x417bbf11
	crc_inputBotInlineMessageMediaContact                                 = 0xa6edbffd
	crc_botInlineMessageMediaGeo                                          = 0x051846fd
	crc_botInlineMessageMediaVenue                                        = 0x8a86659c
	crc_botInlineMessageMediaContact                                      = 0x18d1cdc2
	crc_inputBotInlineResultPhoto                                         = 0xa8d864a7
	crc_inputBotInlineResultDocument                                      = 0xfff8fdc4
	crc_botInlineMediaResult                                              = 0x17db940b
	crc_inputBotInlineMessageID                                           = 0x890c3d89
	crc_updateInlineBotCallbackQuery                                      = 0x691e9052
	crc_inlineBotSwitchPM                                                 = 0x3c20629f
	crc_messages_peerDialogs                                              = 0x3371c354
	crc_topPeer                                                           = 0xedcdc05b
	crc_topPeerCategoryBotsPM                                             = 0xab661b5b
	crc_topPeerCategoryBotsInline                                         = 0x148677e2
	crc_topPeerCategoryCorrespondents                                     = 0x0637b7ed
	crc_topPeerCategoryGroups                                             = 0xbd17a14a
	crc_topPeerCategoryChannels                                           = 0x161d9628
	crc_topPeerCategoryPeers                                              = 0xfb834291
	crc_contacts_topPeersNotModified                                      = 0xde266ef5
	crc_contacts_topPeers                                                 = 0x70b772a8
	crc_messageEntityMentionName                                          = 0xdc7b1140
	crc_inputMessageEntityMentionName                                     = 0x208e68c9
	crc_inputMessagesFilterChatPhotos                                     = 0x3a20ecb8
	crc_updateReadChannelOutbox                                           = 0xb75f99a9
	crc_updateDraftMessage                                                = 0x1b49ec6d
	crc_draftMessageEmpty                                                 = 0x1b0c841a
	crc_draftMessage                                                      = 0x3fccf7ef
	crc_messageActionHistoryClear                                         = 0x9fbab604
	crc_messages_featuredStickersNotModified                              = 0xc6dc0c66
	crc_messages_featuredStickers                                         = 0xbe382906
	crc_updateReadFeaturedStickers                                        = 0x571d2742
	crc_messages_recentStickersNotModified                                = 0x0b17f890
	crc_messages_recentStickers                                           = 0x88d37c56
	crc_updateRecentStickers                                              = 0x9a422c20
	crc_messages_archivedStickers                                         = 0x4fcba9c8
	crc_messages_stickerSetInstallResultSuccess                           = 0x38641628
	crc_messages_stickerSetInstallResultArchive                           = 0x35e410a8
	crc_stickerSetCovered                                                 = 0x6410a5d2
	crc_updateConfig                                                      = 0xa229dd06
	crc_updatePtsChanged                                                  = 0x3354678f
	crc_inputMediaPhotoExternal                                           = 0xe5bbfe1a
	crc_inputMediaDocumentExternal                                        = 0xfb52dc99
	crc_stickerSetMultiCovered                                            = 0x3407e51b
	crc_maskCoords                                                        = 0xaed6dbb2
	crc_documentAttributeHasStickers                                      = 0x9801d2f7
	crc_inputStickeredMediaPhoto                                          = 0x4a992157
	crc_inputStickeredMediaDocument                                       = 0x0438865b
	crc_game                                                              = 0xbdf9653b
	crc_inputBotInlineResultGame                                          = 0x4fa417f2
	crc_inputBotInlineMessageGame                                         = 0x4b425864
	crc_messageMediaGame                                                  = 0xfdb19008
	crc_inputMediaGame                                                    = 0xd33f43f3
	crc_inputGameID                                                       = 0x032c3e77
	crc_inputGameShortName                                                = 0xc331e80a
	crc_keyboardButtonGame                                                = 0x50f41ccf
	crc_messageActionGameScore                                            = 0x92a72876
	crc_highScore                                                         = 0x73a379eb
	crc_messages_highScores                                               = 0x9a3bfd99
	crc_updates_differenceTooLong                                         = 0x4afe8f6d
	crc_updateChannelWebPage                                              = 0x2f2ba99f
	crc_messages_chatsSlice                                               = 0x9cd81144
	crc_textEmpty                                                         = 0xdc3d824f
	crc_textPlain                                                         = 0x744694e0
	crc_textBold                                                          = 0x6724abc4
	crc_textItalic                                                        = 0xd912a59c
	crc_textUnderline                                                     = 0xc12622c4
	crc_textStrike                                                        = 0x9bf8bb95
	crc_textFixed                                                         = 0x6c3f19b9
	crc_textUrl                                                           = 0x3c2884c1
	crc_textEmail                                                         = 0xde5a0dd6
	crc_textConcat                                                        = 0x7e6260d7
	crc_pageBlockUnsupported                                              = 0x13567e8a
	crc_pageBlockTitle                                                    = 0x70abc3fd
	crc_pageBlockSubtitle                                                 = 0x8ffa9a1f
	crc_pageBlockAuthorDate                                               = 0xbaafe5e0
	crc_pageBlockHeader                                                   = 0xbfd064ec
	crc_pageBlockSubheader                                                = 0xf12bb6e1
	crc_pageBlockParagraph                                                = 0x467a0766
	crc_pageBlockPreformatted                                             = 0xc070d93e
	crc_pageBlockFooter                                                   = 0x48870999
	crc_pageBlockDivider                                                  = 0xdb20b188
	crc_pageBlockAnchor                                                   = 0xce0d37b0
	crc_pageBlockList                                                     = 0xe4e88011
	crc_pageBlockBlockquote                                               = 0x263d7c26
	crc_pageBlockPullquote                                                = 0x4f4456d3
	crc_pageBlockPhoto                                                    = 0x1759c560
	crc_pageBlockVideo                                                    = 0x7c8fe7b6
	crc_pageBlockCover                                                    = 0x39f23300
	crc_pageBlockEmbed                                                    = 0xa8718dc5
	crc_pageBlockEmbedPost                                                = 0xf259a80b
	crc_pageBlockCollage                                                  = 0x65a0fa4d
	crc_pageBlockSlideshow                                                = 0x031f9590
	crc_webPageNotModified                                                = 0x7311ca11
	crc_inputPrivacyKeyPhoneCall                                          = 0xfabadc5f
	crc_privacyKeyPhoneCall                                               = 0x3d662b7b
	crc_sendMessageGamePlayAction                                         = 0xdd6a8f48
	crc_phoneCallDiscardReasonMissed                                      = 0x85e42301
	crc_phoneCallDiscardReasonDisconnect                                  = 0xe095c1a0
	crc_phoneCallDiscardReasonHangup                                      = 0x57adc690
	crc_phoneCallDiscardReasonBusy                                        = 0xfaf7e8c9
	crc_updateDialogPinned                                                = 0x6e6fe51c
	crc_updatePinnedDialogs                                               = 0xfa0f3ca2
	crc_dataJSON                                                          = 0x7d748d04
	crc_updateBotWebhookJSON                                              = 0x8317c0c3
	crc_updateBotWebhookJSONQuery                                         = 0x9b9240a6
	crc_labeledPrice                                                      = 0xcb296bf8
	crc_invoice                                                           = 0x5db95a15
	crc_inputMediaInvoice                                                 = 0x8eb5a6d5
	crc_paymentCharge                                                     = 0xea02c27e
	crc_messageActionPaymentSentMe                                        = 0x8f31b327
	crc_messageMediaInvoice                                               = 0xf6a548d3
	crc_postAddress                                                       = 0x1e8caaeb
	crc_paymentRequestedInfo                                              = 0x909c3f94
	crc_keyboardButtonBuy                                                 = 0xafd93fbb
	crc_messageActionPaymentSent                                          = 0x96163f56
	crc_paymentSavedCredentialsCard                                       = 0xcdc27a1f
	crc_webDocument                                                       = 0x1c570ed1
	crc_inputWebDocument                                                  = 0x9bed434d
	crc_inputWebFileLocation                                              = 0xc239d686
	crc_upload_webFile                                                    = 0x21e753bc
	crc_payments_paymentForm                                              = 0xa0058751
	crc_payments_validatedRequestedInfo                                   = 0xd1451883
	crc_payments_paymentResult                                            = 0x4e5f810d
	crc_payments_paymentReceipt                                           = 0x70c4fe03
	crc_payments_savedInfo                                                = 0xfb8fe43c
	crc_inputPaymentCredentialsSaved                                      = 0xc10eb2cf
	crc_inputPaymentCredentials                                           = 0x3417d728
	crc_account_tmpPassword                                               = 0xdb64fd34
	crc_shippingOption                                                    = 0xb6213cdf
	crc_updateBotShippingQuery                                            = 0xb5aefd7d
	crc_updateBotPrecheckoutQuery                                         = 0x8caa9a96
	crc_inputStickerSetItem                                               = 0x32da9e9c
	crc_updatePhoneCall                                                   = 0xab0f6b1e
	crc_inputPhoneCall                                                    = 0x1e36fded
	crc_phoneCallEmpty                                                    = 0x5366c915
	crc_phoneCallWaiting                                                  = 0xc5226f17
	crc_phoneCallRequested                                                = 0x14b0ed0c
	crc_phoneCallAccepted                                                 = 0x3660c311
	crc_phoneCall                                                         = 0x967f7c67
	crc_phoneCallDiscarded                                                = 0x50ca4de1
	crc_phoneConnection                                                   = 0x9cc123c7
	crc_phoneCallProtocol                                                 = 0xfc878fc8
	crc_phone_phoneCall                                                   = 0xec82e140
	crc_inputMessagesFilterPhoneCalls                                     = 0x80c99768
	crc_messageActionPhoneCall                                            = 0x80e11a7f
	crc_inputMessagesFilterRoundVoice                                     = 0x7a7c17a4
	crc_inputMessagesFilterRoundVideo                                     = 0xb549da53
	crc_sendMessageRecordRoundAction                                      = 0x88f27fbc
	crc_sendMessageUploadRoundAction                                      = 0x243e1c66
	crc_upload_fileCdnRedirect                                            = 0xf18cda44
	crc_upload_cdnFileReuploadNeeded                                      = 0xeea8e46e
	crc_upload_cdnFile                                                    = 0xa99fca4f
	crc_cdnPublicKey                                                      = 0xc982eaba
	crc_cdnConfig                                                         = 0x5725e40a
	crc_pageBlockChannel                                                  = 0xef1751b5
	crc_langPackString                                                    = 0xcad181f6
	crc_langPackStringPluralized                                          = 0x6c47ac9f
	crc_langPackStringDeleted                                             = 0x2979eeb2
	crc_langPackDifference                                                = 0xf385c1f6
	crc_langPackLanguage                                                  = 0xeeca5ce3
	crc_updateLangPackTooLong                                             = 0x46560264
	crc_updateLangPack                                                    = 0x56022f4d
	crc_channelParticipantAdmin                                           = 0x34c3bb53
	crc_channelParticipantBanned                                          = 0x6df8014e
	crc_channelParticipantsBanned                                         = 0x1427a5e1
	crc_channelParticipantsSearch                                         = 0x0656ac4b
	crc_channelAdminLogEventActionChangeTitle                             = 0xe6dfb825
	crc_channelAdminLogEventActionChangeAbout                             = 0x55188a2e
	crc_channelAdminLogEventActionChangeUsername                          = 0x6a4afc38
	crc_channelAdminLogEventActionChangePhoto                             = 0x434bd2af
	crc_channelAdminLogEventActionToggleInvites                           = 0x1b7907ae
	crc_channelAdminLogEventActionToggleSignatures                        = 0x26ae0971
	crc_channelAdminLogEventActionUpdatePinned                            = 0xe9e82c18
	crc_channelAdminLogEventActionEditMessage                             = 0x709b2405
	crc_channelAdminLogEventActionDeleteMessage                           = 0x42e047bb
	crc_channelAdminLogEventActionParticipantJoin                         = 0x183040d3
	crc_channelAdminLogEventActionParticipantLeave                        = 0xf89777f2
	crc_channelAdminLogEventActionParticipantInvite                       = 0xe31c34d8
	crc_channelAdminLogEventActionParticipantToggleBan                    = 0xe6d83d7e
	crc_channelAdminLogEventActionParticipantToggleAdmin                  = 0xd5676710
	crc_channelAdminLogEvent                                              = 0x1fad68cd
	crc_channels_adminLogResults                                          = 0xed8af74d
	crc_channelAdminLogEventsFilter                                       = 0xea107ae4
	crc_topPeerCategoryPhoneCalls                                         = 0x1e76a78c
	crc_pageBlockAudio                                                    = 0x804361ea
	crc_popularContact                                                    = 0x5ce14175
	crc_messageActionScreenshotTaken                                      = 0x4792929b
	crc_messages_favedStickersNotModified                                 = 0x9e8fa6d3
	crc_messages_favedStickers                                            = 0x2cb51097
	crc_updateFavedStickers                                               = 0xe511996d
	crc_updateChannelReadMessagesContents                                 = 0xea29055d
	crc_inputMessagesFilterMyMentions                                     = 0xc1f8e69a
	crc_updateContactsReset                                               = 0x7084a7be
	crc_channelAdminLogEventActionChangeStickerSet                        = 0xb1c3caa7
	crc_messageActionCustomAction                                         = 0xfae69f56
	crc_inputPaymentCredentialsApplePay                                   = 0x0aa1c39f
	crc_inputMessagesFilterGeo                                            = 0xe7026d0d
	crc_inputMessagesFilterContacts                                       = 0xe062db83
	crc_updateChannelAvailableMessages                                    = 0xb23fc698
	crc_channelAdminLogEventActionTogglePreHistoryHidden                  = 0x5f5c95f1
	crc_inputMediaGeoLive                                                 = 0x971fa843
	crc_messageMediaGeoLive                                               = 0xb940c666
	crc_recentMeUrlUnknown                                                = 0x46e1d13d
	crc_recentMeUrlUser                                                   = 0xb92c09e2
	crc_recentMeUrlChat                                                   = 0xb2da71d2
	crc_recentMeUrlChatInvite                                             = 0xeb49081d
	crc_recentMeUrlStickerSet                                             = 0xbc0a57dc
	crc_help_recentMeUrls                                                 = 0x0e0310d7
	crc_channels_channelParticipantsNotModified                           = 0xf0173fe9
	crc_messages_messagesNotModified                                      = 0x74535f21
	crc_inputSingleMedia                                                  = 0x1cc6e91f
	crc_webAuthorization                                                  = 0xa6f8f452
	crc_account_webAuthorizations                                         = 0xed56c9fc
	crc_inputMessageID                                                    = 0xa676a322
	crc_inputMessageReplyTo                                               = 0xbad88395
	crc_inputMessagePinned                                                = 0x86872538
	crc_messageEntityPhone                                                = 0x9b69e34b
	crc_messageEntityCashtag                                              = 0x4c4e743f
	crc_messageActionBotAllowed                                           = 0xc516d679
	crc_inputDialogPeer                                                   = 0xfcaafeb7
	crc_dialogPeer                                                        = 0xe56dbf05
	crc_messages_foundStickerSetsNotModified                              = 0x0d54b65d
	crc_messages_foundStickerSets                                         = 0x8af09dd2
	crc_fileHash                                                          = 0xf39b035c
	crc_webDocumentNoProxy                                                = 0xf9c8bcc6
	crc_inputClientProxy                                                  = 0x75588b3f
	crc_help_termsOfServiceUpdateEmpty                                    = 0xe3309f7f
	crc_help_termsOfServiceUpdate                                         = 0x28ecf961
	crc_inputSecureFileUploaded                                           = 0x3334b0f0
	crc_inputSecureFile                                                   = 0x5367e5be
	crc_inputSecureFileLocation                                           = 0xcbc7ee28
	crc_secureFileEmpty                                                   = 0x64199744
	crc_secureFile                                                        = 0x7d09c27e
	crc_secureData                                                        = 0x8aeabec3
	crc_securePlainPhone                                                  = 0x7d6099dd
	crc_securePlainEmail                                                  = 0x21ec5a5f
	crc_secureValueTypePersonalDetails                                    = 0x9d2a81e3
	crc_secureValueTypePassport                                           = 0x3dac6a00
	crc_secureValueTypeDriverLicense                                      = 0x06e425c4
	crc_secureValueTypeIdentityCard                                       = 0xa0d0744b
	crc_secureValueTypeInternalPassport                                   = 0x99a48f23
	crc_secureValueTypeAddress                                            = 0xcbe31e26
	crc_secureValueTypeUtilityBill                                        = 0xfc36954e
	crc_secureValueTypeBankStatement                                      = 0x89137c0d
	crc_secureValueTypeRentalAgreement                                    = 0x8b883488
	crc_secureValueTypePassportRegistration                               = 0x99e3806a
	crc_secureValueTypeTemporaryRegistration                              = 0xea02ec33
	crc_secureValueTypePhone                                              = 0xb320aadb
	crc_secureValueTypeEmail                                              = 0x8e3ca7ee
	crc_secureValue                                                       = 0x187fa0ca
	crc_inputSecureValue                                                  = 0xdb21d0a7
	crc_secureValueHash                                                   = 0xed1ecdb0
	crc_secureValueErrorData                                              = 0xe8a40bd9
	crc_secureValueErrorFrontSide                                         = 0x00be3dfa
	crc_secureValueErrorReverseSide                                       = 0x868a2aa5
	crc_secureValueErrorSelfie                                            = 0xe537ced6
	crc_secureValueErrorFile                                              = 0x7a700873
	crc_secureValueErrorFiles                                             = 0x666220e9
	crc_secureCredentialsEncrypted                                        = 0x33f0ea47
	crc_account_authorizationForm                                         = 0xad2e1cd8
	crc_account_sentEmailCode                                             = 0x811f854f
	crc_messageActionSecureValuesSentMe                                   = 0x1b287353
	crc_messageActionSecureValuesSent                                     = 0xd95c6154
	crc_help_deepLinkInfoEmpty                                            = 0x66afa166
	crc_help_deepLinkInfo                                                 = 0x6a4ee832
	crc_savedPhoneContact                                                 = 0x1142bd56
	crc_account_takeout                                                   = 0x4dba4501
	crc_inputTakeoutFileLocation                                          = 0x29be5899
	crc_updateDialogUnreadMark                                            = 0xe16459c3
	crc_messages_dialogsNotModified                                       = 0xf0e3e596
	crc_inputWebFileGeoPointLocation                                      = 0x9f2221c9
	crc_contacts_topPeersDisabled                                         = 0xb52c939d
	crc_inputReportReasonCopyright                                        = 0x9b89f93a
	crc_passwordKdfAlgoUnknown                                            = 0xd45ab096
	crc_securePasswordKdfAlgoUnknown                                      = 0x004a8537
	crc_securePasswordKdfAlgoPBKDF2HMACSHA512iter100000                   = 0xbbf2dda0
	crc_securePasswordKdfAlgoSHA512                                       = 0x86471d92
	crc_secureSecretSettings                                              = 0x1527bcac
	crc_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow = 0x3a912d4a
	crc_inputCheckPasswordEmpty                                           = 0x9880f658
	crc_inputCheckPasswordSRP                                             = 0xd27ff082
	crc_secureValueError                                                  = 0x869d758f
	crc_secureValueErrorTranslationFile                                   = 0xa1144770
	crc_secureValueErrorTranslationFiles                                  = 0x34636dd8
	crc_secureRequiredType                                                = 0x829d99da
	crc_secureRequiredTypeOneOf                                           = 0x027477b4
	crc_help_passportConfigNotModified                                    = 0xbfb9f457
	crc_help_passportConfig                                               = 0xa098d6af
	crc_inputAppEvent                                                     = 0x1d1b1245
	crc_jsonObjectValue                                                   = 0xc0de1bd9
	crc_jsonNull                                                          = 0x3f6d7b68
	crc_jsonBool                                                          = 0xc7345e6a
	crc_jsonNumber                                                        = 0x2be0dfa4
	crc_jsonString                                                        = 0xb71e767a
	crc_jsonArray                                                         = 0xf7444763
	crc_jsonObject                                                        = 0x99c1d49d
	crc_inputNotifyBroadcasts                                             = 0xb1db7c7e
	crc_notifyBroadcasts                                                  = 0xd612e8ef
	crc_textSubscript                                                     = 0xed6a8504
	crc_textSuperscript                                                   = 0xc7fb5e01
	crc_textMarked                                                        = 0x034b8621
	crc_textPhone                                                         = 0x1ccb966a
	crc_textImage                                                         = 0x081ccf4f
	crc_pageBlockKicker                                                   = 0x1e148390
	crc_pageTableCell                                                     = 0x34566b6a
	crc_pageTableRow                                                      = 0xe0c0c5e5
	crc_pageBlockTable                                                    = 0xbf4dea82
	crc_pageCaption                                                       = 0x6f747657
	crc_pageListItemText                                                  = 0xb92fb6cd
	crc_pageListItemBlocks                                                = 0x25e073fc
	crc_pageListOrderedItemText                                           = 0x5e068047
	crc_pageListOrderedItemBlocks                                         = 0x98dd8936
	crc_pageBlockOrderedList                                              = 0x9a8ae1e1
	crc_pageBlockDetails                                                  = 0x76768bed
	crc_pageRelatedArticle                                                = 0xb390dc08
	crc_pageBlockRelatedArticles                                          = 0x16115a96
	crc_pageBlockMap                                                      = 0xa44f3ef6
	crc_page                                                              = 0x98657f0d
	crc_inputPrivacyKeyPhoneP2P                                           = 0xdb9e70d2
	crc_privacyKeyPhoneP2P                                                = 0x39491cc8
	crc_textAnchor                                                        = 0x35553762
	crc_help_supportName                                                  = 0x8c05f1c9
	crc_help_userInfoEmpty                                                = 0xf3ae2eed
	crc_help_userInfo                                                     = 0x01eb3758
	crc_messageActionContactSignUp                                        = 0xf3f25f76
	crc_updateMessagePoll                                                 = 0xaca1657b
	crc_pollAnswer                                                        = 0x6ca9c2e9
	crc_poll                                                              = 0x86e18161
	crc_pollAnswerVoters                                                  = 0x3b6ddad2
	crc_pollResults                                                       = 0x7adf2420
	crc_inputMediaPoll                                                    = 0x0f94e5f1
	crc_messageMediaPoll                                                  = 0x4bd6e798
	crc_chatOnlines                                                       = 0xf041e250
	crc_statsURL                                                          = 0x47a971e0
	crc_photoStrippedSize                                                 = 0xe0b0bc2e
	crc_chatAdminRights                                                   = 0x5fb224d5
	crc_chatBannedRights                                                  = 0x9f120418
	crc_updateChatDefaultBannedRights                                     = 0x54c01850
	crc_inputWallPaper                                                    = 0xe630b979
	crc_inputWallPaperSlug                                                = 0x72091c80
	crc_channelParticipantsContacts                                       = 0xbb6ae88d
	crc_channelAdminLogEventActionDefaultBannedRights                     = 0x2df5fc0a
	crc_channelAdminLogEventActionStopPoll                                = 0x8f079643
	crc_account_wallPapersNotModified                                     = 0x1c199183
	crc_account_wallPapers                                                = 0xcdc3858c
	crc_codeSettings                                                      = 0xad253d78
	crc_wallPaperSettings                                                 = 0x372efcd0
	crc_autoDownloadSettings                                              = 0xbaa57628
	crc_account_autoDownloadSettings                                      = 0x63cacf26
	crc_emojiKeyword                                                      = 0xd5b3b9f9
	crc_emojiKeywordDeleted                                               = 0x236df622
	crc_emojiKeywordsDifference                                           = 0x5cc761bd
	crc_emojiURL                                                          = 0xa575739d
	crc_emojiLanguage                                                     = 0xb3fb5361
	crc_inputPrivacyKeyForwards                                           = 0xa4dd4c08
	crc_privacyKeyForwards                                                = 0x69ec56a3
	crc_inputPrivacyKeyProfilePhoto                                       = 0x5719bacc
	crc_privacyKeyProfilePhoto                                            = 0x96151fed
	crc_inputPhotoFileLocation                                            = 0x40181ffe
	crc_inputPhotoLegacyFileLocation                                      = 0xd83466f3
	crc_inputPeerPhotoFileLocation                                        = 0x37257e99
	crc_inputStickerSetThumb                                              = 0x9d84f3db
	crc_folder                                                            = 0xff544e65
	crc_dialogFolder                                                      = 0x71bd134c
	crc_inputDialogPeerFolder                                             = 0x64600527
	crc_dialogPeerFolder                                                  = 0x514519e2
	crc_inputFolderPeer                                                   = 0xfbd2c296
	crc_folderPeer                                                        = 0xe9baa668
	crc_updateFolderPeers                                                 = 0x19360dc0
	crc_inputUserFromMessage                                              = 0x1da448e2
	crc_inputChannelFromMessage                                           = 0x5b934f9d
	crc_inputPeerUserFromMessage                                          = 0xa87b0a1c
	crc_inputPeerChannelFromMessage                                       = 0xbd2a0840
	crc_inputPrivacyKeyPhoneNumber                                        = 0x0352dafa
	crc_privacyKeyPhoneNumber                                             = 0xd19ae46d
	crc_topPeerCategoryForwardUsers                                       = 0xa8406ca9
	crc_topPeerCategoryForwardChats                                       = 0xfbeec0f0
	crc_channelAdminLogEventActionChangeLinkedChat                        = 0x050c7ac8
	crc_messages_searchCounter                                            = 0xe844ebff
	crc_keyboardButtonUrlAuth                                             = 0x10b78d29
	crc_inputKeyboardButtonUrlAuth                                        = 0xd02e7fd4
	crc_urlAuthResultRequest                                              = 0x92d33a0e
	crc_urlAuthResultAccepted                                             = 0x8f8c0e4e
	crc_urlAuthResultDefault                                              = 0xa9d6db1f
	crc_inputPrivacyValueAllowChatParticipants                            = 0x840649cf
	crc_inputPrivacyValueDisallowChatParticipants                         = 0xe94f0f86
	crc_privacyValueAllowChatParticipants                                 = 0x6b134e8e
	crc_privacyValueDisallowChatParticipants                              = 0x41c87565
	crc_messageEntityUnderline                                            = 0x9c4e7e8b
	crc_messageEntityStrike                                               = 0xbf0693d4
	crc_updatePeerSettings                                                = 0x6a7e7366
	crc_channelLocationEmpty                                              = 0xbfb5ad8b
	crc_channelLocation                                                   = 0x209b82db
	crc_peerLocated                                                       = 0xca461b5d
	crc_updatePeerLocated                                                 = 0xb4afcfb0
	crc_channelAdminLogEventActionChangeLocation                          = 0x0e6b76ae
	crc_inputReportReasonGeoIrrelevant                                    = 0xdbd4feed
	crc_channelAdminLogEventActionToggleSlowMode                          = 0x53909779
	crc_auth_authorizationSignUpRequired                                  = 0x44747e9a
	crc_payments_paymentVerificationNeeded                                = 0xd8411139
	crc_inputStickerSetAnimatedEmoji                                      = 0x028703c8
	crc_updateNewScheduledMessage                                         = 0x39a51dfb
	crc_updateDeleteScheduledMessages                                     = 0x90866cee
	crc_restrictionReason                                                 = 0xd072acb4
	crc_inputTheme                                                        = 0x3c5693e9
	crc_inputThemeSlug                                                    = 0xf5890df1
	crc_theme                                                             = 0xa00e67d6
	crc_account_themesNotModified                                         = 0xf41eb622
	crc_account_themes                                                    = 0x9a3d8c6d
	crc_updateTheme                                                       = 0x8216fba3
	crc_inputPrivacyKeyAddedByPhone                                       = 0xd1219bdd
	crc_privacyKeyAddedByPhone                                            = 0x42ffd42b
	crc_updateGeoLiveViewed                                               = 0x871fb939
	crc_updateLoginToken                                                  = 0x564fe691
	crc_auth_loginToken                                                   = 0x629f1980
	crc_auth_loginTokenMigrateTo                                          = 0x068e9916
	crc_auth_loginTokenSuccess                                            = 0x390d5c5e
	crc_account_contentSettings                                           = 0x57e28221
	crc_messages_inactiveChats                                            = 0xa927fec5
	crc_baseThemeClassic                                                  = 0xc3a12462
	crc_baseThemeDay                                                      = 0xfbd81688
	crc_baseThemeNight                                                    = 0xb7b31ea8
	crc_baseThemeTinted                                                   = 0x6d5f77ee
	crc_baseThemeArctic                                                   = 0x5b11125a
	crc_inputWallPaperNoFile                                              = 0x967a462e
	crc_wallPaperNoFile                                                   = 0xe0804116
	crc_inputThemeSettings                                                = 0x8fde504f
	crc_themeSettings                                                     = 0xfa58b6d4
	crc_webPageAttributeTheme                                             = 0x54b56617
	crc_updateMessagePollVote                                             = 0x24f40e77
	crc_messages_votesList                                                = 0x4899484e
	crc_keyboardButtonRequestPoll                                         = 0xbbc7515d
	crc_messageEntityBankCard                                             = 0x761e6af4
	crc_bankCardOpenUrl                                                   = 0xf568028a
	crc_payments_bankCardData                                             = 0x3e24e573
	crc_peerSelfLocated                                                   = 0xf8ec284b
	crc_dialogFilter                                                      = 0x7438f7e8
	crc_dialogFilterSuggested                                             = 0x77744d4a
	crc_updateDialogFilter                                                = 0x26ffde7d
	crc_updateDialogFilterOrder                                           = 0xa5d72105
	crc_updateDialogFilters                                               = 0x3504914f
	crc_statsDateRangeDays                                                = 0xb637edaf
	crc_statsAbsValueAndPrev                                              = 0xcb43acde
	crc_statsPercentValue                                                 = 0xcbce2fe0
	crc_statsGraphAsync                                                   = 0x4a27eb2d
	crc_statsGraphError                                                   = 0xbedc9822
	crc_statsGraph                                                        = 0x8ea464b6
	crc_stats_broadcastStats                                              = 0x396ca5fc
	crc_inputMediaDice                                                    = 0xe66fbf7b
	crc_messageMediaDice                                                  = 0x3f7ee58b
	crc_inputStickerSetDice                                               = 0xe67f520e
	crc_help_promoDataEmpty                                               = 0x98f6ac75
	crc_help_promoData                                                    = 0x8c39793f
	crc_videoSize                                                         = 0xde33b094
	crc_updatePhoneCallSignalingData                                      = 0x2661bf09
	crc_chatInvitePeek                                                    = 0x61695cb0
	crc_statsGroupTopPoster                                               = 0x9d04af9b
	crc_statsGroupTopAdmin                                                = 0xd7584c87
	crc_statsGroupTopInviter                                              = 0x535f779d
	crc_stats_megagroupStats                                              = 0xef7ff916
	crc_globalPrivacySettings                                             = 0x734c4ccb
	crc_phoneConnectionWebrtc                                             = 0x635fe375
	crc_help_countryCode                                                  = 0x4203c5ef
	crc_help_country                                                      = 0xc3878e23
	crc_help_countriesListNotModified                                     = 0x93cc1f32
	crc_help_countriesList                                                = 0x87d0759e
	crc_messageViews                                                      = 0x455b853d
	crc_updateChannelMessageForwards                                      = 0xd29a27f4
	crc_photoSizeProgressive                                              = 0xfa3efb95
	crc_messages_messageViews                                             = 0xb6c4f543
	crc_updateReadChannelDiscussionInbox                                  = 0xd6b19546
	crc_updateReadChannelDiscussionOutbox                                 = 0x695c9e7c
	crc_messages_discussionMessage                                        = 0xa6341782
	crc_messageReplyHeader                                                = 0xafbc09db
	crc_messageReplies                                                    = 0x83d60fc2
	crc_updatePeerBlocked                                                 = 0xebe07752
	crc_peerBlocked                                                       = 0xe8fd8014
	crc_updateChannelUserTyping                                           = 0x8c88c923
	crc_inputMessageCallbackQuery                                         = 0xacfa1a7e
	crc_channelParticipantLeft                                            = 0x1b03f006
	crc_channelParticipantsMentions                                       = 0xe04b5ceb
	crc_updatePinnedMessages                                              = 0xed85eab5
	crc_updatePinnedChannelMessages                                       = 0x5bb98608
	crc_inputMessagesFilterPinned                                         = 0x1bb00451
	crc_stats_messageStats                                                = 0x7fe91c14
	crc_messageActionGeoProximityReached                                  = 0x98e0d697
	crc_photoPathSize                                                     = 0xd8214d41
	crc_speakingInGroupCallAction                                         = 0xd92c2285
	crc_groupCallDiscarded                                                = 0x7780bcb4
	crc_groupCall                                                         = 0xd597650c
	crc_inputGroupCall                                                    = 0xd8aa840f
	crc_messageActionGroupCall                                            = 0x7a0d7f42
	crc_messageActionInviteToGroupCall                                    = 0x502f92f7
	crc_groupCallParticipant                                              = 0xeba636fe
	crc_updateChat                                                        = 0xf89a6a4e
	crc_updateGroupCallParticipants                                       = 0xf2ebdb4e
	crc_updateGroupCall                                                   = 0x14b24500
	crc_phone_groupCall                                                   = 0x9e727aad
	crc_phone_groupParticipants                                           = 0xf47751b6
	crc_inlineQueryPeerTypeSameBotPM                                      = 0x3081ed9d
	crc_inlineQueryPeerTypePM                                             = 0x833c0fac
	crc_inlineQueryPeerTypeChat                                           = 0xd766c50a
	crc_inlineQueryPeerTypeMegagroup                                      = 0x5ec4be43
	crc_inlineQueryPeerTypeBroadcast                                      = 0x6334ee9a
	crc_channelAdminLogEventActionStartGroupCall                          = 0x23209745
	crc_channelAdminLogEventActionDiscardGroupCall                        = 0xdb9f9140
	crc_channelAdminLogEventActionParticipantMute                         = 0xf92424d2
	crc_channelAdminLogEventActionParticipantUnmute                       = 0xe64429c0
	crc_channelAdminLogEventActionToggleGroupCallSetting                  = 0x56d6a247
	crc_inputPaymentCredentialsGooglePay                                  = 0x8ac32801
	crc_messages_historyImport                                            = 0x1662af0b
	crc_sendMessageHistoryImportAction                                    = 0xdbda9246
	crc_messages_historyImportParsed                                      = 0x5e0fb7b9
	crc_inputReportReasonFake                                             = 0xf5ddd6e7
	crc_messages_affectedFoundMessages                                    = 0xef8d3e6c
	crc_messageActionSetMessagesTTL                                       = 0x3c134d7b
	crc_updatePeerHistoryTTL                                              = 0xbb9bb9a5
	crc_updateChatParticipant                                             = 0xd087663a
	crc_updateChannelParticipant                                          = 0x985d3abb
	crc_updateBotStopped                                                  = 0xc4870a49
	crc_chatInviteImporter                                                = 0x8c5adfd9
	crc_messages_exportedChatInvites                                      = 0xbdc62dcc
	crc_messages_exportedChatInvite                                       = 0x1871be50
	crc_messages_exportedChatInviteReplaced                               = 0x222600ef
	crc_messages_chatInviteImporters                                      = 0x81b6b00a
	crc_chatAdminWithInvites                                              = 0xf2ecef23
	crc_messages_chatAdminsWithInvites                                    = 0xb69b72d7
	crc_channelAdminLogEventActionParticipantJoinByInvite                 = 0xfe9fc158
	crc_channelAdminLogEventActionExportedInviteDelete                    = 0x5a50fca4
	crc_channelAdminLogEventActionExportedInviteRevoke                    = 0x410a134e
	crc_channelAdminLogEventActionExportedInviteEdit                      = 0xe90ebb59
	crc_channelAdminLogEventActionParticipantVolume                       = 0x3e7f6847
	crc_channelAdminLogEventActionChangeHistoryTTL                        = 0x6e941a38
	crc_messages_checkedHistoryImportPeer                                 = 0xa24de717
	crc_inputGroupCallStream                                              = 0x0598a92a
	crc_phone_joinAsPeers                                                 = 0xafe5623f
	crc_phone_exportedGroupCallInvite                                     = 0x204bd158
	crc_inputBotInlineMessageMediaInvoice                                 = 0xd7e78225
	crc_botInlineMessageMediaInvoice                                      = 0x354a9b09
	crc_messageActionGroupCallScheduled                                   = 0xb3a07661
	crc_groupCallParticipantVideoSourceGroup                              = 0xdcb118b7
	crc_groupCallParticipantVideo                                         = 0x67753ac8
	crc_updateGroupCallConnection                                         = 0x0b783982
	crc_stickers_suggestedShortName                                       = 0x85fea03f
	crc_botCommandScopeDefault                                            = 0x2f6cb2ab
	crc_botCommandScopeUsers                                              = 0x3c4f04d8
	crc_botCommandScopeChats                                              = 0x6fe1a881
	crc_botCommandScopeChatAdmins                                         = 0xb9aa606a
	crc_botCommandScopePeer                                               = 0xdb9d897d
	crc_botCommandScopePeerAdmins                                         = 0x3fd863d1
	crc_botCommandScopePeerUser                                           = 0x0a1321f3
	crc_account_resetPasswordFailedWait                                   = 0xe3779861
	crc_account_resetPasswordRequestedWait                                = 0xe9effc7d
	crc_account_resetPasswordOk                                           = 0xe926d63e
	crc_updateBotCommands                                                 = 0x4d712f2e
	crc_messageActionSetChatTheme                                         = 0xaa786345
	crc_sendMessageChooseStickerAction                                    = 0xb05ac6b1
	crc_sponsoredMessage                                                  = 0xed5383f7
	crc_messages_sponsoredMessages                                        = 0xc9ee1d87
	crc_inputStickerSetAnimatedEmojiAnimations                            = 0x0cde3739
	crc_sendMessageEmojiInteraction                                       = 0x25972bcb
	crc_sendMessageEmojiInteractionSeen                                   = 0xb665902e
	crc_inputBotInlineMessageID64                                         = 0xb6d915d7
	crc_searchResultsCalendarPeriod                                       = 0xc9b0539f
	crc_messages_searchResultsCalendar                                    = 0x147ee23c
	crc_searchResultPosition                                              = 0x7f648b67
	crc_messages_searchResultsPositions                                   = 0x53b22baf
	crc_messageActionChatJoinedByRequest                                  = 0xebbca3cb
	crc_updatePendingJoinRequests                                         = 0x7063c3db
	crc_updateBotChatInviteRequester                                      = 0x11dfa986
	crc_channelAdminLogEventActionParticipantJoinByRequest                = 0xafb6144a
	crc_inputKeyboardButtonUserProfile                                    = 0xe988037b
	crc_keyboardButtonUserProfile                                         = 0x308660c1
	crc_channels_sendAsPeers                                              = 0xf496b0c6
	crc_channelAdminLogEventActionToggleNoForwards                        = 0xcb2ac766
	crc_messages_stickerSetNotModified                                    = 0xd3f924eb
	crc_users_userFull                                                    = 0x3b6d152e
	crc_messages_peerSettings                                             = 0x6880b94d
	crc_channelAdminLogEventActionSendMessage                             = 0x278f2868
	crc_auth_codeTypeMissedCall                                           = 0xd61ad6ee
	crc_auth_sentCodeTypeMissedCall                                       = 0x82006484
	crc_auth_loggedOut                                                    = 0xc3a2835f
	crc_updateMessageReactions                                            = 0x5e1b3cb8
	crc_reactionCount                                                     = 0xa3d1cb80
	crc_messageReactions                                                  = 0x4f2b9479
	crc_messages_messageReactionsList                                     = 0x31bd492d
	crc_availableReaction                                                 = 0xc077ec01
	crc_messages_availableReactionsNotModified                            = 0x9f071957
	crc_messages_availableReactions                                       = 0x768e3aad
	crc_messageEntitySpoiler                                              = 0x32ca960f
	crc_channelAdminLogEventActionChangeAvailableReactions                = 0xbe4e0ef8
	crc_messagePeerReaction                                               = 0x8c79b63c
	crc_groupCallStreamChannel                                            = 0x80eb48af
	crc_phone_groupCallStreamChannels                                     = 0xd0e482b2
	crc_inputReportReasonIllegalDrugs                                     = 0x0a8eb2be
	crc_inputReportReasonPersonalDetails                                  = 0x9ec7863d
	crc_phone_groupCallStreamRtmpUrl                                      = 0x2dbf3432
	crc_attachMenuBotIconColor                                            = 0x4576f3f0
	crc_attachMenuBotIcon                                                 = 0xb2a7386b
	crc_attachMenuBot                                                     = 0xd90d8dfe
	crc_attachMenuBotsNotModified                                         = 0xf1d88a5c
	crc_attachMenuBots                                                    = 0x3c4301c0
	crc_attachMenuBotsBot                                                 = 0x93bf667f
	crc_updateAttachMenuBots                                              = 0x17b7a20b
	crc_webViewResultUrl                                                  = 0x0c14557c
	crc_simpleWebViewResultUrl                                            = 0x882f76bb
	crc_webViewMessageSent                                                = 0x0c94511c
	crc_updateWebViewResultSent                                           = 0x1592b79d
	crc_keyboardButtonWebView                                             = 0x13767230
	crc_keyboardButtonSimpleWebView                                       = 0xa0c0505c
	crc_messageActionWebViewDataSentMe                                    = 0x47dd8079
	crc_messageActionWebViewDataSent                                      = 0xb4c38cb5
	crc_updateBotMenuButton                                               = 0x14b85813
	crc_botMenuButtonDefault                                              = 0x7533a588
	crc_botMenuButtonCommands                                             = 0x4258c205
	crc_botMenuButton                                                     = 0xc7b57ce6
	crc_account_savedRingtonesNotModified                                 = 0xfbf6e8b1
	crc_account_savedRingtones                                            = 0xc1e92cc5
	crc_updateSavedRingtones                                              = 0x74d8be99
	crc_notificationSoundDefault                                          = 0x97e8bebe
	crc_notificationSoundNone                                             = 0x6f0c34df
	crc_notificationSoundLocal                                            = 0x830b9ae4
	crc_notificationSoundRingtone                                         = 0xff6c8049
	crc_account_savedRingtone                                             = 0xb7263f6d
	crc_account_savedRingtoneConverted                                    = 0x1f307eb7
	crc_attachMenuPeerTypeSameBotPM                                       = 0x7d6be90e
	crc_attachMenuPeerTypeBotPM                                           = 0xc32bfa1a
	crc_attachMenuPeerTypePM                                              = 0xf146d31f
	crc_attachMenuPeerTypeChat                                            = 0x0509113f
	crc_attachMenuPeerTypeBroadcast                                       = 0x7bfbdefc
	crc_chatInvitePublicJoinRequests                                      = 0xed107ab7
	crc_inputInvoiceMessage                                               = 0xc5b56859
	crc_inputInvoiceSlug                                                  = 0xc326caef
	crc_payments_exportedInvoice                                          = 0xaed0cbd9
	crc_updateTranscribedAudio                                            = 0x0084cd5a
	crc_messages_transcribedAudio                                         = 0xcfb9d957
	crc_dialogFilterDefault                                               = 0x363293ae
	crc_help_premiumPromo                                                 = 0x5334759c
	crc_messageEntityCustomEmoji                                          = 0xc8cf05f8
	crc_documentAttributeCustomEmoji                                      = 0xfd149899
	crc_stickerSetFullCovered                                             = 0x40d13c0e
	crc_inputStorePaymentPremiumSubscription                              = 0xa6751e66
	crc_inputStorePaymentGiftPremium                                      = 0x616f7fe8
	crc_messageActionGiftPremium                                          = 0xc83d6aec
	crc_premiumGiftOption                                                 = 0x74c34319
	crc_inputStickerSetPremiumGifts                                       = 0xc88b3b02
	crc_updateReadFeaturedEmojiStickers                                   = 0xfb4c496c
	crc_inputPrivacyKeyVoiceMessages                                      = 0xaee69d68
	crc_privacyKeyVoiceMessages                                           = 0x0697f414
	crc_paymentFormMethod                                                 = 0x88f8f21b
	crc_inputWebFileAudioAlbumThumbLocation                               = 0xf46fe924
	crc_emojiStatusEmpty                                                  = 0x2de11aae
	crc_emojiStatus                                                       = 0x929b619d
	crc_emojiStatusUntil                                                  = 0xfa30a8c7
	crc_updateUserEmojiStatus                                             = 0x28373599
	crc_updateRecentEmojiStatuses                                         = 0x30f443db
	crc_account_emojiStatusesNotModified                                  = 0xd08ce645
	crc_account_emojiStatuses                                             = 0x90c467d1
	crc_reactionEmpty                                                     = 0x79f5d419
	crc_reactionEmoji                                                     = 0x1b2286b8
	crc_reactionCustomEmoji                                               = 0x8935fc73
	crc_chatReactionsNone                                                 = 0xeafc32bc
	crc_chatReactionsAll                                                  = 0x52928bca
	crc_chatReactionsSome                                                 = 0x661d4037
	crc_messages_reactionsNotModified                                     = 0xb06fdbdf
	crc_messages_reactions                                                = 0xeafdf716
	crc_updateRecentReactions                                             = 0x6f7863f4
	crc_updateMoveStickerSetToTop                                         = 0x86fccf85
	crc_auth_sentCodeTypeEmailCode                                        = 0xf450f59b
	crc_auth_sentCodeTypeSetUpEmailRequired                               = 0xa5491dea
	crc_emailVerifyPurposeLoginSetup                                      = 0x4345be73
	crc_emailVerifyPurposeLoginChange                                     = 0x527d22eb
	crc_emailVerifyPurposePassport                                        = 0xbbf51685
	crc_emailVerificationCode                                             = 0x922e55a9
	crc_emailVerificationGoogle                                           = 0xdb909ec2
	crc_emailVerificationApple                                            = 0x96d074fd
	crc_account_emailVerified                                             = 0x2b96cd1b
	crc_account_emailVerifiedLogin                                        = 0xe1bb0d61
	crc_premiumSubscriptionOption                                         = 0x5f2d1df2
	crc_inputStickerSetEmojiGenericAnimations                             = 0x04c4d4ce
	crc_inputStickerSetEmojiDefaultStatuses                               = 0x29d0f5ee
	crc_sendAsPeer                                                        = 0xb81c7034
	crc_messageExtendedMediaPreview                                       = 0xad628cc8
	crc_messageExtendedMedia                                              = 0xee479c64
	crc_updateMessageExtendedMedia                                        = 0x5a73a98c
	crc_stickerKeyword                                                    = 0xfcfeb29c
	crc_username                                                          = 0xb4073647
	crc_channelAdminLogEventActionChangeUsernames                         = 0xf04fb3a9
	crc_channelAdminLogEventActionToggleForum                             = 0x02cc6383
	crc_channelAdminLogEventActionCreateTopic                             = 0x58707d28
	crc_channelAdminLogEventActionEditTopic                               = 0xf06fe208
	crc_channelAdminLogEventActionDeleteTopic                             = 0xae168909
	crc_channelAdminLogEventActionPinTopic                                = 0x5d8d353b
	crc_forumTopicDeleted                                                 = 0x023f109b
	crc_forumTopic                                                        = 0x71701da9
	crc_messages_forumTopics                                              = 0x367617d3
	crc_messageActionTopicCreate                                          = 0x0d999256
	crc_messageActionTopicEdit                                            = 0xc0944820
	crc_updateChannelPinnedTopic                                          = 0x192efbe3
	crc_inputNotifyForumTopic                                             = 0x5c467992
	crc_notifyForumTopic                                                  = 0x226e6308
	crc_inputStickerSetEmojiDefaultTopicIcons                             = 0x44c1f8e9
	crc_messages_sponsoredMessagesEmpty                                   = 0x1839490f
	crc_updateChannelPinnedTopics                                         = 0xfe198602
	crc_defaultHistoryTTL                                                 = 0x43b46b20
	crc_auth_codeTypeFragmentSms                                          = 0x06ed998c
	crc_auth_sentCodeTypeFragmentSms                                      = 0xd9565c39
	crc_exportedContactToken                                              = 0x41bf109b
	crc_channelAdminLogEventActionToggleAntiSpam                          = 0x64f36dfc
	crc_messageActionSuggestProfilePhoto                                  = 0x57de635e
	crc_stickerSetNoCovered                                               = 0x77b15d1c
	crc_updateUser                                                        = 0x20529438
	crc_auth_sentCodeSuccess                                              = 0x2390fe44
	crc_messageActionRequestedPeer                                        = 0x31518e9b
	crc_requestPeerTypeUser                                               = 0x5f3b8a00
	crc_requestPeerTypeChat                                               = 0xc9f06e1b
	crc_requestPeerTypeBroadcast                                          = 0x339bef6c
	crc_keyboardButtonRequestPeer                                         = 0x53d7bfd8
	crc_emojiListNotModified                                              = 0x481eadfa
	crc_emojiList                                                         = 0x7a1e11d1
	crc_auth_sentCodeTypeFirebaseSms                                      = 0xe57b1432
	crc_emojiGroup                                                        = 0x7a9abda9
	crc_messages_emojiGroupsNotModified                                   = 0x6fb4ad87
	crc_messages_emojiGroups                                              = 0x881fb94b
	crc_videoSizeEmojiMarkup                                              = 0xf85c413c
	crc_videoSizeStickerMarkup                                            = 0x0da082fe
	crc_textWithEntities                                                  = 0x751f3146
	crc_messages_translateResult                                          = 0x33db32f8
	crc_autoSaveSettings                                                  = 0xc84834ce
	crc_autoSaveException                                                 = 0x81602d47
	crc_account_autoSaveSettings                                          = 0x4c3e069d
	crc_updateAutoSaveSettings                                            = 0xec05b097
	crc_help_appConfigNotModified                                         = 0x7cde641d
	crc_help_appConfig                                                    = 0xdd18782e
	crc_inputBotAppID                                                     = 0xa920bd7a
	crc_inputBotAppShortName                                              = 0x908c0407
	crc_botAppNotModified                                                 = 0x5da674b7
	crc_botApp                                                            = 0x95fcd1d6
	crc_messages_botApp                                                   = 0xeb50adf5
	crc_appWebViewResultUrl                                               = 0x3c1b4f0d
	crc_inlineBotWebView                                                  = 0xb57295d5
	crc_readParticipantDate                                               = 0x4a4ff172
	crc_updateGroupInvitePrivacyForbidden                                 = 0xccf08ad6
	crc_dialogFilterChatlist                                              = 0xd64a04a8
	crc_inputChatlistDialogFilter                                         = 0xf3e0da33
	crc_exportedChatlistInvite                                            = 0x0c5181ac
	crc_chatlists_exportedChatlistInvite                                  = 0x10e6e3a6
	crc_chatlists_exportedInvites                                         = 0x10ab6dc7
	crc_chatlists_chatlistInviteAlready                                   = 0xfa87f659
	crc_chatlists_chatlistInvite                                          = 0x1dcd839d
	crc_chatlists_chatlistUpdates                                         = 0x93bd878d
	crc_messageActionSetChatWallPaper                                     = 0x5060a3f4
	crc_bots_botInfo                                                      = 0xe8a775b0
	crc_inlineQueryPeerTypeBotPM                                          = 0x0e3b2d0c
	crc_messagePeerVote                                                   = 0xb6cc2d5c
	crc_messagePeerVoteInputOption                                        = 0x74cda504
	crc_messagePeerVoteMultiple                                           = 0x4628f6e6
	crc_inputPrivacyKeyAbout                                              = 0x3823cc40
	crc_privacyKeyAbout                                                   = 0xa486b761
	crc_sponsoredWebPage                                                  = 0x3db8ec63
	crc_storyViews                                                        = 0x8d595cd6
	crc_storyItemDeleted                                                  = 0x51e6ee4f
	crc_storyItemSkipped                                                  = 0xffadc913
	crc_storyItem                                                         = 0xaf6365a1
	crc_updateStory                                                       = 0x75b3b798
	crc_updateReadStories                                                 = 0xf74e932b
	crc_stories_allStoriesNotModified                                     = 0x1158fe3e
	crc_stories_allStories                                                = 0x6efc5e81
	crc_stories_stories                                                   = 0x5dd8c3c8
	crc_inputPrivacyValueAllowCloseFriends                                = 0x2f453e49
	crc_privacyValueAllowCloseFriends                                     = 0xf7e8d89b
	crc_storyView                                                         = 0xb0bdeac5
	crc_stories_storyViewsList                                            = 0x59d78fc5
	crc_stories_storyViews                                                = 0xde9eed1d
	crc_inputReplyToMessage                                               = 0x22c0f6d5
	crc_inputReplyToStory                                                 = 0x15b0f283
	crc_messageReplyStoryHeader                                           = 0x9c98bfc1
	crc_updateStoryID                                                     = 0x1bf335b9
	crc_exportedStoryLink                                                 = 0x3fc9053b
	crc_inputMediaStory                                                   = 0x89fdd778
	crc_messageMediaStory                                                 = 0x68cb6283
	crc_webPageAttributeStory                                             = 0x2e94c3e7
	crc_storiesStealthMode                                                = 0x712e27fd
	crc_updateStoriesStealthMode                                          = 0x2c084dc1
	crc_mediaAreaCoordinates                                              = 0x03d1ea4e
	crc_mediaAreaVenue                                                    = 0xbe82db9c
	crc_inputMediaAreaVenue                                               = 0xb282217f
	crc_mediaAreaGeoPoint                                                 = 0xdf8b3b22
	crc_updateSentStoryReaction                                           = 0x7d627683
	crc_mediaAreaSuggestedReaction                                        = 0x14455871
	crc_peerStories                                                       = 0x9a35e999
	crc_stories_peerStories                                               = 0xcae68768
	crc_messages_webPage                                                  = 0xfd5e12bd
	crc_inputStorePaymentPremiumGiftCode                                  = 0xa3805f3f
	crc_inputStorePaymentPremiumGiveaway                                  = 0x160544ca
	crc_inputInvoicePremiumGiftCode                                       = 0x98986c0d
	crc_premiumGiftCodeOption                                             = 0x257e962b
	crc_payments_checkedGiftCode                                          = 0x284a1096
	crc_messageMediaGiveaway                                              = 0xdaad85b0
	crc_messageActionGiftCode                                             = 0x678c2e09
	crc_messageActionGiveawayLaunch                                       = 0x332ba9ed
	crc_payments_giveawayInfo                                             = 0x4367daa0
	crc_payments_giveawayInfoResults                                      = 0x00cd5570
	crc_messageEntityBlockquote                                           = 0x020df5d0
	crc_prepaidGiveaway                                                   = 0xb2539d54
	crc_inputMediaWebPage                                                 = 0xc21b8849
	crc_inputBotInlineMessageMediaWebPage                                 = 0xbddcc510
	crc_botInlineMessageMediaWebPage                                      = 0x809ad9a6
	crc_boost                                                             = 0x2a1c8c71
	crc_premium_boostsList                                                = 0x86f8613c
	crc_myBoost                                                           = 0xc448415c
	crc_premium_myBoosts                                                  = 0x9ae228e2
	crc_premium_boostsStatus                                              = 0x4959427a
	crc_updateBotChatBoost                                                = 0x904dd49c
	crc_updateChannelViewForumAsMessages                                  = 0x07b68920
	crc_messageActionGiveawayResults                                      = 0x2a9fadc5
	crc_updatePeerWallpaper                                               = 0xae3f101d
	crc_storyFwdHeader                                                    = 0xb826e150
	crc_postInteractionCountersMessage                                    = 0xe7058e7f
	crc_postInteractionCountersStory                                      = 0x8a480e27
	crc_stats_storyStats                                                  = 0x50cd067c
	crc_publicForwardMessage                                              = 0x01f2bf4a
	crc_publicForwardStory                                                = 0xedf3add0
	crc_stats_publicForwards                                              = 0x93037e20
	crc_peerColor                                                         = 0xb54b5acf
	crc_help_peerColorSet                                                 = 0x26219a58
	crc_help_peerColorProfileSet                                          = 0x767d61eb
	crc_help_peerColorOption                                              = 0xef8430ab
	crc_help_peerColorsNotModified                                        = 0x2ba1f5ce
	crc_help_peerColors                                                   = 0x00f8ed08
	crc_messageMediaGiveawayResults                                       = 0xc6991068
	crc_storyReaction                                                     = 0x6090d6d5
	crc_storyReactionPublicForward                                        = 0xbbab2643
	crc_storyReactionPublicRepost                                         = 0xcfcd0f13
	crc_stories_storyReactionsList                                        = 0xaa5f789c
	crc_storyViewPublicForward                                            = 0x9083670b
	crc_storyViewPublicRepost                                             = 0xbd74cf49
	crc_channelAdminLogEventActionChangePeerColor                         = 0x5796e780
	crc_channelAdminLogEventActionChangeProfilePeerColor                  = 0x5e477b25
	crc_channelAdminLogEventActionChangeWallpaper                         = 0x31bb5d52
	crc_channelAdminLogEventActionChangeEmojiStatus                       = 0x3ea9feb1
	crc_inputStickerSetEmojiChannelDefaultStatuses                        = 0x49748553
	crc_mediaAreaChannelPost                                              = 0x770416af
	crc_inputMediaAreaChannelPost                                         = 0x2271f2bf
	crc_updateBotMessageReaction                                          = 0xac21d3ce
	crc_updateBotMessageReactions                                         = 0x09cb7759
	crc_savedDialog                                                       = 0xbd87cb6c
	crc_updateSavedDialogPinned                                           = 0xaeaf9e74
	crc_updatePinnedSavedDialogs                                          = 0x686c85a6
	crc_messages_savedDialogs                                             = 0xf83ae221
	crc_messages_savedDialogsSlice                                        = 0x44ba9dd9
	crc_messages_savedDialogsNotModified                                  = 0xc01f6fe8
	crc_invokeAfterMsg                                                    = 0xcb9f372d
	crc_invokeAfterMsgs                                                   = 0x3dc4b4f0
	crc_auth_sendCode                                                     = 0xa677244f
	crc_auth_signUp                                                       = 0x80eee427
	crc_auth_signIn                                                       = 0x8d52a951
	crc_auth_logOut                                                       = 0x3e72ba19
	crc_auth_resetAuthorizations                                          = 0x9fab0d1a
	crc_auth_exportAuthorization                                          = 0xe5bfffcd
	crc_auth_importAuthorization                                          = 0xa57a7dad
	crc_auth_bindTempAuthKey                                              = 0xcdd42a05
	crc_account_registerDevice                                            = 0xec86017a
	crc_account_unregisterDevice                                          = 0x6a0d3206
	crc_account_updateNotifySettings                                      = 0x84be5b93
	crc_account_getNotifySettings                                         = 0x12b3ad31
	crc_account_resetNotifySettings                                       = 0xdb7e1747
	crc_account_updateProfile                                             = 0x78515775
	crc_account_updateStatus                                              = 0x6628562c
	crc_account_getWallPapers                                             = 0x07967d36
	crc_account_reportPeer                                                = 0xc5ba3d86
	crc_users_getUsers                                                    = 0x0d91a548
	crc_users_getFullUser                                                 = 0xb60f5918
	crc_contacts_getContactIDs                                            = 0x7adc669d
	crc_contacts_getStatuses                                              = 0xc4a353ee
	crc_contacts_getContacts                                              = 0x5dd69e12
	crc_contacts_importContacts                                           = 0x2c800be5
	crc_contacts_deleteContacts                                           = 0x096a0e00
	crc_contacts_deleteByPhones                                           = 0x1013fd9e
	crc_contacts_block                                                    = 0x2e2e8734
	crc_contacts_unblock                                                  = 0xb550d328
	crc_contacts_getBlocked                                               = 0x9a868f80
	crc_messages_getMessages                                              = 0x63c66506
	crc_messages_getDialogs                                               = 0xa0f4cb4f
	crc_messages_getHistory                                               = 0x4423e6c5
	crc_messages_search                                                   = 0xa7b4e929
	crc_messages_readHistory                                              = 0x0e306d3a
	crc_messages_deleteHistory                                            = 0xb08f922a
	crc_messages_deleteMessages                                           = 0xe58e95d2
	crc_messages_receivedMessages                                         = 0x05a954c0
	crc_messages_setTyping                                                = 0x58943ee2
	crc_messages_sendMessage                                              = 0x280d096f
	crc_messages_sendMedia                                                = 0x72ccc23d
	crc_messages_forwardMessages                                          = 0xc661bbc4
	crc_messages_reportSpam                                               = 0xcf1592db
	crc_messages_getPeerSettings                                          = 0xefd9a6a2
	crc_messages_report                                                   = 0x8953ab4e
	crc_messages_getChats                                                 = 0x49e9528f
	crc_messages_getFullChat                                              = 0xaeb00b34
	crc_messages_editChatTitle                                            = 0x73783ffd
	crc_messages_editChatPhoto                                            = 0x35ddd674
	crc_messages_addChatUser                                              = 0xf24753e3
	crc_messages_deleteChatUser                                           = 0xa2185cab
	crc_messages_createChat                                               = 0x0034a818
	crc_updates_getState                                                  = 0xedd4882a
	crc_updates_getDifference                                             = 0x19c2f763
	crc_photos_updateProfilePhoto                                         = 0x09e82039
	crc_photos_uploadProfilePhoto                                         = 0x0388a3b5
	crc_photos_deletePhotos                                               = 0x87cf7f2f
	crc_upload_saveFilePart                                               = 0xb304a621
	crc_upload_getFile                                                    = 0xbe5335be
	crc_help_getConfig                                                    = 0xc4f9186b
	crc_help_getNearestDc                                                 = 0x1fb33026
	crc_help_getAppUpdate                                                 = 0x522d5a7d
	crc_help_getInviteText                                                = 0x4d392343
	crc_photos_getUserPhotos                                              = 0x91cd32a8
	crc_messages_getDhConfig                                              = 0x26cf8950
	crc_messages_requestEncryption                                        = 0xf64daf43
	crc_messages_acceptEncryption                                         = 0x3dbc0415
	crc_messages_discardEncryption                                        = 0xf393aea0
	crc_messages_setEncryptedTyping                                       = 0x791451ed
	crc_messages_readEncryptedHistory                                     = 0x7f4b690a
	crc_messages_sendEncrypted                                            = 0x44fa7a15
	crc_messages_sendEncryptedFile                                        = 0x5559481d
	crc_messages_sendEncryptedService                                     = 0x32d439a4
	crc_messages_receivedQueue                                            = 0x55a5bb66
	crc_messages_reportEncryptedSpam                                      = 0x4b0c8c0f
	crc_upload_saveBigFilePart                                            = 0xde7b673d
	crc_initConnection                                                    = 0xc1cd5ea9
	crc_help_getSupport                                                   = 0x9cdf08cd
	crc_messages_readMessageContents                                      = 0x36a73f77
	crc_account_checkUsername                                             = 0x2714d86c
	crc_account_updateUsername                                            = 0x3e0bdd7c
	crc_contacts_search                                                   = 0x11f812d8
	crc_account_getPrivacy                                                = 0xdadbc950
	crc_account_setPrivacy                                                = 0xc9f81ce8
	crc_account_deleteAccount                                             = 0xa2c0cf74
	crc_account_getAccountTTL                                             = 0x08fc711d
	crc_account_setAccountTTL                                             = 0x2442485e
	crc_invokeWithLayer                                                   = 0xda9b0d0d
	crc_contacts_resolveUsername                                          = 0xf93ccba3
	crc_account_sendChangePhoneCode                                       = 0x82574ae5
	crc_account_changePhone                                               = 0x70c32edb
	crc_messages_getStickers                                              = 0xd5a5d3a1
	crc_messages_getAllStickers                                           = 0xb8a0a1a8
	crc_account_updateDeviceLocked                                        = 0x38df3532
	crc_auth_importBotAuthorization                                       = 0x67a3ff2c
	crc_messages_getWebPagePreview                                        = 0x8b68b0cc
	crc_account_getAuthorizations                                         = 0xe320c158
	crc_account_resetAuthorization                                        = 0xdf77f3bc
	crc_account_getPassword                                               = 0x548a30f5
	crc_account_getPasswordSettings                                       = 0x9cd4eaf9
	crc_account_updatePasswordSettings                                    = 0xa59b102f
	crc_auth_checkPassword                                                = 0xd18b4d16
	crc_auth_requestPasswordRecovery                                      = 0xd897bc66
	crc_auth_recoverPassword                                              = 0x37096c70
	crc_invokeWithoutUpdates                                              = 0xbf9459b7
	crc_messages_exportChatInvite                                         = 0xa02ce5d5
	crc_messages_checkChatInvite                                          = 0x3eadb1bb
	crc_messages_importChatInvite                                         = 0x6c50051c
	crc_messages_getStickerSet                                            = 0xc8a0ec74
	crc_messages_installStickerSet                                        = 0xc78fe460
	crc_messages_uninstallStickerSet                                      = 0xf96e55de
	crc_messages_startBot                                                 = 0xe6df7378
	crc_messages_getMessagesViews                                         = 0x5784d3e1
	crc_channels_readHistory                                              = 0xcc104937
	crc_channels_deleteMessages                                           = 0x84c1fd4e
	crc_channels_reportSpam                                               = 0xf44a8315
	crc_channels_getMessages                                              = 0xad8c9a23
	crc_channels_getParticipants                                          = 0x77ced9d0
	crc_channels_getParticipant                                           = 0xa0ab6cc6
	crc_channels_getChannels                                              = 0x0a7f6bbb
	crc_channels_getFullChannel                                           = 0x08736a09
	crc_channels_createChannel                                            = 0x91006707
	crc_channels_editAdmin                                                = 0xd33c8902
	crc_channels_editTitle                                                = 0x566decd0
	crc_channels_editPhoto                                                = 0xf12e57c9
	crc_channels_checkUsername                                            = 0x10e6bd2c
	crc_channels_updateUsername                                           = 0x3514b3de
	crc_channels_joinChannel                                              = 0x24b524c5
	crc_channels_leaveChannel                                             = 0xf836aa95
	crc_channels_inviteToChannel                                          = 0x199f3a6c
	crc_channels_deleteChannel                                            = 0xc0111fe3
	crc_updates_getChannelDifference                                      = 0x03173d78
	crc_messages_editChatAdmin                                            = 0xa85bd1c2
	crc_messages_migrateChat                                              = 0xa2875319
	crc_messages_searchGlobal                                             = 0x4bc6589a
	crc_messages_reorderStickerSets                                       = 0x78337739
	crc_messages_getDocumentByHash                                        = 0xb1f2061f
	crc_messages_getSavedGifs                                             = 0x5cf09635
	crc_messages_saveGif                                                  = 0x327a30cb
	crc_messages_getInlineBotResults                                      = 0x514e999d
	crc_messages_setInlineBotResults                                      = 0xbb12a419
	crc_messages_sendInlineBotResult                                      = 0xf7bc68ba
	crc_channels_exportMessageLink                                        = 0xe63fadeb
	crc_channels_toggleSignatures                                         = 0x1f69b606
	crc_auth_resendCode                                                   = 0x3ef1a9bf
	crc_auth_cancelCode                                                   = 0x1f040578
	crc_messages_getMessageEditData                                       = 0xfda68d36
	crc_messages_editMessage                                              = 0x48f71778
	crc_messages_editInlineBotMessage                                     = 0x83557dba
	crc_messages_getBotCallbackAnswer                                     = 0x9342ca07
	crc_messages_setBotCallbackAnswer                                     = 0xd58f130a
	crc_contacts_getTopPeers                                              = 0x973478b6
	crc_contacts_resetTopPeerRating                                       = 0x1ae373ac
	crc_messages_getPeerDialogs                                           = 0xe470bcfd
	crc_messages_saveDraft                                                = 0x7ff3b806
	crc_messages_getAllDrafts                                             = 0x6a3f8d65
	crc_messages_getFeaturedStickers                                      = 0x64780b14
	crc_messages_readFeaturedStickers                                     = 0x5b118126
	crc_messages_getRecentStickers                                        = 0x9da9403b
	crc_messages_saveRecentSticker                                        = 0x392718f8
	crc_messages_clearRecentStickers                                      = 0x8999602d
	crc_messages_getArchivedStickers                                      = 0x57f17692
	crc_account_sendConfirmPhoneCode                                      = 0x1b3faa88
	crc_account_confirmPhone                                              = 0x5f2178c3
	crc_channels_getAdminedPublicChannels                                 = 0xf8b036af
	crc_messages_getMaskStickers                                          = 0x640f82b8
	crc_messages_getAttachedStickers                                      = 0xcc5b67cc
	crc_auth_dropTempAuthKeys                                             = 0x8e48a188
	crc_messages_setGameScore                                             = 0x8ef8ecc0
	crc_messages_setInlineGameScore                                       = 0x15ad9f64
	crc_messages_getGameHighScores                                        = 0xe822649d
	crc_messages_getInlineGameHighScores                                  = 0x0f635e1b
	crc_messages_getCommonChats                                           = 0xe40ca104
	crc_help_setBotUpdatesStatus                                          = 0xec22cfcd
	crc_messages_getWebPage                                               = 0x8d9692a3
	crc_messages_toggleDialogPin                                          = 0xa731e257
	crc_messages_reorderPinnedDialogs                                     = 0x3b1adf37
	crc_messages_getPinnedDialogs                                         = 0xd6b94df2
	crc_bots_sendCustomRequest                                            = 0xaa2769ed
	crc_bots_answerWebhookJSONQuery                                       = 0xe6213f4d
	crc_upload_getWebFile                                                 = 0x24e6818d
	crc_payments_getPaymentForm                                           = 0x37148dbb
	crc_payments_getPaymentReceipt                                        = 0x2478d1cc
	crc_payments_validateRequestedInfo                                    = 0xb6c8f12b
	crc_payments_sendPaymentForm                                          = 0x2d03522f
	crc_account_getTmpPassword                                            = 0x449e0b51
	crc_payments_getSavedInfo                                             = 0x227d824b
	crc_payments_clearSavedInfo                                           = 0xd83d70c1
	crc_messages_setBotShippingResults                                    = 0xe5f672fa
	crc_messages_setBotPrecheckoutResults                                 = 0x09c2dd95
	crc_stickers_createStickerSet                                         = 0x9021ab67
	crc_stickers_removeStickerFromSet                                     = 0xf7760f51
	crc_stickers_changeStickerPosition                                    = 0xffb6d4ca
	crc_stickers_addStickerToSet                                          = 0x8653febe
	crc_messages_uploadMedia                                              = 0x519bc2b1
	crc_phone_getCallConfig                                               = 0x55451fa9
	crc_phone_requestCall                                                 = 0x42ff96ed
	crc_phone_acceptCall                                                  = 0x3bd2b4a0
	crc_phone_confirmCall                                                 = 0x2efe1722
	crc_phone_receivedCall                                                = 0x17d54f61
	crc_phone_discardCall                                                 = 0xb2cbc1c0
	crc_phone_setCallRating                                               = 0x59ead627
	crc_phone_saveCallDebug                                               = 0x277add7e
	crc_upload_getCdnFile                                                 = 0x395f69da
	crc_upload_reuploadCdnFile                                            = 0x9b2754a8
	crc_help_getCdnConfig                                                 = 0x52029342
	crc_langpack_getLangPack                                              = 0xf2f2330a
	crc_langpack_getStrings                                               = 0xefea3803
	crc_langpack_getDifference                                            = 0xcd984aa5
	crc_langpack_getLanguages                                             = 0x42c6978f
	crc_channels_editBanned                                               = 0x96e6cd81
	crc_channels_getAdminLog                                              = 0x33ddf480
	crc_upload_getCdnFileHashes                                           = 0x91dc3f31
	crc_messages_sendScreenshotNotification                               = 0xa1405817
	crc_channels_setStickers                                              = 0xea8ca4f9
	crc_messages_getFavedStickers                                         = 0x04f1aaa9
	crc_messages_faveSticker                                              = 0xb9ffc55b
	crc_channels_readMessageContents                                      = 0xeab5dc38
	crc_contacts_resetSaved                                               = 0x879537f1
	crc_messages_getUnreadMentions                                        = 0xf107e790
	crc_channels_deleteHistory                                            = 0x9baa9647
	crc_help_getRecentMeUrls                                              = 0x3dc0f114
	crc_channels_togglePreHistoryHidden                                   = 0xeabbb94c
	crc_messages_readMentions                                             = 0x36e5bf4d
	crc_messages_getRecentLocations                                       = 0x702a40e0
	crc_messages_sendMultiMedia                                           = 0x456e8987
	crc_messages_uploadEncryptedFile                                      = 0x5057c497
	crc_account_getWebAuthorizations                                      = 0x182e6d6f
	crc_account_resetWebAuthorization                                     = 0x2d01b9ef
	crc_account_resetWebAuthorizations                                    = 0x682d2594
	crc_messages_searchStickerSets                                        = 0x35705b8a
	crc_upload_getFileHashes                                              = 0x9156982a
	crc_help_getTermsOfServiceUpdate                                      = 0x2ca51fd1
	crc_help_acceptTermsOfService                                         = 0xee72f79a
	crc_account_getAllSecureValues                                        = 0xb288bc7d
	crc_account_getSecureValue                                            = 0x73665bc2
	crc_account_saveSecureValue                                           = 0x899fe31d
	crc_account_deleteSecureValue                                         = 0xb880bc4b
	crc_users_setSecureValueErrors                                        = 0x90c894b5
	crc_account_getAuthorizationForm                                      = 0xa929597a
	crc_account_acceptAuthorization                                       = 0xf3ed4c73
	crc_account_sendVerifyPhoneCode                                       = 0xa5a356f9
	crc_account_verifyPhone                                               = 0x4dd3a7f6
	crc_account_sendVerifyEmailCode                                       = 0x98e037bb
	crc_account_verifyEmail                                               = 0x032da4cf
	crc_help_getDeepLinkInfo                                              = 0x3fedc75f
	crc_contacts_getSaved                                                 = 0x82f1e39f
	crc_channels_getLeftChannels                                          = 0x8341ecc0
	crc_account_initTakeoutSession                                        = 0x8ef3eab0
	crc_account_finishTakeoutSession                                      = 0x1d2652ee
	crc_messages_getSplitRanges                                           = 0x1cff7e08
	crc_invokeWithMessagesRange                                           = 0x365275f2
	crc_invokeWithTakeout                                                 = 0xaca9fd2e
	crc_messages_markDialogUnread                                         = 0xc286d98f
	crc_messages_getDialogUnreadMarks                                     = 0x22e24e22
	crc_contacts_toggleTopPeers                                           = 0x8514bdda
	crc_messages_clearAllDrafts                                           = 0x7e58ee9c
	crc_help_getAppConfig                                                 = 0x61e3f854
	crc_help_saveAppLog                                                   = 0x6f02f748
	crc_help_getPassportConfig                                            = 0xc661ad08
	crc_langpack_getLanguage                                              = 0x6a596502
	crc_messages_updatePinnedMessage                                      = 0xd2aaf7ec
	crc_account_confirmPasswordEmail                                      = 0x8fdf1920
	crc_account_resendPasswordEmail                                       = 0x7a7f2a15
	crc_account_cancelPasswordEmail                                       = 0xc1cbd5b6
	crc_help_getSupportName                                               = 0xd360e72c
	crc_help_getUserInfo                                                  = 0x038a08d3
	crc_help_editUserInfo                                                 = 0x66b91b70
	crc_account_getContactSignUpNotification                              = 0x9f07c728
	crc_account_setContactSignUpNotification                              = 0xcff43f61
	crc_account_getNotifyExceptions                                       = 0x53577479
	crc_messages_sendVote                                                 = 0x10ea6184
	crc_messages_getPollResults                                           = 0x73bb643b
	crc_messages_getOnlines                                               = 0x6e2be050
	crc_messages_editChatAbout                                            = 0xdef60797
	crc_messages_editChatDefaultBannedRights                              = 0xa5866b41
	crc_account_getWallPaper                                              = 0xfc8ddbea
	crc_account_uploadWallPaper                                           = 0xe39a8f03
	crc_account_saveWallPaper                                             = 0x6c5a5b37
	crc_account_installWallPaper                                          = 0xfeed5769
	crc_account_resetWallPapers                                           = 0xbb3b9804
	crc_account_getAutoDownloadSettings                                   = 0x56da0b3f
	crc_account_saveAutoDownloadSettings                                  = 0x76f36233
	crc_messages_getEmojiKeywords                                         = 0x35a0e062
	crc_messages_getEmojiKeywordsDifference                               = 0x1508b6af
	crc_messages_getEmojiKeywordsLanguages                                = 0x4e9963b2
	crc_messages_getEmojiURL                                              = 0xd5b10c26
	crc_folders_editPeerFolders                                           = 0x6847d0ab
	crc_messages_getSearchCounters                                        = 0x1bbcf300
	crc_channels_getGroupsForDiscussion                                   = 0xf5dad378
	crc_channels_setDiscussionGroup                                       = 0x40582bb2
	crc_messages_requestUrlAuth                                           = 0x198fb446
	crc_messages_acceptUrlAuth                                            = 0xb12c7125
	crc_messages_hidePeerSettingsBar                                      = 0x4facb138
	crc_contacts_addContact                                               = 0xe8f463d0
	crc_contacts_acceptContact                                            = 0xf831a20f
	crc_channels_editCreator                                              = 0x8f38cd1f
	crc_contacts_getLocated                                               = 0xd348bc44
	crc_channels_editLocation                                             = 0x58e63f6d
	crc_channels_toggleSlowMode                                           = 0xedd49ef0
	crc_messages_getScheduledHistory                                      = 0xf516760b
	crc_messages_getScheduledMessages                                     = 0xbdbb0464
	crc_messages_sendScheduledMessages                                    = 0xbd38850a
	crc_messages_deleteScheduledMessages                                  = 0x59ae2b16
	crc_account_uploadTheme                                               = 0x1c3db333
	crc_account_createTheme                                               = 0x652e4400
	crc_account_updateTheme                                               = 0x2bf40ccc
	crc_account_saveTheme                                                 = 0xf257106c
	crc_account_installTheme                                              = 0xc727bb3b
	crc_account_getTheme                                                  = 0x3a5869ec
	crc_account_getThemes                                                 = 0x7206e458
	crc_auth_exportLoginToken                                             = 0xb7e085fe
	crc_auth_importLoginToken                                             = 0x95ac5ce4
	crc_auth_acceptLoginToken                                             = 0xe894ad4d
	crc_account_setContentSettings                                        = 0xb574b16b
	crc_account_getContentSettings                                        = 0x8b9b4dae
	crc_channels_getInactiveChannels                                      = 0x11e831ee
	crc_account_getMultiWallPapers                                        = 0x65ad71dc
	crc_messages_getPollVotes                                             = 0xb86e380e
	crc_messages_toggleStickerSets                                        = 0xb5052fea
	crc_payments_getBankCardData                                          = 0x2e79d779
	crc_messages_getDialogFilters                                         = 0xf19ed96d
	crc_messages_getSuggestedDialogFilters                                = 0xa29cd42c
	crc_messages_updateDialogFilter                                       = 0x1ad4a04a
	crc_messages_updateDialogFiltersOrder                                 = 0xc563c1e4
	crc_stats_getBroadcastStats                                           = 0xab42441a
	crc_stats_loadAsyncGraph                                              = 0x621d5fa0
	crc_stickers_setStickerSetThumb                                       = 0xa76a5392
	crc_bots_setBotCommands                                               = 0x0517165a
	crc_messages_getOldFeaturedStickers                                   = 0x7ed094a1
	crc_help_getPromoData                                                 = 0xc0977421
	crc_help_hidePromoData                                                = 0x1e251c95
	crc_phone_sendSignalingData                                           = 0xff7a9383
	crc_stats_getMegagroupStats                                           = 0xdcdf8607
	crc_account_getGlobalPrivacySettings                                  = 0xeb2b4cf6
	crc_account_setGlobalPrivacySettings                                  = 0x1edaaac2
	crc_help_dismissSuggestion                                            = 0xf50dbaa1
	crc_help_getCountriesList                                             = 0x735787a8
	crc_messages_getReplies                                               = 0x22ddd30c
	crc_messages_getDiscussionMessage                                     = 0x446972fd
	crc_messages_readDiscussion                                           = 0xf731a9f4
	crc_contacts_blockFromReplies                                         = 0x29a8962c
	crc_stats_getMessagePublicForwards                                    = 0x5f150144
	crc_stats_getMessageStats                                             = 0xb6e0a3f5
	crc_messages_unpinAllMessages                                         = 0xee22b9a8
	crc_phone_createGroupCall                                             = 0x48cdc6d8
	crc_phone_joinGroupCall                                               = 0xb132ff7b
	crc_phone_leaveGroupCall                                              = 0x500377f9
	crc_phone_inviteToGroupCall                                           = 0x7b393160
	crc_phone_discardGroupCall                                            = 0x7a777135
	crc_phone_toggleGroupCallSettings                                     = 0x74bbb43d
	crc_phone_getGroupCall                                                = 0x041845db
	crc_phone_getGroupParticipants                                        = 0xc558d8ab
	crc_phone_checkGroupCall                                              = 0xb59cf977
	crc_messages_deleteChat                                               = 0x5bd0ee50
	crc_messages_deletePhoneCallHistory                                   = 0xf9cbe409
	crc_messages_checkHistoryImport                                       = 0x43fe19f3
	crc_messages_initHistoryImport                                        = 0x34090c3b
	crc_messages_uploadImportedMedia                                      = 0x2a862092
	crc_messages_startHistoryImport                                       = 0xb43df344
	crc_messages_getExportedChatInvites                                   = 0xa2b5a3f6
	crc_messages_getExportedChatInvite                                    = 0x73746f5c
	crc_messages_editExportedChatInvite                                   = 0xbdca2f75
	crc_messages_deleteRevokedExportedChatInvites                         = 0x56987bd5
	crc_messages_deleteExportedChatInvite                                 = 0xd464a42b
	crc_messages_getAdminsWithInvites                                     = 0x3920e6ef
	crc_messages_getChatInviteImporters                                   = 0xdf04dd4e
	crc_messages_setHistoryTTL                                            = 0xb80e5fe4
	crc_account_reportProfilePhoto                                        = 0xfa8cc6f5
	crc_channels_convertToGigagroup                                       = 0x0b290c69
	crc_messages_checkHistoryImportPeer                                   = 0x5dc60f03
	crc_phone_toggleGroupCallRecord                                       = 0xf128c708
	crc_phone_editGroupCallParticipant                                    = 0xa5273abf
	crc_phone_editGroupCallTitle                                          = 0x1ca6ac0a
	crc_phone_getGroupCallJoinAs                                          = 0xef7c213a
	crc_phone_exportGroupCallInvite                                       = 0xe6aa647f
	crc_phone_toggleGroupCallStartSubscription                            = 0x219c34e6
	crc_phone_startScheduledGroupCall                                     = 0x5680e342
	crc_phone_saveDefaultGroupCallJoinAs                                  = 0x575e1f8c
	crc_phone_joinGroupCallPresentation                                   = 0xcbea6bc4
	crc_phone_leaveGroupCallPresentation                                  = 0x1c50d144
	crc_stickers_checkShortName                                           = 0x284b3639
	crc_stickers_suggestShortName                                         = 0x4dafc503
	crc_bots_resetBotCommands                                             = 0x3d8de0f9
	crc_bots_getBotCommands                                               = 0xe34c0dd6
	crc_account_resetPassword                                             = 0x9308ce1b
	crc_account_declinePasswordReset                                      = 0x4c9409f6
	crc_auth_checkRecoveryPassword                                        = 0x0d36bf79
	crc_account_getChatThemes                                             = 0xd638de89
	crc_messages_setChatTheme                                             = 0xe63be13f
	crc_channels_viewSponsoredMessage                                     = 0xbeaedb94
	crc_channels_getSponsoredMessages                                     = 0xec210fbf
	crc_messages_getMessageReadParticipants                               = 0x31c1c44f
	crc_messages_getSearchResultsCalendar                                 = 0x6aa3f6bd
	crc_messages_getSearchResultsPositions                                = 0x9c7f2f10
	crc_messages_hideChatJoinRequest                                      = 0x7fe7e815
	crc_messages_hideAllChatJoinRequests                                  = 0xe085f4ea
	crc_messages_toggleNoForwards                                         = 0xb11eafa2
	crc_messages_saveDefaultSendAs                                        = 0xccfddf96
	crc_channels_getSendAs                                                = 0x0dc770ee
	crc_account_setAuthorizationTTL                                       = 0xbf899aa0
	crc_account_changeAuthorizationSettings                               = 0x40f48462
	crc_channels_deleteParticipantHistory                                 = 0x367544db
	crc_messages_sendReaction                                             = 0xd30d78d4
	crc_messages_getMessagesReactions                                     = 0x8bba90e6
	crc_messages_getMessageReactionsList                                  = 0x461b3f48
	crc_messages_setChatAvailableReactions                                = 0xfeb16771
	crc_messages_getAvailableReactions                                    = 0x18dea0ac
	crc_messages_setDefaultReaction                                       = 0x4f47a016
	crc_messages_translateText                                            = 0x63183030
	crc_messages_getUnreadReactions                                       = 0x3223495b
	crc_messages_readReactions                                            = 0x54aa7f8e
	crc_contacts_resolvePhone                                             = 0x8af94344
	crc_phone_getGroupCallStreamChannels                                  = 0x1ab21940
	crc_phone_getGroupCallStreamRtmpUrl                                   = 0xdeb3abbf
	crc_messages_searchSentMedia                                          = 0x107e31a0
	crc_messages_getAttachMenuBots                                        = 0x16fcc2cb
	crc_messages_getAttachMenuBot                                         = 0x77216192
	crc_messages_toggleBotInAttachMenu                                    = 0x69f59d69
	crc_messages_requestWebView                                           = 0x269dc2c1
	crc_messages_prolongWebView                                           = 0xb0d81a83
	crc_messages_requestSimpleWebView                                     = 0x1a46500a
	crc_messages_sendWebViewResultMessage                                 = 0x0a4314f5
	crc_messages_sendWebViewData                                          = 0xdc0242c8
	crc_bots_setBotMenuButton                                             = 0x4504d54f
	crc_bots_getBotMenuButton                                             = 0x9c60eb28
	crc_account_getSavedRingtones                                         = 0xe1902288
	crc_account_saveRingtone                                              = 0x3dea5b03
	crc_account_uploadRingtone                                            = 0x831a83a2
	crc_bots_setBotBroadcastDefaultAdminRights                            = 0x788464e1
	crc_bots_setBotGroupDefaultAdminRights                                = 0x925ec9ea
	crc_phone_saveCallLog                                                 = 0x41248786
	crc_channels_toggleJoinToSend                                         = 0xe4cb9580
	crc_channels_toggleJoinRequest                                        = 0x4c2985b6
	crc_payments_exportInvoice                                            = 0x0f91b065
	crc_messages_transcribeAudio                                          = 0x269e9a49
	crc_messages_rateTranscribedAudio                                     = 0x7f1d072f
	crc_payments_assignAppStoreTransaction                                = 0x80ed747d
	crc_payments_assignPlayMarketTransaction                              = 0xdffd50d3
	crc_payments_canPurchasePremium                                       = 0x9fc19eb6
	crc_help_getPremiumPromo                                              = 0xb81b93d4
	crc_messages_getCustomEmojiDocuments                                  = 0xd9ab0f54
	crc_messages_getEmojiStickers                                         = 0xfbfca18f
	crc_messages_getFeaturedEmojiStickers                                 = 0x0ecf6736
	crc_account_updateEmojiStatus                                         = 0xfbd3de6b
	crc_account_getDefaultEmojiStatuses                                   = 0xd6753386
	crc_account_getRecentEmojiStatuses                                    = 0x0f578105
	crc_account_clearRecentEmojiStatuses                                  = 0x18201aae
	crc_messages_reportReaction                                           = 0x3f64c076
	crc_messages_getTopReactions                                          = 0xbb8125ba
	crc_messages_getRecentReactions                                       = 0x39461db2
	crc_messages_clearRecentReactions                                     = 0x9dfeefb4
	crc_messages_getExtendedMedia                                         = 0x84f80814
	crc_auth_importWebTokenAuthorization                                  = 0x2db873a9
	crc_account_reorderUsernames                                          = 0xef500eab
	crc_account_toggleUsername                                            = 0x58d6b376
	crc_channels_reorderUsernames                                         = 0xb45ced1d
	crc_channels_toggleUsername                                           = 0x50f24105
	crc_channels_deactivateAllUsernames                                   = 0x0a245dd3
	crc_channels_toggleForum                                              = 0xa4298b29
	crc_channels_createForumTopic                                         = 0xf40c0224
	crc_channels_getForumTopics                                           = 0x0de560d1
	crc_channels_getForumTopicsByID                                       = 0xb0831eb9
	crc_channels_editForumTopic                                           = 0xf4dfa185
	crc_channels_updatePinnedForumTopic                                   = 0x6c2d9026
	crc_channels_deleteTopicHistory                                       = 0x34435f2d
	crc_channels_reorderPinnedForumTopics                                 = 0x2950a18f
	crc_channels_toggleAntiSpam                                           = 0x68f3e4eb
	crc_channels_reportAntiSpamFalsePositive                              = 0xa850a693
	crc_messages_setDefaultHistoryTTL                                     = 0x9eb51445
	crc_messages_getDefaultHistoryTTL                                     = 0x658b7188
	crc_contacts_exportContactToken                                       = 0xf8654027
	crc_contacts_importContactToken                                       = 0x13005788
	crc_photos_uploadContactProfilePhoto                                  = 0xe14c4a71
	crc_channels_toggleParticipantsHidden                                 = 0x6a6e7854
	crc_messages_sendBotRequestedPeer                                     = 0x91b2d060
	crc_account_getDefaultProfilePhotoEmojis                              = 0xe2750328
	crc_account_getDefaultGroupPhotoEmojis                                = 0x915860ae
	crc_auth_requestFirebaseSms                                           = 0x89464b50
	crc_messages_getEmojiGroups                                           = 0x7488ce5b
	crc_messages_getEmojiStatusGroups                                     = 0x2ecd56cd
	crc_messages_getEmojiProfilePhotoGroups                               = 0x21a548f3
	crc_messages_searchCustomEmoji                                        = 0x2c11c0d7
	crc_messages_togglePeerTranslations                                   = 0xe47cb579
	crc_account_getAutoSaveSettings                                       = 0xadcbbcda
	crc_account_saveAutoSaveSettings                                      = 0xd69b8361
	crc_account_deleteAutoSaveExceptions                                  = 0x53bc0020
	crc_stickers_changeSticker                                            = 0xf5537ebc
	crc_stickers_renameStickerSet                                         = 0x124b1c00
	crc_stickers_deleteStickerSet                                         = 0x87704394
	crc_messages_getBotApp                                                = 0x34fdc5c3
	crc_messages_requestAppWebView                                        = 0x8c5a3b3c
	crc_bots_setBotInfo                                                   = 0x10cf3123
	crc_bots_getBotInfo                                                   = 0xdcd914fd
	crc_auth_resetLoginEmail                                              = 0x7e960193
	crc_chatlists_exportChatlistInvite                                    = 0x8472478e
	crc_chatlists_deleteExportedInvite                                    = 0x719c5c5e
	crc_chatlists_editExportedInvite                                      = 0x653db63d
	crc_chatlists_getExportedInvites                                      = 0xce03da83
	crc_chatlists_checkChatlistInvite                                     = 0x41c10fff
	crc_chatlists_joinChatlistInvite                                      = 0xa6b1e39a
	crc_chatlists_getChatlistUpdates                                      = 0x89419521
	crc_chatlists_joinChatlistUpdates                                     = 0xe089f8f5
	crc_chatlists_hideChatlistUpdates                                     = 0x66e486fb
	crc_chatlists_getLeaveChatlistSuggestions                             = 0xfdbcd714
	crc_chatlists_leaveChatlist                                           = 0x74fae13a
	crc_bots_reorderUsernames                                             = 0x9709b1c2
	crc_bots_toggleUsername                                               = 0x053ca973
	crc_messages_setChatWallPaper                                         = 0x8ffacae1
	crc_account_invalidateSignInCodes                                     = 0xca8ae8ba
	crc_channels_clickSponsoredMessage                                    = 0x18afbc93
	crc_contacts_editCloseFriends                                         = 0xba6705f0
	crc_stories_canSendStory                                              = 0xc7dfdfdd
	crc_stories_sendStory                                                 = 0xe4e6694b
	crc_stories_editStory                                                 = 0xb583ba46
	crc_stories_deleteStories                                             = 0xae59db5f
	crc_stories_togglePinned                                              = 0x9a75a1ef
	crc_stories_getAllStories                                             = 0xeeb0d625
	crc_stories_getPinnedStories                                          = 0x5821a5dc
	crc_stories_getStoriesArchive                                         = 0xb4352016
	crc_stories_getStoriesByID                                            = 0x5774ca74
	crc_stories_toggleAllStoriesHidden                                    = 0x7c2557c4
	crc_stories_readStories                                               = 0xa556dac8
	crc_stories_incrementStoryViews                                       = 0xb2028afb
	crc_stories_getStoryViewsList                                         = 0x7ed23c57
	crc_stories_getStoriesViews                                           = 0x28e16cc8
	crc_stories_exportStoryLink                                           = 0x7b8def20
	crc_stories_report                                                    = 0x1923fa8c
	crc_stories_activateStealthMode                                       = 0x57bbd166
	crc_contacts_setBlocked                                               = 0x94c65c76
	crc_stories_sendReaction                                              = 0x7fd736b2
	crc_bots_canSendMessage                                               = 0x1359f4e6
	crc_bots_allowSendMessage                                             = 0xf132e3ef
	crc_bots_invokeWebViewCustomMethod                                    = 0x087fc5e7
	crc_stories_getPeerStories                                            = 0x2c4ada50
	crc_stories_getAllReadPeerStories                                     = 0x9b5ae7f9
	crc_stories_getPeerMaxIDs                                             = 0x535983c3
	crc_stories_getChatsToSend                                            = 0xa56a8b60
	crc_stories_togglePeerStoriesHidden                                   = 0xbd0415c4
	crc_payments_getPremiumGiftCodeOptions                                = 0x2757ba54
	crc_payments_checkGiftCode                                            = 0x8e51b4c1
	crc_payments_applyGiftCode                                            = 0xf6e26854
	crc_payments_getGiveawayInfo                                          = 0xf4239425
	crc_payments_launchPrepaidGiveaway                                    = 0x5ff58f20
	crc_account_updateColor                                               = 0x7cefa15d
	crc_channels_updateColor                                              = 0xd8aa3671
	crc_account_getDefaultBackgroundEmojis                                = 0xa60ab9ce
	crc_premium_getBoostsList                                             = 0x60f67660
	crc_premium_getMyBoosts                                               = 0x0be77b4a
	crc_premium_applyBoost                                                = 0x6b7da746
	crc_premium_getBoostsStatus                                           = 0x042f1f61
	crc_premium_getUserBoosts                                             = 0x39854d1f
	crc_channels_toggleViewForumAsMessages                                = 0x9738bb15
	crc_messages_searchEmojiStickerSets                                   = 0x92b4494c
	crc_channels_getChannelRecommendations                                = 0x83b70d97
	crc_stats_getStoryStats                                               = 0x374fef40
	crc_stats_getStoryPublicForwards                                      = 0xa6437ef6
	crc_help_getPeerColors                                                = 0xda80f42f
	crc_help_getPeerProfileColors                                         = 0xabcfa9fd
	crc_stories_getStoryReactionsList                                     = 0xb9b2881f
	crc_channels_updateEmojiStatus                                        = 0xf0d3e6a8
	crc_account_getChannelDefaultEmojiStatuses                            = 0x7727a7d5
	crc_account_getChannelRestrictedStatusEmojis                          = 0x35a9e0d5
	crc_messages_getSavedDialogs                                          = 0x5381d21a
	crc_messages_getSavedHistory                                          = 0x3d9a414d
	crc_messages_deleteSavedHistory                                       = 0x6e98102b
	crc_messages_getPinnedSavedDialogs                                    = 0xd63d94e0
	crc_messages_toggleSavedDialogPin                                     = 0xac81bbde
	crc_messages_reorderPinnedSavedDialogs                                = 0x8b716587
)

type TL_boolFalse struct {
}

type TL_boolTrue struct {
}

type TL_true struct {
}

type TL_error struct {
	code int32
	text string
}

type TL_null struct {
}

type TL_inputPeerEmpty struct {
}

type TL_inputPeerSelf struct {
}

type TL_inputPeerChat struct {
	chat_id int64
}

type TL_inputUserEmpty struct {
}

type TL_inputUserSelf struct {
}

type TL_inputPhoneContact struct {
	client_id  int64
	phone      string
	first_name string
	last_name  string
}

type TL_inputFile struct {
	id           int64
	parts        int32
	name         string
	md5_checksum string
}

type TL_inputMediaEmpty struct {
}

type TL_inputMediaUploadedPhoto struct {
	flags       int32
	spoiler     bool  // (bit flags.2)
	file        TL    // InputFile
	stickers    []TL  // (bit flags.0) | InputDocument
	ttl_seconds int32 // (bit flags.1)
}

type TL_inputMediaPhoto struct {
	flags       int32
	spoiler     bool  // (bit flags.1)
	id          TL    // InputPhoto
	ttl_seconds int32 // (bit flags.0)
}

type TL_inputMediaGeoPoint struct {
	geo_point TL // InputGeoPoint
}

type TL_inputMediaContact struct {
	phone_number string
	first_name   string
	last_name    string
	vcard        string
}

type TL_inputChatPhotoEmpty struct {
}

type TL_inputChatUploadedPhoto struct {
	flags              int32
	file               TL      // (bit flags.0) | InputFile
	video              TL      // (bit flags.1) | InputFile
	video_start_ts     float64 // (bit flags.2)
	video_emoji_markup TL      // (bit flags.3) | VideoSize
}

type TL_inputChatPhoto struct {
	id TL // InputPhoto
}

type TL_inputGeoPointEmpty struct {
}

type TL_inputGeoPoint struct {
	flags           int32
	lat             float64
	long            float64
	accuracy_radius int32 // (bit flags.0)
}

type TL_inputPhotoEmpty struct {
}

type TL_inputPhoto struct {
	id             int64
	access_hash    int64
	file_reference []byte
}

type TL_inputFileLocation struct {
	volume_id      int64
	local_id       int32
	secret         int64
	file_reference []byte
}

type TL_peerUser struct {
	user_id int64
}

type TL_peerChat struct {
	chat_id int64
}

type TL_storage_fileUnknown struct {
}

type TL_storage_filePartial struct {
}

type TL_storage_fileJpeg struct {
}

type TL_storage_fileGif struct {
}

type TL_storage_filePng struct {
}

type TL_storage_filePdf struct {
}

type TL_storage_fileMp3 struct {
}

type TL_storage_fileMov struct {
}

type TL_storage_fileMp4 struct {
}

type TL_storage_fileWebp struct {
}

type TL_userEmpty struct {
	id int64
}

type TL_userProfilePhotoEmpty struct {
}

type TL_userProfilePhoto struct {
	flags          int32
	has_video      bool // (bit flags.0)
	personal       bool // (bit flags.2)
	photo_id       int64
	stripped_thumb []byte // (bit flags.1)
	dc_id          int32
}

type TL_userStatusEmpty struct {
}

type TL_userStatusOnline struct {
	expires int32
}

type TL_userStatusOffline struct {
	was_online int32
}

type TL_chatEmpty struct {
	id int64
}

type TL_chat struct {
	flags                 int32
	creator               bool // (bit flags.0)
	left                  bool // (bit flags.2)
	deactivated           bool // (bit flags.5)
	call_active           bool // (bit flags.23)
	call_not_empty        bool // (bit flags.24)
	noforwards            bool // (bit flags.25)
	id                    int64
	title                 string
	photo                 TL // ChatPhoto
	participants_count    int32
	date                  int32
	version               int32
	migrated_to           TL // (bit flags.6) | InputChannel
	admin_rights          TL // (bit flags.14) | ChatAdminRights
	default_banned_rights TL // (bit flags.18) | ChatBannedRights
}

type TL_chatForbidden struct {
	id    int64
	title string
}

type TL_chatFull struct {
	flags                     int32
	can_set_username          bool // (bit flags.7)
	has_scheduled             bool // (bit flags.8)
	translations_disabled     bool // (bit flags.19)
	id                        int64
	about                     string
	participants              TL      // ChatParticipants
	chat_photo                TL      // (bit flags.2) | Photo
	notify_settings           TL      // PeerNotifySettings
	exported_invite           TL      // (bit flags.13) | ExportedChatInvite
	bot_info                  []TL    // (bit flags.3) | BotInfo
	pinned_msg_id             int32   // (bit flags.6)
	folder_id                 int32   // (bit flags.11)
	call                      TL      // (bit flags.12) | InputGroupCall
	ttl_period                int32   // (bit flags.14)
	groupcall_default_join_as TL      // (bit flags.15) | Peer
	theme_emoticon            string  // (bit flags.16)
	requests_pending          int32   // (bit flags.17)
	recent_requesters         []int64 // (bit flags.17)
	available_reactions       TL      // (bit flags.18) | ChatReactions
}

type TL_chatParticipant struct {
	user_id    int64
	inviter_id int64
	date       int32
}

type TL_chatParticipantsForbidden struct {
	flags            int32
	chat_id          int64
	self_participant TL // (bit flags.0) | ChatParticipant
}

type TL_chatParticipants struct {
	chat_id      int64
	participants []TL // ChatParticipant
	version      int32
}

type TL_chatPhotoEmpty struct {
}

type TL_chatPhoto struct {
	flags          int32
	has_video      bool // (bit flags.0)
	photo_id       int64
	stripped_thumb []byte // (bit flags.1)
	dc_id          int32
}

type TL_messageEmpty struct {
	flags   int32
	id      int32
	peer_id TL // (bit flags.0) | Peer
}

type TL_message struct {
	flags              int32
	out                bool // (bit flags.1)
	mentioned          bool // (bit flags.4)
	media_unread       bool // (bit flags.5)
	silent             bool // (bit flags.13)
	post               bool // (bit flags.14)
	from_scheduled     bool // (bit flags.18)
	legacy             bool // (bit flags.19)
	edit_hide          bool // (bit flags.21)
	pinned             bool // (bit flags.24)
	noforwards         bool // (bit flags.26)
	invert_media       bool // (bit flags.27)
	id                 int32
	from_id            TL    // (bit flags.8) | Peer
	peer_id            TL    // Peer
	saved_peer_id      TL    // (bit flags.28) | Peer
	fwd_from           TL    // (bit flags.2) | MessageFwdHeader
	via_bot_id         int64 // (bit flags.11)
	reply_to           TL    // (bit flags.3) | MessageReplyHeader
	date               int32
	message            string
	media              TL     // (bit flags.9) | MessageMedia
	reply_markup       TL     // (bit flags.6) | ReplyMarkup
	entities           []TL   // (bit flags.7) | MessageEntity
	views              int32  // (bit flags.10)
	forwards           int32  // (bit flags.10)
	replies            TL     // (bit flags.23) | MessageReplies
	edit_date          int32  // (bit flags.15)
	post_author        string // (bit flags.16)
	grouped_id         int64  // (bit flags.17)
	reactions          TL     // (bit flags.20) | MessageReactions
	restriction_reason []TL   // (bit flags.22) | RestrictionReason
	ttl_period         int32  // (bit flags.25)
}

type TL_messageService struct {
	flags        int32
	out          bool // (bit flags.1)
	mentioned    bool // (bit flags.4)
	media_unread bool // (bit flags.5)
	silent       bool // (bit flags.13)
	post         bool // (bit flags.14)
	legacy       bool // (bit flags.19)
	id           int32
	from_id      TL // (bit flags.8) | Peer
	peer_id      TL // Peer
	reply_to     TL // (bit flags.3) | MessageReplyHeader
	date         int32
	action       TL    // MessageAction
	ttl_period   int32 // (bit flags.25)
}

type TL_messageMediaEmpty struct {
}

type TL_messageMediaPhoto struct {
	flags       int32
	spoiler     bool  // (bit flags.3)
	photo       TL    // (bit flags.0) | Photo
	ttl_seconds int32 // (bit flags.2)
}

type TL_messageMediaGeo struct {
	geo TL // GeoPoint
}

type TL_messageMediaContact struct {
	phone_number string
	first_name   string
	last_name    string
	vcard        string
	user_id      int64
}

type TL_messageMediaUnsupported struct {
}

type TL_messageActionEmpty struct {
}

type TL_messageActionChatCreate struct {
	title string
	users []int64
}

type TL_messageActionChatEditTitle struct {
	title string
}

type TL_messageActionChatEditPhoto struct {
	photo TL // Photo
}

type TL_messageActionChatDeletePhoto struct {
}

type TL_messageActionChatAddUser struct {
	users []int64
}

type TL_messageActionChatDeleteUser struct {
	user_id int64
}

type TL_dialog struct {
	flags                  int32
	pinned                 bool // (bit flags.2)
	unread_mark            bool // (bit flags.3)
	view_forum_as_messages bool // (bit flags.6)
	peer                   TL   // Peer
	top_message            int32
	read_inbox_max_id      int32
	read_outbox_max_id     int32
	unread_count           int32
	unread_mentions_count  int32
	unread_reactions_count int32
	notify_settings        TL    // PeerNotifySettings
	pts                    int32 // (bit flags.0)
	draft                  TL    // (bit flags.1) | DraftMessage
	folder_id              int32 // (bit flags.4)
	ttl_period             int32 // (bit flags.5)
}

type TL_photoEmpty struct {
	id int64
}

type TL_photo struct {
	flags          int32
	has_stickers   bool // (bit flags.0)
	id             int64
	access_hash    int64
	file_reference []byte
	date           int32
	sizes          []TL // PhotoSize
	video_sizes    []TL // (bit flags.1) | VideoSize
	dc_id          int32
}

type TL_photoSizeEmpty struct {
	_type string
}

type TL_photoSize struct {
	_type string
	w     int32
	h     int32
	size  int32
}

type TL_photoCachedSize struct {
	_type string
	w     int32
	h     int32
	bytes []byte
}

type TL_geoPointEmpty struct {
}

type TL_geoPoint struct {
	flags           int32
	long            float64
	lat             float64
	access_hash     int64
	accuracy_radius int32 // (bit flags.0)
}

type TL_auth_sentCode struct {
	flags           int32
	_type           TL // auth_SentCodeType
	phone_code_hash string
	next_type       TL    // (bit flags.1) | auth_CodeType
	timeout         int32 // (bit flags.2)
}

type TL_auth_authorization struct {
	flags                   int32
	setup_password_required bool   // (bit flags.1)
	otherwise_relogin_days  int32  // (bit flags.1)
	tmp_sessions            int32  // (bit flags.0)
	future_auth_token       []byte // (bit flags.2)
	user                    TL     // User
}

type TL_auth_exportedAuthorization struct {
	id    int64
	bytes []byte
}

type TL_inputNotifyPeer struct {
	peer TL // InputPeer
}

type TL_inputNotifyUsers struct {
}

type TL_inputNotifyChats struct {
}

type TL_inputPeerNotifySettings struct {
	flags               int32
	show_previews       TL    // (bit flags.0) | Bool
	silent              TL    // (bit flags.1) | Bool
	mute_until          int32 // (bit flags.2)
	sound               TL    // (bit flags.3) | NotificationSound
	stories_muted       TL    // (bit flags.6) | Bool
	stories_hide_sender TL    // (bit flags.7) | Bool
	stories_sound       TL    // (bit flags.8) | NotificationSound
}

type TL_peerNotifySettings struct {
	flags                 int32
	show_previews         TL    // (bit flags.0) | Bool
	silent                TL    // (bit flags.1) | Bool
	mute_until            int32 // (bit flags.2)
	ios_sound             TL    // (bit flags.3) | NotificationSound
	android_sound         TL    // (bit flags.4) | NotificationSound
	other_sound           TL    // (bit flags.5) | NotificationSound
	stories_muted         TL    // (bit flags.6) | Bool
	stories_hide_sender   TL    // (bit flags.7) | Bool
	stories_ios_sound     TL    // (bit flags.8) | NotificationSound
	stories_android_sound TL    // (bit flags.9) | NotificationSound
	stories_other_sound   TL    // (bit flags.10) | NotificationSound
}

type TL_peerSettings struct {
	flags                   int32
	report_spam             bool   // (bit flags.0)
	add_contact             bool   // (bit flags.1)
	block_contact           bool   // (bit flags.2)
	share_contact           bool   // (bit flags.3)
	need_contacts_exception bool   // (bit flags.4)
	report_geo              bool   // (bit flags.5)
	autoarchived            bool   // (bit flags.7)
	invite_members          bool   // (bit flags.8)
	request_chat_broadcast  bool   // (bit flags.10)
	geo_distance            int32  // (bit flags.6)
	request_chat_title      string // (bit flags.9)
	request_chat_date       int32  // (bit flags.9)
}

type TL_wallPaper struct {
	id          int64
	flags       int32
	creator     bool // (bit flags.0)
	_default    bool // (bit flags.1)
	pattern     bool // (bit flags.3)
	dark        bool // (bit flags.4)
	access_hash int64
	slug        string
	document    TL // Document
	settings    TL // (bit flags.2) | WallPaperSettings
}

type TL_inputReportReasonSpam struct {
}

type TL_inputReportReasonViolence struct {
}

type TL_inputReportReasonPornography struct {
}

type TL_inputReportReasonChildAbuse struct {
}

type TL_inputReportReasonOther struct {
}

type TL_userFull struct {
	flags                      int32
	blocked                    bool // (bit flags.0)
	phone_calls_available      bool // (bit flags.4)
	phone_calls_private        bool // (bit flags.5)
	can_pin_message            bool // (bit flags.7)
	has_scheduled              bool // (bit flags.12)
	video_calls_available      bool // (bit flags.13)
	voice_messages_forbidden   bool // (bit flags.20)
	translations_disabled      bool // (bit flags.23)
	stories_pinned_available   bool // (bit flags.26)
	blocked_my_stories_from    bool // (bit flags.27)
	wallpaper_overridden       bool // (bit flags.28)
	id                         int64
	about                      string // (bit flags.1)
	settings                   TL     // PeerSettings
	personal_photo             TL     // (bit flags.21) | Photo
	profile_photo              TL     // (bit flags.2) | Photo
	fallback_photo             TL     // (bit flags.22) | Photo
	notify_settings            TL     // PeerNotifySettings
	bot_info                   TL     // (bit flags.3) | BotInfo
	pinned_msg_id              int32  // (bit flags.6)
	common_chats_count         int32
	folder_id                  int32  // (bit flags.11)
	ttl_period                 int32  // (bit flags.14)
	theme_emoticon             string // (bit flags.15)
	private_forward_name       string // (bit flags.16)
	bot_group_admin_rights     TL     // (bit flags.17) | ChatAdminRights
	bot_broadcast_admin_rights TL     // (bit flags.18) | ChatAdminRights
	premium_gifts              []TL   // (bit flags.19) | PremiumGiftOption
	wallpaper                  TL     // (bit flags.24) | WallPaper
	stories                    TL     // (bit flags.25) | PeerStories
}

type TL_contact struct {
	user_id int64
	mutual  TL // Bool
}

type TL_importedContact struct {
	user_id   int64
	client_id int64
}

type TL_contactStatus struct {
	user_id int64
	status  TL // UserStatus
}

type TL_contacts_contactsNotModified struct {
}

type TL_contacts_contacts struct {
	contacts    []TL // Contact
	saved_count int32
	users       []TL // User
}

type TL_contacts_importedContacts struct {
	imported        []TL // ImportedContact
	popular_invites []TL // PopularContact
	retry_contacts  []int64
	users           []TL // User
}

type TL_contacts_blocked struct {
	blocked []TL // PeerBlocked
	chats   []TL // Chat
	users   []TL // User
}

type TL_contacts_blockedSlice struct {
	count   int32
	blocked []TL // PeerBlocked
	chats   []TL // Chat
	users   []TL // User
}

type TL_messages_dialogs struct {
	dialogs  []TL // Dialog
	messages []TL // Message
	chats    []TL // Chat
	users    []TL // User
}

type TL_messages_dialogsSlice struct {
	count    int32
	dialogs  []TL // Dialog
	messages []TL // Message
	chats    []TL // Chat
	users    []TL // User
}

type TL_messages_messages struct {
	messages []TL // Message
	chats    []TL // Chat
	users    []TL // User
}

type TL_messages_messagesSlice struct {
	flags            int32
	inexact          bool // (bit flags.1)
	count            int32
	next_rate        int32 // (bit flags.0)
	offset_id_offset int32 // (bit flags.2)
	messages         []TL  // Message
	chats            []TL  // Chat
	users            []TL  // User
}

type TL_messages_chats struct {
	chats []TL // Chat
}

type TL_messages_chatFull struct {
	full_chat TL   // ChatFull
	chats     []TL // Chat
	users     []TL // User
}

type TL_messages_affectedHistory struct {
	pts       int32
	pts_count int32
	offset    int32
}

type TL_inputMessagesFilterEmpty struct {
}

type TL_inputMessagesFilterPhotos struct {
}

type TL_inputMessagesFilterVideo struct {
}

type TL_inputMessagesFilterPhotoVideo struct {
}

type TL_inputMessagesFilterDocument struct {
}

type TL_inputMessagesFilterUrl struct {
}

type TL_inputMessagesFilterGif struct {
}

type TL_updateNewMessage struct {
	message   TL // Message
	pts       int32
	pts_count int32
}

type TL_updateMessageID struct {
	id        int32
	random_id int64
}

type TL_updateDeleteMessages struct {
	messages  []int32
	pts       int32
	pts_count int32
}

type TL_updateUserTyping struct {
	user_id int64
	action  TL // SendMessageAction
}

type TL_updateChatUserTyping struct {
	chat_id int64
	from_id TL // Peer
	action  TL // SendMessageAction
}

type TL_updateChatParticipants struct {
	participants TL // ChatParticipants
}

type TL_updateUserStatus struct {
	user_id int64
	status  TL // UserStatus
}

type TL_updateUserName struct {
	user_id    int64
	first_name string
	last_name  string
	usernames  []TL // Username
}

type TL_updateNewAuthorization struct {
	flags       int32
	unconfirmed bool // (bit flags.0)
	hash        int64
	date        int32  // (bit flags.0)
	device      string // (bit flags.0)
	location    string // (bit flags.0)
}

type TL_updates_state struct {
	pts          int32
	qts          int32
	date         int32
	seq          int32
	unread_count int32
}

type TL_updates_differenceEmpty struct {
	date int32
	seq  int32
}

type TL_updates_difference struct {
	new_messages           []TL // Message
	new_encrypted_messages []TL // EncryptedMessage
	other_updates          []TL // Update
	chats                  []TL // Chat
	users                  []TL // User
	state                  TL   // updates_State
}

type TL_updates_differenceSlice struct {
	new_messages           []TL // Message
	new_encrypted_messages []TL // EncryptedMessage
	other_updates          []TL // Update
	chats                  []TL // Chat
	users                  []TL // User
	intermediate_state     TL   // updates_State
}

type TL_updatesTooLong struct {
}

type TL_updateShortMessage struct {
	flags        int32
	out          bool // (bit flags.1)
	mentioned    bool // (bit flags.4)
	media_unread bool // (bit flags.5)
	silent       bool // (bit flags.13)
	id           int32
	user_id      int64
	message      string
	pts          int32
	pts_count    int32
	date         int32
	fwd_from     TL    // (bit flags.2) | MessageFwdHeader
	via_bot_id   int64 // (bit flags.11)
	reply_to     TL    // (bit flags.3) | MessageReplyHeader
	entities     []TL  // (bit flags.7) | MessageEntity
	ttl_period   int32 // (bit flags.25)
}

type TL_updateShortChatMessage struct {
	flags        int32
	out          bool // (bit flags.1)
	mentioned    bool // (bit flags.4)
	media_unread bool // (bit flags.5)
	silent       bool // (bit flags.13)
	id           int32
	from_id      int64
	chat_id      int64
	message      string
	pts          int32
	pts_count    int32
	date         int32
	fwd_from     TL    // (bit flags.2) | MessageFwdHeader
	via_bot_id   int64 // (bit flags.11)
	reply_to     TL    // (bit flags.3) | MessageReplyHeader
	entities     []TL  // (bit flags.7) | MessageEntity
	ttl_period   int32 // (bit flags.25)
}

type TL_updateShort struct {
	update TL // Update
	date   int32
}

type TL_updatesCombined struct {
	updates   []TL // Update
	users     []TL // User
	chats     []TL // Chat
	date      int32
	seq_start int32
	seq       int32
}

type TL_updates struct {
	updates []TL // Update
	users   []TL // User
	chats   []TL // Chat
	date    int32
	seq     int32
}

type TL_photos_photos struct {
	photos []TL // Photo
	users  []TL // User
}

type TL_photos_photosSlice struct {
	count  int32
	photos []TL // Photo
	users  []TL // User
}

type TL_photos_photo struct {
	photo TL   // Photo
	users []TL // User
}

type TL_upload_file struct {
	_type TL // storage_FileType
	mtime int32
	bytes []byte
}

type TL_dcOption struct {
	flags          int32
	ipv6           bool // (bit flags.0)
	media_only     bool // (bit flags.1)
	tcpo_only      bool // (bit flags.2)
	cdn            bool // (bit flags.3)
	static         bool // (bit flags.4)
	this_port_only bool // (bit flags.5)
	id             int32
	ip_address     string
	port           int32
	secret         []byte // (bit flags.10)
}

type TL_config struct {
	flags                      int32
	default_p2p_contacts       bool // (bit flags.3)
	preload_featured_stickers  bool // (bit flags.4)
	revoke_pm_inbox            bool // (bit flags.6)
	blocked_mode               bool // (bit flags.8)
	force_try_ipv6             bool // (bit flags.14)
	date                       int32
	expires                    int32
	test_mode                  TL // Bool
	this_dc                    int32
	dc_options                 []TL // DcOption
	dc_txt_domain_name         string
	chat_size_max              int32
	megagroup_size_max         int32
	forwarded_count_max        int32
	online_update_period_ms    int32
	offline_blur_timeout_ms    int32
	offline_idle_timeout_ms    int32
	online_cloud_timeout_ms    int32
	notify_cloud_delay_ms      int32
	notify_default_delay_ms    int32
	push_chat_period_ms        int32
	push_chat_limit            int32
	edit_time_limit            int32
	revoke_time_limit          int32
	revoke_pm_time_limit       int32
	rating_e_decay             int32
	stickers_recent_limit      int32
	channels_read_media_period int32
	tmp_sessions               int32 // (bit flags.0)
	call_receive_timeout_ms    int32
	call_ring_timeout_ms       int32
	call_connect_timeout_ms    int32
	call_packet_timeout_ms     int32
	me_url_prefix              string
	autoupdate_url_prefix      string // (bit flags.7)
	gif_search_username        string // (bit flags.9)
	venue_search_username      string // (bit flags.10)
	img_search_username        string // (bit flags.11)
	static_maps_provider       string // (bit flags.12)
	caption_length_max         int32
	message_length_max         int32
	webfile_dc_id              int32
	suggested_lang_code        string // (bit flags.2)
	lang_pack_version          int32  // (bit flags.2)
	base_lang_pack_version     int32  // (bit flags.2)
	reactions_default          TL     // (bit flags.15) | Reaction
	autologin_token            string // (bit flags.16)
}

type TL_nearestDc struct {
	country    string
	this_dc    int32
	nearest_dc int32
}

type TL_help_appUpdate struct {
	flags        int32
	can_not_skip bool // (bit flags.0)
	id           int32
	version      string
	text         string
	entities     []TL   // MessageEntity
	document     TL     // (bit flags.1) | Document
	url          string // (bit flags.2)
	sticker      TL     // (bit flags.3) | Document
}

type TL_help_noAppUpdate struct {
}

type TL_help_inviteText struct {
	message string
}

type TL_updateNewEncryptedMessage struct {
	message TL // EncryptedMessage
	qts     int32
}

type TL_updateEncryptedChatTyping struct {
	chat_id int32
}

type TL_updateEncryption struct {
	chat TL // EncryptedChat
	date int32
}

type TL_updateEncryptedMessagesRead struct {
	chat_id  int32
	max_date int32
	date     int32
}

type TL_encryptedChatEmpty struct {
	id int32
}

type TL_encryptedChatWaiting struct {
	id             int32
	access_hash    int64
	date           int32
	admin_id       int64
	participant_id int64
}

type TL_encryptedChatRequested struct {
	flags          int32
	folder_id      int32 // (bit flags.0)
	id             int32
	access_hash    int64
	date           int32
	admin_id       int64
	participant_id int64
	g_a            []byte
}

type TL_encryptedChat struct {
	id              int32
	access_hash     int64
	date            int32
	admin_id        int64
	participant_id  int64
	g_a_or_b        []byte
	key_fingerprint int64
}

type TL_encryptedChatDiscarded struct {
	flags           int32
	history_deleted bool // (bit flags.0)
	id              int32
}

type TL_inputEncryptedChat struct {
	chat_id     int32
	access_hash int64
}

type TL_encryptedFileEmpty struct {
}

type TL_encryptedFile struct {
	id              int64
	access_hash     int64
	size            int64
	dc_id           int32
	key_fingerprint int32
}

type TL_inputEncryptedFileEmpty struct {
}

type TL_inputEncryptedFileUploaded struct {
	id              int64
	parts           int32
	md5_checksum    string
	key_fingerprint int32
}

type TL_inputEncryptedFile struct {
	id          int64
	access_hash int64
}

type TL_inputEncryptedFileLocation struct {
	id          int64
	access_hash int64
}

type TL_encryptedMessage struct {
	random_id int64
	chat_id   int32
	date      int32
	bytes     []byte
	file      TL // EncryptedFile
}

type TL_encryptedMessageService struct {
	random_id int64
	chat_id   int32
	date      int32
	bytes     []byte
}

type TL_messages_dhConfigNotModified struct {
	random []byte
}

type TL_messages_dhConfig struct {
	g       int32
	p       []byte
	version int32
	random  []byte
}

type TL_messages_sentEncryptedMessage struct {
	date int32
}

type TL_messages_sentEncryptedFile struct {
	date int32
	file TL // EncryptedFile
}

type TL_inputFileBig struct {
	id    int64
	parts int32
	name  string
}

type TL_inputEncryptedFileBigUploaded struct {
	id              int64
	parts           int32
	key_fingerprint int32
}

type TL_updateChatParticipantAdd struct {
	chat_id    int64
	user_id    int64
	inviter_id int64
	date       int32
	version    int32
}

type TL_updateChatParticipantDelete struct {
	chat_id int64
	user_id int64
	version int32
}

type TL_updateDcOptions struct {
	dc_options []TL // DcOption
}

type TL_inputMediaUploadedDocument struct {
	flags         int32
	nosound_video bool // (bit flags.3)
	force_file    bool // (bit flags.4)
	spoiler       bool // (bit flags.5)
	file          TL   // InputFile
	thumb         TL   // (bit flags.2) | InputFile
	mime_type     string
	attributes    []TL  // DocumentAttribute
	stickers      []TL  // (bit flags.0) | InputDocument
	ttl_seconds   int32 // (bit flags.1)
}

type TL_inputMediaDocument struct {
	flags       int32
	spoiler     bool   // (bit flags.2)
	id          TL     // InputDocument
	ttl_seconds int32  // (bit flags.0)
	query       string // (bit flags.1)
}

type TL_messageMediaDocument struct {
	flags        int32
	nopremium    bool  // (bit flags.3)
	spoiler      bool  // (bit flags.4)
	video        bool  // (bit flags.6)
	round        bool  // (bit flags.7)
	voice        bool  // (bit flags.8)
	document     TL    // (bit flags.0) | Document
	alt_document TL    // (bit flags.5) | Document
	ttl_seconds  int32 // (bit flags.2)
}

type TL_inputDocumentEmpty struct {
}

type TL_inputDocument struct {
	id             int64
	access_hash    int64
	file_reference []byte
}

type TL_inputDocumentFileLocation struct {
	id             int64
	access_hash    int64
	file_reference []byte
	thumb_size     string
}

type TL_documentEmpty struct {
	id int64
}

type TL_document struct {
	flags          int32
	id             int64
	access_hash    int64
	file_reference []byte
	date           int32
	mime_type      string
	size           int64
	thumbs         []TL // (bit flags.0) | PhotoSize
	video_thumbs   []TL // (bit flags.1) | VideoSize
	dc_id          int32
	attributes     []TL // DocumentAttribute
}

type TL_help_support struct {
	phone_number string
	user         TL // User
}

type TL_notifyPeer struct {
	peer TL // Peer
}

type TL_notifyUsers struct {
}

type TL_notifyChats struct {
}

type TL_updateNotifySettings struct {
	peer            TL // NotifyPeer
	notify_settings TL // PeerNotifySettings
}

type TL_sendMessageTypingAction struct {
}

type TL_sendMessageCancelAction struct {
}

type TL_sendMessageRecordVideoAction struct {
}

type TL_sendMessageUploadVideoAction struct {
	progress int32
}

type TL_sendMessageRecordAudioAction struct {
}

type TL_sendMessageUploadAudioAction struct {
	progress int32
}

type TL_sendMessageUploadPhotoAction struct {
	progress int32
}

type TL_sendMessageUploadDocumentAction struct {
	progress int32
}

type TL_sendMessageGeoLocationAction struct {
}

type TL_sendMessageChooseContactAction struct {
}

type TL_contacts_found struct {
	my_results []TL // Peer
	results    []TL // Peer
	chats      []TL // Chat
	users      []TL // User
}

type TL_updateServiceNotification struct {
	flags        int32
	popup        bool  // (bit flags.0)
	invert_media bool  // (bit flags.2)
	inbox_date   int32 // (bit flags.1)
	_type        string
	message      string
	media        TL   // MessageMedia
	entities     []TL // MessageEntity
}

type TL_userStatusRecently struct {
}

type TL_userStatusLastWeek struct {
}

type TL_userStatusLastMonth struct {
}

type TL_updatePrivacy struct {
	key   TL   // PrivacyKey
	rules []TL // PrivacyRule
}

type TL_inputPrivacyKeyStatusTimestamp struct {
}

type TL_privacyKeyStatusTimestamp struct {
}

type TL_inputPrivacyValueAllowContacts struct {
}

type TL_inputPrivacyValueAllowAll struct {
}

type TL_inputPrivacyValueAllowUsers struct {
	users []TL // InputUser
}

type TL_inputPrivacyValueDisallowContacts struct {
}

type TL_inputPrivacyValueDisallowAll struct {
}

type TL_inputPrivacyValueDisallowUsers struct {
	users []TL // InputUser
}

type TL_privacyValueAllowContacts struct {
}

type TL_privacyValueAllowAll struct {
}

type TL_privacyValueAllowUsers struct {
	users []int64
}

type TL_privacyValueDisallowContacts struct {
}

type TL_privacyValueDisallowAll struct {
}

type TL_privacyValueDisallowUsers struct {
	users []int64
}

type TL_account_privacyRules struct {
	rules []TL // PrivacyRule
	chats []TL // Chat
	users []TL // User
}

type TL_accountDaysTTL struct {
	days int32
}

type TL_updateUserPhone struct {
	user_id int64
	phone   string
}

type TL_documentAttributeImageSize struct {
	w int32
	h int32
}

type TL_documentAttributeAnimated struct {
}

type TL_documentAttributeSticker struct {
	flags       int32
	mask        bool // (bit flags.1)
	alt         string
	stickerset  TL // InputStickerSet
	mask_coords TL // (bit flags.0) | MaskCoords
}

type TL_documentAttributeVideo struct {
	flags               int32
	round_message       bool // (bit flags.0)
	supports_streaming  bool // (bit flags.1)
	nosound             bool // (bit flags.3)
	duration            float64
	w                   int32
	h                   int32
	preload_prefix_size int32 // (bit flags.2)
}

type TL_documentAttributeAudio struct {
	flags     int32
	voice     bool // (bit flags.10)
	duration  int32
	title     string // (bit flags.0)
	performer string // (bit flags.1)
	waveform  []byte // (bit flags.2)
}

type TL_documentAttributeFilename struct {
	file_name string
}

type TL_messages_stickersNotModified struct {
}

type TL_messages_stickers struct {
	hash     int64
	stickers []TL // Document
}

type TL_stickerPack struct {
	emoticon  string
	documents []int64
}

type TL_messages_allStickersNotModified struct {
}

type TL_messages_allStickers struct {
	hash int64
	sets []TL // StickerSet
}

type TL_updateReadHistoryInbox struct {
	flags              int32
	folder_id          int32 // (bit flags.0)
	peer               TL    // Peer
	max_id             int32
	still_unread_count int32
	pts                int32
	pts_count          int32
}

type TL_updateReadHistoryOutbox struct {
	peer      TL // Peer
	max_id    int32
	pts       int32
	pts_count int32
}

type TL_messages_affectedMessages struct {
	pts       int32
	pts_count int32
}

type TL_updateWebPage struct {
	webpage   TL // WebPage
	pts       int32
	pts_count int32
}

type TL_webPageEmpty struct {
	flags int32
	id    int64
	url   string // (bit flags.0)
}

type TL_webPagePending struct {
	flags int32
	id    int64
	url   string // (bit flags.0)
	date  int32
}

type TL_webPage struct {
	flags           int32
	has_large_media bool // (bit flags.13)
	id              int64
	url             string
	display_url     string
	hash            int32
	_type           string // (bit flags.0)
	site_name       string // (bit flags.1)
	title           string // (bit flags.2)
	description     string // (bit flags.3)
	photo           TL     // (bit flags.4) | Photo
	embed_url       string // (bit flags.5)
	embed_type      string // (bit flags.5)
	embed_width     int32  // (bit flags.6)
	embed_height    int32  // (bit flags.6)
	duration        int32  // (bit flags.7)
	author          string // (bit flags.8)
	document        TL     // (bit flags.9) | Document
	cached_page     TL     // (bit flags.10) | Page
	attributes      []TL   // (bit flags.12) | WebPageAttribute
}

type TL_messageMediaWebPage struct {
	flags             int32
	force_large_media bool // (bit flags.0)
	force_small_media bool // (bit flags.1)
	manual            bool // (bit flags.3)
	safe              bool // (bit flags.4)
	webpage           TL   // WebPage
}

type TL_authorization struct {
	flags                       int32
	current                     bool // (bit flags.0)
	official_app                bool // (bit flags.1)
	password_pending            bool // (bit flags.2)
	encrypted_requests_disabled bool // (bit flags.3)
	call_requests_disabled      bool // (bit flags.4)
	unconfirmed                 bool // (bit flags.5)
	hash                        int64
	device_model                string
	platform                    string
	system_version              string
	api_id                      int32
	app_name                    string
	app_version                 string
	date_created                int32
	date_active                 int32
	ip                          string
	country                     string
	region                      string
}

type TL_account_authorizations struct {
	authorization_ttl_days int32
	authorizations         []TL // Authorization
}

type TL_account_password struct {
	flags                     int32
	has_recovery              bool   // (bit flags.0)
	has_secure_values         bool   // (bit flags.1)
	has_password              bool   // (bit flags.2)
	current_algo              TL     // (bit flags.2) | PasswordKdfAlgo
	srp_B                     []byte // (bit flags.2)
	srp_id                    int64  // (bit flags.2)
	hint                      string // (bit flags.3)
	email_unconfirmed_pattern string // (bit flags.4)
	new_algo                  TL     // PasswordKdfAlgo
	new_secure_algo           TL     // SecurePasswordKdfAlgo
	secure_random             []byte
	pending_reset_date        int32  // (bit flags.5)
	login_email_pattern       string // (bit flags.6)
}

type TL_account_passwordSettings struct {
	flags           int32
	email           string // (bit flags.0)
	secure_settings TL     // (bit flags.1) | SecureSecretSettings
}

type TL_account_passwordInputSettings struct {
	flags               int32
	new_algo            TL     // (bit flags.0) | PasswordKdfAlgo
	new_password_hash   []byte // (bit flags.0)
	hint                string // (bit flags.0)
	email               string // (bit flags.1)
	new_secure_settings TL     // (bit flags.2) | SecureSecretSettings
}

type TL_auth_passwordRecovery struct {
	email_pattern string
}

type TL_inputMediaVenue struct {
	geo_point  TL // InputGeoPoint
	title      string
	address    string
	provider   string
	venue_id   string
	venue_type string
}

type TL_messageMediaVenue struct {
	geo        TL // GeoPoint
	title      string
	address    string
	provider   string
	venue_id   string
	venue_type string
}

type TL_receivedNotifyMessage struct {
	id    int32
	flags int32
}

type TL_chatInviteExported struct {
	flags          int32
	revoked        bool // (bit flags.0)
	permanent      bool // (bit flags.5)
	request_needed bool // (bit flags.6)
	link           string
	admin_id       int64
	date           int32
	start_date     int32  // (bit flags.4)
	expire_date    int32  // (bit flags.1)
	usage_limit    int32  // (bit flags.2)
	usage          int32  // (bit flags.3)
	requested      int32  // (bit flags.7)
	title          string // (bit flags.8)
}

type TL_chatInviteAlready struct {
	chat TL // Chat
}

type TL_chatInvite struct {
	flags              int32
	channel            bool // (bit flags.0)
	broadcast          bool // (bit flags.1)
	public             bool // (bit flags.2)
	megagroup          bool // (bit flags.3)
	request_needed     bool // (bit flags.6)
	verified           bool // (bit flags.7)
	scam               bool // (bit flags.8)
	fake               bool // (bit flags.9)
	title              string
	about              string // (bit flags.5)
	photo              TL     // Photo
	participants_count int32
	participants       []TL // (bit flags.4) | User
	color              int32
}

type TL_messageActionChatJoinedByLink struct {
	inviter_id int64
}

type TL_updateReadMessagesContents struct {
	flags     int32
	messages  []int32
	pts       int32
	pts_count int32
	date      int32 // (bit flags.0)
}

type TL_inputStickerSetEmpty struct {
}

type TL_inputStickerSetID struct {
	id          int64
	access_hash int64
}

type TL_inputStickerSetShortName struct {
	short_name string
}

type TL_stickerSet struct {
	flags                int32
	archived             bool  // (bit flags.1)
	official             bool  // (bit flags.2)
	masks                bool  // (bit flags.3)
	animated             bool  // (bit flags.5)
	videos               bool  // (bit flags.6)
	emojis               bool  // (bit flags.7)
	text_color           bool  // (bit flags.9)
	channel_emoji_status bool  // (bit flags.10)
	installed_date       int32 // (bit flags.0)
	id                   int64
	access_hash          int64
	title                string
	short_name           string
	thumbs               []TL  // (bit flags.4) | PhotoSize
	thumb_dc_id          int32 // (bit flags.4)
	thumb_version        int32 // (bit flags.4)
	thumb_document_id    int64 // (bit flags.8)
	count                int32
	hash                 int32
}

type TL_messages_stickerSet struct {
	set       TL   // StickerSet
	packs     []TL // StickerPack
	keywords  []TL // StickerKeyword
	documents []TL // Document
}

type TL_user struct {
	flags                  int32
	self                   bool // (bit flags.10)
	contact                bool // (bit flags.11)
	mutual_contact         bool // (bit flags.12)
	deleted                bool // (bit flags.13)
	bot                    bool // (bit flags.14)
	bot_chat_history       bool // (bit flags.15)
	bot_nochats            bool // (bit flags.16)
	verified               bool // (bit flags.17)
	restricted             bool // (bit flags.18)
	min                    bool // (bit flags.20)
	bot_inline_geo         bool // (bit flags.21)
	support                bool // (bit flags.23)
	scam                   bool // (bit flags.24)
	apply_min_photo        bool // (bit flags.25)
	fake                   bool // (bit flags.26)
	bot_attach_menu        bool // (bit flags.27)
	premium                bool // (bit flags.28)
	attach_menu_enabled    bool // (bit flags.29)
	flags2                 int32
	bot_can_edit           bool // (bit flags2.1)
	close_friend           bool // (bit flags2.2)
	stories_hidden         bool // (bit flags2.3)
	stories_unavailable    bool // (bit flags2.4)
	id                     int64
	access_hash            int64  // (bit flags.0)
	first_name             string // (bit flags.1)
	last_name              string // (bit flags.2)
	username               string // (bit flags.3)
	phone                  string // (bit flags.4)
	photo                  TL     // (bit flags.5) | UserProfilePhoto
	status                 TL     // (bit flags.6) | UserStatus
	bot_info_version       int32  // (bit flags.14)
	restriction_reason     []TL   // (bit flags.18) | RestrictionReason
	bot_inline_placeholder string // (bit flags.19)
	lang_code              string // (bit flags.22)
	emoji_status           TL     // (bit flags.30) | EmojiStatus
	usernames              []TL   // (bit flags2.0) | Username
	stories_max_id         int32  // (bit flags2.5)
	color                  TL     // (bit flags2.8) | PeerColor
	profile_color          TL     // (bit flags2.9) | PeerColor
}

type TL_botCommand struct {
	command     string
	description string
}

type TL_botInfo struct {
	flags                int32
	user_id              int64  // (bit flags.0)
	description          string // (bit flags.1)
	description_photo    TL     // (bit flags.4) | Photo
	description_document TL     // (bit flags.5) | Document
	commands             []TL   // (bit flags.2) | BotCommand
	menu_button          TL     // (bit flags.3) | BotMenuButton
}

type TL_keyboardButton struct {
	text string
}

type TL_keyboardButtonRow struct {
	buttons []TL // KeyboardButton
}

type TL_replyKeyboardHide struct {
	flags     int32
	selective bool // (bit flags.2)
}

type TL_replyKeyboardForceReply struct {
	flags       int32
	single_use  bool   // (bit flags.1)
	selective   bool   // (bit flags.2)
	placeholder string // (bit flags.3)
}

type TL_replyKeyboardMarkup struct {
	flags       int32
	resize      bool   // (bit flags.0)
	single_use  bool   // (bit flags.1)
	selective   bool   // (bit flags.2)
	persistent  bool   // (bit flags.4)
	rows        []TL   // KeyboardButtonRow
	placeholder string // (bit flags.3)
}

type TL_inputPeerUser struct {
	user_id     int64
	access_hash int64
}

type TL_inputUser struct {
	user_id     int64
	access_hash int64
}

type TL_messageEntityUnknown struct {
	offset int32
	length int32
}

type TL_messageEntityMention struct {
	offset int32
	length int32
}

type TL_messageEntityHashtag struct {
	offset int32
	length int32
}

type TL_messageEntityBotCommand struct {
	offset int32
	length int32
}

type TL_messageEntityUrl struct {
	offset int32
	length int32
}

type TL_messageEntityEmail struct {
	offset int32
	length int32
}

type TL_messageEntityBold struct {
	offset int32
	length int32
}

type TL_messageEntityItalic struct {
	offset int32
	length int32
}

type TL_messageEntityCode struct {
	offset int32
	length int32
}

type TL_messageEntityPre struct {
	offset   int32
	length   int32
	language string
}

type TL_messageEntityTextUrl struct {
	offset int32
	length int32
	url    string
}

type TL_updateShortSentMessage struct {
	flags      int32
	out        bool // (bit flags.1)
	id         int32
	pts        int32
	pts_count  int32
	date       int32
	media      TL    // (bit flags.9) | MessageMedia
	entities   []TL  // (bit flags.7) | MessageEntity
	ttl_period int32 // (bit flags.25)
}

type TL_inputChannelEmpty struct {
}

type TL_inputChannel struct {
	channel_id  int64
	access_hash int64
}

type TL_peerChannel struct {
	channel_id int64
}

type TL_inputPeerChannel struct {
	channel_id  int64
	access_hash int64
}

type TL_channel struct {
	flags                 int32
	creator               bool // (bit flags.0)
	left                  bool // (bit flags.2)
	broadcast             bool // (bit flags.5)
	verified              bool // (bit flags.7)
	megagroup             bool // (bit flags.8)
	restricted            bool // (bit flags.9)
	signatures            bool // (bit flags.11)
	min                   bool // (bit flags.12)
	scam                  bool // (bit flags.19)
	has_link              bool // (bit flags.20)
	has_geo               bool // (bit flags.21)
	slowmode_enabled      bool // (bit flags.22)
	call_active           bool // (bit flags.23)
	call_not_empty        bool // (bit flags.24)
	fake                  bool // (bit flags.25)
	gigagroup             bool // (bit flags.26)
	noforwards            bool // (bit flags.27)
	join_to_send          bool // (bit flags.28)
	join_request          bool // (bit flags.29)
	forum                 bool // (bit flags.30)
	flags2                int32
	stories_hidden        bool // (bit flags2.1)
	stories_hidden_min    bool // (bit flags2.2)
	stories_unavailable   bool // (bit flags2.3)
	id                    int64
	access_hash           int64 // (bit flags.13)
	title                 string
	username              string // (bit flags.6)
	photo                 TL     // ChatPhoto
	date                  int32
	restriction_reason    []TL  // (bit flags.9) | RestrictionReason
	admin_rights          TL    // (bit flags.14) | ChatAdminRights
	banned_rights         TL    // (bit flags.15) | ChatBannedRights
	default_banned_rights TL    // (bit flags.18) | ChatBannedRights
	participants_count    int32 // (bit flags.17)
	usernames             []TL  // (bit flags2.0) | Username
	stories_max_id        int32 // (bit flags2.4)
	color                 TL    // (bit flags2.7) | PeerColor
	profile_color         TL    // (bit flags2.8) | PeerColor
	emoji_status          TL    // (bit flags2.9) | EmojiStatus
	level                 int32 // (bit flags2.10)
}

type TL_channelForbidden struct {
	flags       int32
	broadcast   bool // (bit flags.5)
	megagroup   bool // (bit flags.8)
	id          int64
	access_hash int64
	title       string
	until_date  int32 // (bit flags.16)
}

type TL_contacts_resolvedPeer struct {
	peer  TL   // Peer
	chats []TL // Chat
	users []TL // User
}

type TL_channelFull struct {
	flags                     int32
	can_view_participants     bool // (bit flags.3)
	can_set_username          bool // (bit flags.6)
	can_set_stickers          bool // (bit flags.7)
	hidden_prehistory         bool // (bit flags.10)
	can_set_location          bool // (bit flags.16)
	has_scheduled             bool // (bit flags.19)
	can_view_stats            bool // (bit flags.20)
	blocked                   bool // (bit flags.22)
	flags2                    int32
	can_delete_channel        bool // (bit flags2.0)
	antispam                  bool // (bit flags2.1)
	participants_hidden       bool // (bit flags2.2)
	translations_disabled     bool // (bit flags2.3)
	stories_pinned_available  bool // (bit flags2.5)
	view_forum_as_messages    bool // (bit flags2.6)
	id                        int64
	about                     string
	participants_count        int32 // (bit flags.0)
	admins_count              int32 // (bit flags.1)
	kicked_count              int32 // (bit flags.2)
	banned_count              int32 // (bit flags.2)
	online_count              int32 // (bit flags.13)
	read_inbox_max_id         int32
	read_outbox_max_id        int32
	unread_count              int32
	chat_photo                TL    // Photo
	notify_settings           TL    // PeerNotifySettings
	exported_invite           TL    // (bit flags.23) | ExportedChatInvite
	bot_info                  []TL  // BotInfo
	migrated_from_chat_id     int64 // (bit flags.4)
	migrated_from_max_id      int32 // (bit flags.4)
	pinned_msg_id             int32 // (bit flags.5)
	stickerset                TL    // (bit flags.8) | StickerSet
	available_min_id          int32 // (bit flags.9)
	folder_id                 int32 // (bit flags.11)
	linked_chat_id            int64 // (bit flags.14)
	location                  TL    // (bit flags.15) | ChannelLocation
	slowmode_seconds          int32 // (bit flags.17)
	slowmode_next_send_date   int32 // (bit flags.18)
	stats_dc                  int32 // (bit flags.12)
	pts                       int32
	call                      TL       // (bit flags.21) | InputGroupCall
	ttl_period                int32    // (bit flags.24)
	pending_suggestions       []string // (bit flags.25)
	groupcall_default_join_as TL       // (bit flags.26) | Peer
	theme_emoticon            string   // (bit flags.27)
	requests_pending          int32    // (bit flags.28)
	recent_requesters         []int64  // (bit flags.28)
	default_send_as           TL       // (bit flags.29) | Peer
	available_reactions       TL       // (bit flags.30) | ChatReactions
	stories                   TL       // (bit flags2.4) | PeerStories
	wallpaper                 TL       // (bit flags2.7) | WallPaper
}

type TL_messageRange struct {
	min_id int32
	max_id int32
}

type TL_messages_channelMessages struct {
	flags            int32
	inexact          bool // (bit flags.1)
	pts              int32
	count            int32
	offset_id_offset int32 // (bit flags.2)
	messages         []TL  // Message
	topics           []TL  // ForumTopic
	chats            []TL  // Chat
	users            []TL  // User
}

type TL_messageActionChannelCreate struct {
	title string
}

type TL_updateChannelTooLong struct {
	flags      int32
	channel_id int64
	pts        int32 // (bit flags.0)
}

type TL_updateChannel struct {
	channel_id int64
}

type TL_updateNewChannelMessage struct {
	message   TL // Message
	pts       int32
	pts_count int32
}

type TL_updateReadChannelInbox struct {
	flags              int32
	folder_id          int32 // (bit flags.0)
	channel_id         int64
	max_id             int32
	still_unread_count int32
	pts                int32
}

type TL_updateDeleteChannelMessages struct {
	channel_id int64
	messages   []int32
	pts        int32
	pts_count  int32
}

type TL_updateChannelMessageViews struct {
	channel_id int64
	id         int32
	views      int32
}

type TL_updates_channelDifferenceEmpty struct {
	flags   int32
	final   bool // (bit flags.0)
	pts     int32
	timeout int32 // (bit flags.1)
}

type TL_updates_channelDifferenceTooLong struct {
	flags    int32
	final    bool  // (bit flags.0)
	timeout  int32 // (bit flags.1)
	dialog   TL    // Dialog
	messages []TL  // Message
	chats    []TL  // Chat
	users    []TL  // User
}

type TL_updates_channelDifference struct {
	flags         int32
	final         bool // (bit flags.0)
	pts           int32
	timeout       int32 // (bit flags.1)
	new_messages  []TL  // Message
	other_updates []TL  // Update
	chats         []TL  // Chat
	users         []TL  // User
}

type TL_channelMessagesFilterEmpty struct {
}

type TL_channelMessagesFilter struct {
	flags                int32
	exclude_new_messages bool // (bit flags.1)
	ranges               []TL // MessageRange
}

type TL_channelParticipant struct {
	user_id int64
	date    int32
}

type TL_channelParticipantSelf struct {
	flags       int32
	via_request bool // (bit flags.0)
	user_id     int64
	inviter_id  int64
	date        int32
}

type TL_channelParticipantCreator struct {
	flags        int32
	user_id      int64
	admin_rights TL     // ChatAdminRights
	rank         string // (bit flags.0)
}

type TL_channelParticipantsRecent struct {
}

type TL_channelParticipantsAdmins struct {
}

type TL_channelParticipantsKicked struct {
	q string
}

type TL_channels_channelParticipants struct {
	count        int32
	participants []TL // ChannelParticipant
	chats        []TL // Chat
	users        []TL // User
}

type TL_channels_channelParticipant struct {
	participant TL   // ChannelParticipant
	chats       []TL // Chat
	users       []TL // User
}

type TL_chatParticipantCreator struct {
	user_id int64
}

type TL_chatParticipantAdmin struct {
	user_id    int64
	inviter_id int64
	date       int32
}

type TL_updateChatParticipantAdmin struct {
	chat_id  int64
	user_id  int64
	is_admin TL // Bool
	version  int32
}

type TL_messageActionChatMigrateTo struct {
	channel_id int64
}

type TL_messageActionChannelMigrateFrom struct {
	title   string
	chat_id int64
}

type TL_channelParticipantsBots struct {
}

type TL_help_termsOfService struct {
	flags           int32
	popup           bool // (bit flags.0)
	id              TL   // DataJSON
	text            string
	entities        []TL  // MessageEntity
	min_age_confirm int32 // (bit flags.1)
}

type TL_updateNewStickerSet struct {
	stickerset TL // messages_StickerSet
}

type TL_updateStickerSetsOrder struct {
	flags  int32
	masks  bool // (bit flags.0)
	emojis bool // (bit flags.1)
	order  []int64
}

type TL_updateStickerSets struct {
	flags  int32
	masks  bool // (bit flags.0)
	emojis bool // (bit flags.1)
}

type TL_messages_savedGifsNotModified struct {
}

type TL_messages_savedGifs struct {
	hash int64
	gifs []TL // Document
}

type TL_updateSavedGifs struct {
}

type TL_inputBotInlineMessageMediaAuto struct {
	flags        int32
	invert_media bool // (bit flags.3)
	message      string
	entities     []TL // (bit flags.1) | MessageEntity
	reply_markup TL   // (bit flags.2) | ReplyMarkup
}

type TL_inputBotInlineMessageText struct {
	flags        int32
	no_webpage   bool // (bit flags.0)
	invert_media bool // (bit flags.3)
	message      string
	entities     []TL // (bit flags.1) | MessageEntity
	reply_markup TL   // (bit flags.2) | ReplyMarkup
}

type TL_inputBotInlineResult struct {
	flags        int32
	id           string
	_type        string
	title        string // (bit flags.1)
	description  string // (bit flags.2)
	url          string // (bit flags.3)
	thumb        TL     // (bit flags.4) | InputWebDocument
	content      TL     // (bit flags.5) | InputWebDocument
	send_message TL     // InputBotInlineMessage
}

type TL_botInlineMessageMediaAuto struct {
	flags        int32
	invert_media bool // (bit flags.3)
	message      string
	entities     []TL // (bit flags.1) | MessageEntity
	reply_markup TL   // (bit flags.2) | ReplyMarkup
}

type TL_botInlineMessageText struct {
	flags        int32
	no_webpage   bool // (bit flags.0)
	invert_media bool // (bit flags.3)
	message      string
	entities     []TL // (bit flags.1) | MessageEntity
	reply_markup TL   // (bit flags.2) | ReplyMarkup
}

type TL_botInlineResult struct {
	flags        int32
	id           string
	_type        string
	title        string // (bit flags.1)
	description  string // (bit flags.2)
	url          string // (bit flags.3)
	thumb        TL     // (bit flags.4) | WebDocument
	content      TL     // (bit flags.5) | WebDocument
	send_message TL     // BotInlineMessage
}

type TL_messages_botResults struct {
	flags          int32
	gallery        bool // (bit flags.0)
	query_id       int64
	next_offset    string // (bit flags.1)
	switch_pm      TL     // (bit flags.2) | InlineBotSwitchPM
	switch_webview TL     // (bit flags.3) | InlineBotWebView
	results        []TL   // BotInlineResult
	cache_time     int32
	users          []TL // User
}

type TL_updateBotInlineQuery struct {
	flags     int32
	query_id  int64
	user_id   int64
	query     string
	geo       TL // (bit flags.0) | GeoPoint
	peer_type TL // (bit flags.1) | InlineQueryPeerType
	offset    string
}

type TL_updateBotInlineSend struct {
	flags   int32
	user_id int64
	query   string
	geo     TL // (bit flags.0) | GeoPoint
	id      string
	msg_id  TL // (bit flags.1) | InputBotInlineMessageID
}

type TL_inputMessagesFilterVoice struct {
}

type TL_inputMessagesFilterMusic struct {
}

type TL_inputPrivacyKeyChatInvite struct {
}

type TL_privacyKeyChatInvite struct {
}

type TL_exportedMessageLink struct {
	link string
	html string
}

type TL_messageFwdHeader struct {
	flags             int32
	imported          bool   // (bit flags.7)
	saved_out         bool   // (bit flags.11)
	from_id           TL     // (bit flags.0) | Peer
	from_name         string // (bit flags.5)
	date              int32
	channel_post      int32  // (bit flags.2)
	post_author       string // (bit flags.3)
	saved_from_peer   TL     // (bit flags.4) | Peer
	saved_from_msg_id int32  // (bit flags.4)
	saved_from_id     TL     // (bit flags.8) | Peer
	saved_from_name   string // (bit flags.9)
	saved_date        int32  // (bit flags.10)
	psa_type          string // (bit flags.6)
}

type TL_updateEditChannelMessage struct {
	message   TL // Message
	pts       int32
	pts_count int32
}

type TL_messageActionPinMessage struct {
}

type TL_auth_codeTypeSms struct {
}

type TL_auth_codeTypeCall struct {
}

type TL_auth_codeTypeFlashCall struct {
}

type TL_auth_sentCodeTypeApp struct {
	length int32
}

type TL_auth_sentCodeTypeSms struct {
	length int32
}

type TL_auth_sentCodeTypeCall struct {
	length int32
}

type TL_auth_sentCodeTypeFlashCall struct {
	pattern string
}

type TL_keyboardButtonUrl struct {
	text string
	url  string
}

type TL_keyboardButtonCallback struct {
	flags             int32
	requires_password bool // (bit flags.0)
	text              string
	data              []byte
}

type TL_keyboardButtonRequestPhone struct {
	text string
}

type TL_keyboardButtonRequestGeoLocation struct {
	text string
}

type TL_keyboardButtonSwitchInline struct {
	flags      int32
	same_peer  bool // (bit flags.0)
	text       string
	query      string
	peer_types []TL // (bit flags.1) | InlineQueryPeerType
}

type TL_replyInlineMarkup struct {
	rows []TL // KeyboardButtonRow
}

type TL_messages_botCallbackAnswer struct {
	flags      int32
	alert      bool   // (bit flags.1)
	has_url    bool   // (bit flags.3)
	native_ui  bool   // (bit flags.4)
	message    string // (bit flags.0)
	url        string // (bit flags.2)
	cache_time int32
}

type TL_updateBotCallbackQuery struct {
	flags           int32
	query_id        int64
	user_id         int64
	peer            TL // Peer
	msg_id          int32
	chat_instance   int64
	data            []byte // (bit flags.0)
	game_short_name string // (bit flags.1)
}

type TL_messages_messageEditData struct {
	flags   int32
	caption bool // (bit flags.0)
}

type TL_updateEditMessage struct {
	message   TL // Message
	pts       int32
	pts_count int32
}

type TL_inputBotInlineMessageMediaGeo struct {
	flags                         int32
	geo_point                     TL    // InputGeoPoint
	heading                       int32 // (bit flags.0)
	period                        int32 // (bit flags.1)
	proximity_notification_radius int32 // (bit flags.3)
	reply_markup                  TL    // (bit flags.2) | ReplyMarkup
}

type TL_inputBotInlineMessageMediaVenue struct {
	flags        int32
	geo_point    TL // InputGeoPoint
	title        string
	address      string
	provider     string
	venue_id     string
	venue_type   string
	reply_markup TL // (bit flags.2) | ReplyMarkup
}

type TL_inputBotInlineMessageMediaContact struct {
	flags        int32
	phone_number string
	first_name   string
	last_name    string
	vcard        string
	reply_markup TL // (bit flags.2) | ReplyMarkup
}

type TL_botInlineMessageMediaGeo struct {
	flags                         int32
	geo                           TL    // GeoPoint
	heading                       int32 // (bit flags.0)
	period                        int32 // (bit flags.1)
	proximity_notification_radius int32 // (bit flags.3)
	reply_markup                  TL    // (bit flags.2) | ReplyMarkup
}

type TL_botInlineMessageMediaVenue struct {
	flags        int32
	geo          TL // GeoPoint
	title        string
	address      string
	provider     string
	venue_id     string
	venue_type   string
	reply_markup TL // (bit flags.2) | ReplyMarkup
}

type TL_botInlineMessageMediaContact struct {
	flags        int32
	phone_number string
	first_name   string
	last_name    string
	vcard        string
	reply_markup TL // (bit flags.2) | ReplyMarkup
}

type TL_inputBotInlineResultPhoto struct {
	id           string
	_type        string
	photo        TL // InputPhoto
	send_message TL // InputBotInlineMessage
}

type TL_inputBotInlineResultDocument struct {
	flags        int32
	id           string
	_type        string
	title        string // (bit flags.1)
	description  string // (bit flags.2)
	document     TL     // InputDocument
	send_message TL     // InputBotInlineMessage
}

type TL_botInlineMediaResult struct {
	flags        int32
	id           string
	_type        string
	photo        TL     // (bit flags.0) | Photo
	document     TL     // (bit flags.1) | Document
	title        string // (bit flags.2)
	description  string // (bit flags.3)
	send_message TL     // BotInlineMessage
}

type TL_inputBotInlineMessageID struct {
	dc_id       int32
	id          int64
	access_hash int64
}

type TL_updateInlineBotCallbackQuery struct {
	flags           int32
	query_id        int64
	user_id         int64
	msg_id          TL // InputBotInlineMessageID
	chat_instance   int64
	data            []byte // (bit flags.0)
	game_short_name string // (bit flags.1)
}

type TL_inlineBotSwitchPM struct {
	text        string
	start_param string
}

type TL_messages_peerDialogs struct {
	dialogs  []TL // Dialog
	messages []TL // Message
	chats    []TL // Chat
	users    []TL // User
	state    TL   // updates_State
}

type TL_topPeer struct {
	peer   TL // Peer
	rating float64
}

type TL_topPeerCategoryBotsPM struct {
}

type TL_topPeerCategoryBotsInline struct {
}

type TL_topPeerCategoryCorrespondents struct {
}

type TL_topPeerCategoryGroups struct {
}

type TL_topPeerCategoryChannels struct {
}

type TL_topPeerCategoryPeers struct {
	category TL // TopPeerCategory
	count    int32
	peers    []TL // TopPeer
}

type TL_contacts_topPeersNotModified struct {
}

type TL_contacts_topPeers struct {
	categories []TL // TopPeerCategoryPeers
	chats      []TL // Chat
	users      []TL // User
}

type TL_messageEntityMentionName struct {
	offset  int32
	length  int32
	user_id int64
}

type TL_inputMessageEntityMentionName struct {
	offset  int32
	length  int32
	user_id TL // InputUser
}

type TL_inputMessagesFilterChatPhotos struct {
}

type TL_updateReadChannelOutbox struct {
	channel_id int64
	max_id     int32
}

type TL_updateDraftMessage struct {
	flags      int32
	peer       TL    // Peer
	top_msg_id int32 // (bit flags.0)
	draft      TL    // DraftMessage
}

type TL_draftMessageEmpty struct {
	flags int32
	date  int32 // (bit flags.0)
}

type TL_draftMessage struct {
	flags        int32
	no_webpage   bool // (bit flags.1)
	invert_media bool // (bit flags.6)
	reply_to     TL   // (bit flags.4) | InputReplyTo
	message      string
	entities     []TL // (bit flags.3) | MessageEntity
	media        TL   // (bit flags.5) | InputMedia
	date         int32
}

type TL_messageActionHistoryClear struct {
}

type TL_messages_featuredStickersNotModified struct {
	count int32
}

type TL_messages_featuredStickers struct {
	flags   int32
	premium bool // (bit flags.0)
	hash    int64
	count   int32
	sets    []TL // StickerSetCovered
	unread  []int64
}

type TL_updateReadFeaturedStickers struct {
}

type TL_messages_recentStickersNotModified struct {
}

type TL_messages_recentStickers struct {
	hash     int64
	packs    []TL // StickerPack
	stickers []TL // Document
	dates    []int32
}

type TL_updateRecentStickers struct {
}

type TL_messages_archivedStickers struct {
	count int32
	sets  []TL // StickerSetCovered
}

type TL_messages_stickerSetInstallResultSuccess struct {
}

type TL_messages_stickerSetInstallResultArchive struct {
	sets []TL // StickerSetCovered
}

type TL_stickerSetCovered struct {
	set   TL // StickerSet
	cover TL // Document
}

type TL_updateConfig struct {
}

type TL_updatePtsChanged struct {
}

type TL_inputMediaPhotoExternal struct {
	flags       int32
	spoiler     bool // (bit flags.1)
	url         string
	ttl_seconds int32 // (bit flags.0)
}

type TL_inputMediaDocumentExternal struct {
	flags       int32
	spoiler     bool // (bit flags.1)
	url         string
	ttl_seconds int32 // (bit flags.0)
}

type TL_stickerSetMultiCovered struct {
	set    TL   // StickerSet
	covers []TL // Document
}

type TL_maskCoords struct {
	n    int32
	x    float64
	y    float64
	zoom float64
}

type TL_documentAttributeHasStickers struct {
}

type TL_inputStickeredMediaPhoto struct {
	id TL // InputPhoto
}

type TL_inputStickeredMediaDocument struct {
	id TL // InputDocument
}

type TL_game struct {
	flags       int32
	id          int64
	access_hash int64
	short_name  string
	title       string
	description string
	photo       TL // Photo
	document    TL // (bit flags.0) | Document
}

type TL_inputBotInlineResultGame struct {
	id           string
	short_name   string
	send_message TL // InputBotInlineMessage
}

type TL_inputBotInlineMessageGame struct {
	flags        int32
	reply_markup TL // (bit flags.2) | ReplyMarkup
}

type TL_messageMediaGame struct {
	game TL // Game
}

type TL_inputMediaGame struct {
	id TL // InputGame
}

type TL_inputGameID struct {
	id          int64
	access_hash int64
}

type TL_inputGameShortName struct {
	bot_id     TL // InputUser
	short_name string
}

type TL_keyboardButtonGame struct {
	text string
}

type TL_messageActionGameScore struct {
	game_id int64
	score   int32
}

type TL_highScore struct {
	pos     int32
	user_id int64
	score   int32
}

type TL_messages_highScores struct {
	scores []TL // HighScore
	users  []TL // User
}

type TL_updates_differenceTooLong struct {
	pts int32
}

type TL_updateChannelWebPage struct {
	channel_id int64
	webpage    TL // WebPage
	pts        int32
	pts_count  int32
}

type TL_messages_chatsSlice struct {
	count int32
	chats []TL // Chat
}

type TL_textEmpty struct {
}

type TL_textPlain struct {
	text string
}

type TL_textBold struct {
	text TL // RichText
}

type TL_textItalic struct {
	text TL // RichText
}

type TL_textUnderline struct {
	text TL // RichText
}

type TL_textStrike struct {
	text TL // RichText
}

type TL_textFixed struct {
	text TL // RichText
}

type TL_textUrl struct {
	text       TL // RichText
	url        string
	webpage_id int64
}

type TL_textEmail struct {
	text  TL // RichText
	email string
}

type TL_textConcat struct {
	texts []TL // RichText
}

type TL_pageBlockUnsupported struct {
}

type TL_pageBlockTitle struct {
	text TL // RichText
}

type TL_pageBlockSubtitle struct {
	text TL // RichText
}

type TL_pageBlockAuthorDate struct {
	author         TL // RichText
	published_date int32
}

type TL_pageBlockHeader struct {
	text TL // RichText
}

type TL_pageBlockSubheader struct {
	text TL // RichText
}

type TL_pageBlockParagraph struct {
	text TL // RichText
}

type TL_pageBlockPreformatted struct {
	text     TL // RichText
	language string
}

type TL_pageBlockFooter struct {
	text TL // RichText
}

type TL_pageBlockDivider struct {
}

type TL_pageBlockAnchor struct {
	name string
}

type TL_pageBlockList struct {
	items []TL // PageListItem
}

type TL_pageBlockBlockquote struct {
	text    TL // RichText
	caption TL // RichText
}

type TL_pageBlockPullquote struct {
	text    TL // RichText
	caption TL // RichText
}

type TL_pageBlockPhoto struct {
	flags      int32
	photo_id   int64
	caption    TL     // PageCaption
	url        string // (bit flags.0)
	webpage_id int64  // (bit flags.0)
}

type TL_pageBlockVideo struct {
	flags    int32
	autoplay bool // (bit flags.0)
	loop     bool // (bit flags.1)
	video_id int64
	caption  TL // PageCaption
}

type TL_pageBlockCover struct {
	cover TL // PageBlock
}

type TL_pageBlockEmbed struct {
	flags           int32
	full_width      bool   // (bit flags.0)
	allow_scrolling bool   // (bit flags.3)
	url             string // (bit flags.1)
	html            string // (bit flags.2)
	poster_photo_id int64  // (bit flags.4)
	w               int32  // (bit flags.5)
	h               int32  // (bit flags.5)
	caption         TL     // PageCaption
}

type TL_pageBlockEmbedPost struct {
	url             string
	webpage_id      int64
	author_photo_id int64
	author          string
	date            int32
	blocks          []TL // PageBlock
	caption         TL   // PageCaption
}

type TL_pageBlockCollage struct {
	items   []TL // PageBlock
	caption TL   // PageCaption
}

type TL_pageBlockSlideshow struct {
	items   []TL // PageBlock
	caption TL   // PageCaption
}

type TL_webPageNotModified struct {
	flags             int32
	cached_page_views int32 // (bit flags.0)
}

type TL_inputPrivacyKeyPhoneCall struct {
}

type TL_privacyKeyPhoneCall struct {
}

type TL_sendMessageGamePlayAction struct {
}

type TL_phoneCallDiscardReasonMissed struct {
}

type TL_phoneCallDiscardReasonDisconnect struct {
}

type TL_phoneCallDiscardReasonHangup struct {
}

type TL_phoneCallDiscardReasonBusy struct {
}

type TL_updateDialogPinned struct {
	flags     int32
	pinned    bool  // (bit flags.0)
	folder_id int32 // (bit flags.1)
	peer      TL    // DialogPeer
}

type TL_updatePinnedDialogs struct {
	flags     int32
	folder_id int32 // (bit flags.1)
	order     []TL  // (bit flags.0) | DialogPeer
}

type TL_dataJSON struct {
	data string
}

type TL_updateBotWebhookJSON struct {
	data TL // DataJSON
}

type TL_updateBotWebhookJSONQuery struct {
	query_id int64
	data     TL // DataJSON
	timeout  int32
}

type TL_labeledPrice struct {
	label  string
	amount int64
}

type TL_invoice struct {
	flags                      int32
	test                       bool // (bit flags.0)
	name_requested             bool // (bit flags.1)
	phone_requested            bool // (bit flags.2)
	email_requested            bool // (bit flags.3)
	shipping_address_requested bool // (bit flags.4)
	flexible                   bool // (bit flags.5)
	phone_to_provider          bool // (bit flags.6)
	email_to_provider          bool // (bit flags.7)
	recurring                  bool // (bit flags.9)
	currency                   string
	prices                     []TL    // LabeledPrice
	max_tip_amount             int64   // (bit flags.8)
	suggested_tip_amounts      []int64 // (bit flags.8)
	terms_url                  string  // (bit flags.10)
}

type TL_inputMediaInvoice struct {
	flags          int32
	title          string
	description    string
	photo          TL // (bit flags.0) | InputWebDocument
	invoice        TL // Invoice
	payload        []byte
	provider       string
	provider_data  TL     // DataJSON
	start_param    string // (bit flags.1)
	extended_media TL     // (bit flags.2) | InputMedia
}

type TL_paymentCharge struct {
	id                 string
	provider_charge_id string
}

type TL_messageActionPaymentSentMe struct {
	flags              int32
	recurring_init     bool // (bit flags.2)
	recurring_used     bool // (bit flags.3)
	currency           string
	total_amount       int64
	payload            []byte
	info               TL     // (bit flags.0) | PaymentRequestedInfo
	shipping_option_id string // (bit flags.1)
	charge             TL     // PaymentCharge
}

type TL_messageMediaInvoice struct {
	flags                      int32
	shipping_address_requested bool // (bit flags.1)
	test                       bool // (bit flags.3)
	title                      string
	description                string
	photo                      TL    // (bit flags.0) | WebDocument
	receipt_msg_id             int32 // (bit flags.2)
	currency                   string
	total_amount               int64
	start_param                string
	extended_media             TL // (bit flags.4) | MessageExtendedMedia
}

type TL_postAddress struct {
	street_line1 string
	street_line2 string
	city         string
	state        string
	country_iso2 string
	post_code    string
}

type TL_paymentRequestedInfo struct {
	flags            int32
	name             string // (bit flags.0)
	phone            string // (bit flags.1)
	email            string // (bit flags.2)
	shipping_address TL     // (bit flags.3) | PostAddress
}

type TL_keyboardButtonBuy struct {
	text string
}

type TL_messageActionPaymentSent struct {
	flags          int32
	recurring_init bool // (bit flags.2)
	recurring_used bool // (bit flags.3)
	currency       string
	total_amount   int64
	invoice_slug   string // (bit flags.0)
}

type TL_paymentSavedCredentialsCard struct {
	id    string
	title string
}

type TL_webDocument struct {
	url         string
	access_hash int64
	size        int32
	mime_type   string
	attributes  []TL // DocumentAttribute
}

type TL_inputWebDocument struct {
	url        string
	size       int32
	mime_type  string
	attributes []TL // DocumentAttribute
}

type TL_inputWebFileLocation struct {
	url         string
	access_hash int64
}

type TL_upload_webFile struct {
	size      int32
	mime_type string
	file_type TL // storage_FileType
	mtime     int32
	bytes     []byte
}

type TL_payments_paymentForm struct {
	flags                int32
	can_save_credentials bool // (bit flags.2)
	password_missing     bool // (bit flags.3)
	form_id              int64
	bot_id               int64
	title                string
	description          string
	photo                TL // (bit flags.5) | WebDocument
	invoice              TL // Invoice
	provider_id          int64
	url                  string
	native_provider      string // (bit flags.4)
	native_params        TL     // (bit flags.4) | DataJSON
	additional_methods   []TL   // (bit flags.6) | PaymentFormMethod
	saved_info           TL     // (bit flags.0) | PaymentRequestedInfo
	saved_credentials    []TL   // (bit flags.1) | PaymentSavedCredentials
	users                []TL   // User
}

type TL_payments_validatedRequestedInfo struct {
	flags            int32
	id               string // (bit flags.0)
	shipping_options []TL   // (bit flags.1) | ShippingOption
}

type TL_payments_paymentResult struct {
	updates TL // Updates
}

type TL_payments_paymentReceipt struct {
	flags             int32
	date              int32
	bot_id            int64
	provider_id       int64
	title             string
	description       string
	photo             TL    // (bit flags.2) | WebDocument
	invoice           TL    // Invoice
	info              TL    // (bit flags.0) | PaymentRequestedInfo
	shipping          TL    // (bit flags.1) | ShippingOption
	tip_amount        int64 // (bit flags.3)
	currency          string
	total_amount      int64
	credentials_title string
	users             []TL // User
}

type TL_payments_savedInfo struct {
	flags                 int32
	has_saved_credentials bool // (bit flags.1)
	saved_info            TL   // (bit flags.0) | PaymentRequestedInfo
}

type TL_inputPaymentCredentialsSaved struct {
	id           string
	tmp_password []byte
}

type TL_inputPaymentCredentials struct {
	flags int32
	save  bool // (bit flags.0)
	data  TL   // DataJSON
}

type TL_account_tmpPassword struct {
	tmp_password []byte
	valid_until  int32
}

type TL_shippingOption struct {
	id     string
	title  string
	prices []TL // LabeledPrice
}

type TL_updateBotShippingQuery struct {
	query_id         int64
	user_id          int64
	payload          []byte
	shipping_address TL // PostAddress
}

type TL_updateBotPrecheckoutQuery struct {
	flags              int32
	query_id           int64
	user_id            int64
	payload            []byte
	info               TL     // (bit flags.0) | PaymentRequestedInfo
	shipping_option_id string // (bit flags.1)
	currency           string
	total_amount       int64
}

type TL_inputStickerSetItem struct {
	flags       int32
	document    TL // InputDocument
	emoji       string
	mask_coords TL     // (bit flags.0) | MaskCoords
	keywords    string // (bit flags.1)
}

type TL_updatePhoneCall struct {
	phone_call TL // PhoneCall
}

type TL_inputPhoneCall struct {
	id          int64
	access_hash int64
}

type TL_phoneCallEmpty struct {
	id int64
}

type TL_phoneCallWaiting struct {
	flags          int32
	video          bool // (bit flags.6)
	id             int64
	access_hash    int64
	date           int32
	admin_id       int64
	participant_id int64
	protocol       TL    // PhoneCallProtocol
	receive_date   int32 // (bit flags.0)
}

type TL_phoneCallRequested struct {
	flags          int32
	video          bool // (bit flags.6)
	id             int64
	access_hash    int64
	date           int32
	admin_id       int64
	participant_id int64
	g_a_hash       []byte
	protocol       TL // PhoneCallProtocol
}

type TL_phoneCallAccepted struct {
	flags          int32
	video          bool // (bit flags.6)
	id             int64
	access_hash    int64
	date           int32
	admin_id       int64
	participant_id int64
	g_b            []byte
	protocol       TL // PhoneCallProtocol
}

type TL_phoneCall struct {
	flags           int32
	p2p_allowed     bool // (bit flags.5)
	video           bool // (bit flags.6)
	id              int64
	access_hash     int64
	date            int32
	admin_id        int64
	participant_id  int64
	g_a_or_b        []byte
	key_fingerprint int64
	protocol        TL   // PhoneCallProtocol
	connections     []TL // PhoneConnection
	start_date      int32
}

type TL_phoneCallDiscarded struct {
	flags       int32
	need_rating bool // (bit flags.2)
	need_debug  bool // (bit flags.3)
	video       bool // (bit flags.6)
	id          int64
	reason      TL    // (bit flags.0) | PhoneCallDiscardReason
	duration    int32 // (bit flags.1)
}

type TL_phoneConnection struct {
	flags    int32
	tcp      bool // (bit flags.0)
	id       int64
	ip       string
	ipv6     string
	port     int32
	peer_tag []byte
}

type TL_phoneCallProtocol struct {
	flags            int32
	udp_p2p          bool // (bit flags.0)
	udp_reflector    bool // (bit flags.1)
	min_layer        int32
	max_layer        int32
	library_versions []string
}

type TL_phone_phoneCall struct {
	phone_call TL   // PhoneCall
	users      []TL // User
}

type TL_inputMessagesFilterPhoneCalls struct {
	flags  int32
	missed bool // (bit flags.0)
}

type TL_messageActionPhoneCall struct {
	flags    int32
	video    bool // (bit flags.2)
	call_id  int64
	reason   TL    // (bit flags.0) | PhoneCallDiscardReason
	duration int32 // (bit flags.1)
}

type TL_inputMessagesFilterRoundVoice struct {
}

type TL_inputMessagesFilterRoundVideo struct {
}

type TL_sendMessageRecordRoundAction struct {
}

type TL_sendMessageUploadRoundAction struct {
	progress int32
}

type TL_upload_fileCdnRedirect struct {
	dc_id          int32
	file_token     []byte
	encryption_key []byte
	encryption_iv  []byte
	file_hashes    []TL // FileHash
}

type TL_upload_cdnFileReuploadNeeded struct {
	request_token []byte
}

type TL_upload_cdnFile struct {
	bytes []byte
}

type TL_cdnPublicKey struct {
	dc_id      int32
	public_key string
}

type TL_cdnConfig struct {
	public_keys []TL // CdnPublicKey
}

type TL_pageBlockChannel struct {
	channel TL // Chat
}

type TL_langPackString struct {
	key   string
	value string
}

type TL_langPackStringPluralized struct {
	flags       int32
	key         string
	zero_value  string // (bit flags.0)
	one_value   string // (bit flags.1)
	two_value   string // (bit flags.2)
	few_value   string // (bit flags.3)
	many_value  string // (bit flags.4)
	other_value string
}

type TL_langPackStringDeleted struct {
	key string
}

type TL_langPackDifference struct {
	lang_code    string
	from_version int32
	version      int32
	strings      []TL // LangPackString
}

type TL_langPackLanguage struct {
	flags            int32
	official         bool // (bit flags.0)
	rtl              bool // (bit flags.2)
	beta             bool // (bit flags.3)
	name             string
	native_name      string
	lang_code        string
	base_lang_code   string // (bit flags.1)
	plural_code      string
	strings_count    int32
	translated_count int32
	translations_url string
}

type TL_updateLangPackTooLong struct {
	lang_code string
}

type TL_updateLangPack struct {
	difference TL // LangPackDifference
}

type TL_channelParticipantAdmin struct {
	flags        int32
	can_edit     bool // (bit flags.0)
	self         bool // (bit flags.1)
	user_id      int64
	inviter_id   int64 // (bit flags.1)
	promoted_by  int64
	date         int32
	admin_rights TL     // ChatAdminRights
	rank         string // (bit flags.2)
}

type TL_channelParticipantBanned struct {
	flags         int32
	left          bool // (bit flags.0)
	peer          TL   // Peer
	kicked_by     int64
	date          int32
	banned_rights TL // ChatBannedRights
}

type TL_channelParticipantsBanned struct {
	q string
}

type TL_channelParticipantsSearch struct {
	q string
}

type TL_channelAdminLogEventActionChangeTitle struct {
	prev_value string
	new_value  string
}

type TL_channelAdminLogEventActionChangeAbout struct {
	prev_value string
	new_value  string
}

type TL_channelAdminLogEventActionChangeUsername struct {
	prev_value string
	new_value  string
}

type TL_channelAdminLogEventActionChangePhoto struct {
	prev_photo TL // Photo
	new_photo  TL // Photo
}

type TL_channelAdminLogEventActionToggleInvites struct {
	new_value TL // Bool
}

type TL_channelAdminLogEventActionToggleSignatures struct {
	new_value TL // Bool
}

type TL_channelAdminLogEventActionUpdatePinned struct {
	message TL // Message
}

type TL_channelAdminLogEventActionEditMessage struct {
	prev_message TL // Message
	new_message  TL // Message
}

type TL_channelAdminLogEventActionDeleteMessage struct {
	message TL // Message
}

type TL_channelAdminLogEventActionParticipantJoin struct {
}

type TL_channelAdminLogEventActionParticipantLeave struct {
}

type TL_channelAdminLogEventActionParticipantInvite struct {
	participant TL // ChannelParticipant
}

type TL_channelAdminLogEventActionParticipantToggleBan struct {
	prev_participant TL // ChannelParticipant
	new_participant  TL // ChannelParticipant
}

type TL_channelAdminLogEventActionParticipantToggleAdmin struct {
	prev_participant TL // ChannelParticipant
	new_participant  TL // ChannelParticipant
}

type TL_channelAdminLogEvent struct {
	id      int64
	date    int32
	user_id int64
	action  TL // ChannelAdminLogEventAction
}

type TL_channels_adminLogResults struct {
	events []TL // ChannelAdminLogEvent
	chats  []TL // Chat
	users  []TL // User
}

type TL_channelAdminLogEventsFilter struct {
	flags      int32
	join       bool // (bit flags.0)
	leave      bool // (bit flags.1)
	invite     bool // (bit flags.2)
	ban        bool // (bit flags.3)
	unban      bool // (bit flags.4)
	kick       bool // (bit flags.5)
	unkick     bool // (bit flags.6)
	promote    bool // (bit flags.7)
	demote     bool // (bit flags.8)
	info       bool // (bit flags.9)
	settings   bool // (bit flags.10)
	pinned     bool // (bit flags.11)
	edit       bool // (bit flags.12)
	delete     bool // (bit flags.13)
	group_call bool // (bit flags.14)
	invites    bool // (bit flags.15)
	send       bool // (bit flags.16)
	forums     bool // (bit flags.17)
	sub_extend bool // (bit flags.18)
}

type TL_topPeerCategoryPhoneCalls struct {
}

type TL_pageBlockAudio struct {
	audio_id int64
	caption  TL // PageCaption
}

type TL_popularContact struct {
	client_id int64
	importers int32
}

type TL_messageActionScreenshotTaken struct {
}

type TL_messages_favedStickersNotModified struct {
}

type TL_messages_favedStickers struct {
	hash     int64
	packs    []TL // StickerPack
	stickers []TL // Document
}

type TL_updateFavedStickers struct {
}

type TL_updateChannelReadMessagesContents struct {
	flags      int32
	channel_id int64
	top_msg_id int32 // (bit flags.0)
	messages   []int32
}

type TL_inputMessagesFilterMyMentions struct {
}

type TL_updateContactsReset struct {
}

type TL_channelAdminLogEventActionChangeStickerSet struct {
	prev_stickerset TL // InputStickerSet
	new_stickerset  TL // InputStickerSet
}

type TL_messageActionCustomAction struct {
	message string
}

type TL_inputPaymentCredentialsApplePay struct {
	payment_data TL // DataJSON
}

type TL_inputMessagesFilterGeo struct {
}

type TL_inputMessagesFilterContacts struct {
}

type TL_updateChannelAvailableMessages struct {
	channel_id       int64
	available_min_id int32
}

type TL_channelAdminLogEventActionTogglePreHistoryHidden struct {
	new_value TL // Bool
}

type TL_inputMediaGeoLive struct {
	flags                         int32
	stopped                       bool  // (bit flags.0)
	geo_point                     TL    // InputGeoPoint
	heading                       int32 // (bit flags.2)
	period                        int32 // (bit flags.1)
	proximity_notification_radius int32 // (bit flags.3)
}

type TL_messageMediaGeoLive struct {
	flags                         int32
	geo                           TL    // GeoPoint
	heading                       int32 // (bit flags.0)
	period                        int32
	proximity_notification_radius int32 // (bit flags.1)
}

type TL_recentMeUrlUnknown struct {
	url string
}

type TL_recentMeUrlUser struct {
	url     string
	user_id int64
}

type TL_recentMeUrlChat struct {
	url     string
	chat_id int64
}

type TL_recentMeUrlChatInvite struct {
	url         string
	chat_invite TL // ChatInvite
}

type TL_recentMeUrlStickerSet struct {
	url string
	set TL // StickerSetCovered
}

type TL_help_recentMeUrls struct {
	urls  []TL // RecentMeUrl
	chats []TL // Chat
	users []TL // User
}

type TL_channels_channelParticipantsNotModified struct {
}

type TL_messages_messagesNotModified struct {
	count int32
}

type TL_inputSingleMedia struct {
	flags     int32
	media     TL // InputMedia
	random_id int64
	message   string
	entities  []TL // (bit flags.0) | MessageEntity
}

type TL_webAuthorization struct {
	hash         int64
	bot_id       int64
	domain       string
	browser      string
	platform     string
	date_created int32
	date_active  int32
	ip           string
	region       string
}

type TL_account_webAuthorizations struct {
	authorizations []TL // WebAuthorization
	users          []TL // User
}

type TL_inputMessageID struct {
	id int32
}

type TL_inputMessageReplyTo struct {
	id int32
}

type TL_inputMessagePinned struct {
}

type TL_messageEntityPhone struct {
	offset int32
	length int32
}

type TL_messageEntityCashtag struct {
	offset int32
	length int32
}

type TL_messageActionBotAllowed struct {
	flags        int32
	attach_menu  bool   // (bit flags.1)
	from_request bool   // (bit flags.3)
	domain       string // (bit flags.0)
	app          TL     // (bit flags.2) | BotApp
}

type TL_inputDialogPeer struct {
	peer TL // InputPeer
}

type TL_dialogPeer struct {
	peer TL // Peer
}

type TL_messages_foundStickerSetsNotModified struct {
}

type TL_messages_foundStickerSets struct {
	hash int64
	sets []TL // StickerSetCovered
}

type TL_fileHash struct {
	offset int64
	limit  int32
	hash   []byte
}

type TL_webDocumentNoProxy struct {
	url        string
	size       int32
	mime_type  string
	attributes []TL // DocumentAttribute
}

type TL_inputClientProxy struct {
	address string
	port    int32
}

type TL_help_termsOfServiceUpdateEmpty struct {
	expires int32
}

type TL_help_termsOfServiceUpdate struct {
	expires          int32
	terms_of_service TL // help_TermsOfService
}

type TL_inputSecureFileUploaded struct {
	id           int64
	parts        int32
	md5_checksum string
	file_hash    []byte
	secret       []byte
}

type TL_inputSecureFile struct {
	id          int64
	access_hash int64
}

type TL_inputSecureFileLocation struct {
	id          int64
	access_hash int64
}

type TL_secureFileEmpty struct {
}

type TL_secureFile struct {
	id          int64
	access_hash int64
	size        int64
	dc_id       int32
	date        int32
	file_hash   []byte
	secret      []byte
}

type TL_secureData struct {
	data      []byte
	data_hash []byte
	secret    []byte
}

type TL_securePlainPhone struct {
	phone string
}

type TL_securePlainEmail struct {
	email string
}

type TL_secureValueTypePersonalDetails struct {
}

type TL_secureValueTypePassport struct {
}

type TL_secureValueTypeDriverLicense struct {
}

type TL_secureValueTypeIdentityCard struct {
}

type TL_secureValueTypeInternalPassport struct {
}

type TL_secureValueTypeAddress struct {
}

type TL_secureValueTypeUtilityBill struct {
}

type TL_secureValueTypeBankStatement struct {
}

type TL_secureValueTypeRentalAgreement struct {
}

type TL_secureValueTypePassportRegistration struct {
}

type TL_secureValueTypeTemporaryRegistration struct {
}

type TL_secureValueTypePhone struct {
}

type TL_secureValueTypeEmail struct {
}

type TL_secureValue struct {
	flags        int32
	_type        TL   // SecureValueType
	data         TL   // (bit flags.0) | SecureData
	front_side   TL   // (bit flags.1) | SecureFile
	reverse_side TL   // (bit flags.2) | SecureFile
	selfie       TL   // (bit flags.3) | SecureFile
	translation  []TL // (bit flags.6) | SecureFile
	files        []TL // (bit flags.4) | SecureFile
	plain_data   TL   // (bit flags.5) | SecurePlainData
	hash         []byte
}

type TL_inputSecureValue struct {
	flags        int32
	_type        TL   // SecureValueType
	data         TL   // (bit flags.0) | SecureData
	front_side   TL   // (bit flags.1) | InputSecureFile
	reverse_side TL   // (bit flags.2) | InputSecureFile
	selfie       TL   // (bit flags.3) | InputSecureFile
	translation  []TL // (bit flags.6) | InputSecureFile
	files        []TL // (bit flags.4) | InputSecureFile
	plain_data   TL   // (bit flags.5) | SecurePlainData
}

type TL_secureValueHash struct {
	_type TL // SecureValueType
	hash  []byte
}

type TL_secureValueErrorData struct {
	_type     TL // SecureValueType
	data_hash []byte
	field     string
	text      string
}

type TL_secureValueErrorFrontSide struct {
	_type     TL // SecureValueType
	file_hash []byte
	text      string
}

type TL_secureValueErrorReverseSide struct {
	_type     TL // SecureValueType
	file_hash []byte
	text      string
}

type TL_secureValueErrorSelfie struct {
	_type     TL // SecureValueType
	file_hash []byte
	text      string
}

type TL_secureValueErrorFile struct {
	_type     TL // SecureValueType
	file_hash []byte
	text      string
}

type TL_secureValueErrorFiles struct {
	_type     TL   // SecureValueType
	file_hash []TL // bytes
	text      string
}

type TL_secureCredentialsEncrypted struct {
	data   []byte
	hash   []byte
	secret []byte
}

type TL_account_authorizationForm struct {
	flags              int32
	required_types     []TL   // SecureRequiredType
	values             []TL   // SecureValue
	errors             []TL   // SecureValueError
	users              []TL   // User
	privacy_policy_url string // (bit flags.0)
}

type TL_account_sentEmailCode struct {
	email_pattern string
	length        int32
}

type TL_messageActionSecureValuesSentMe struct {
	values      []TL // SecureValue
	credentials TL   // SecureCredentialsEncrypted
}

type TL_messageActionSecureValuesSent struct {
	types []TL // SecureValueType
}

type TL_help_deepLinkInfoEmpty struct {
}

type TL_help_deepLinkInfo struct {
	flags      int32
	update_app bool // (bit flags.0)
	message    string
	entities   []TL // (bit flags.1) | MessageEntity
}

type TL_savedPhoneContact struct {
	phone      string
	first_name string
	last_name  string
	date       int32
}

type TL_account_takeout struct {
	id int64
}

type TL_inputTakeoutFileLocation struct {
}

type TL_updateDialogUnreadMark struct {
	flags  int32
	unread bool // (bit flags.0)
	peer   TL   // DialogPeer
}

type TL_messages_dialogsNotModified struct {
	count int32
}

type TL_inputWebFileGeoPointLocation struct {
	geo_point   TL // InputGeoPoint
	access_hash int64
	w           int32
	h           int32
	zoom        int32
	scale       int32
}

type TL_contacts_topPeersDisabled struct {
}

type TL_inputReportReasonCopyright struct {
}

type TL_passwordKdfAlgoUnknown struct {
}

type TL_securePasswordKdfAlgoUnknown struct {
}

type TL_securePasswordKdfAlgoPBKDF2HMACSHA512iter100000 struct {
	salt []byte
}

type TL_securePasswordKdfAlgoSHA512 struct {
	salt []byte
}

type TL_secureSecretSettings struct {
	secure_algo      TL // SecurePasswordKdfAlgo
	secure_secret    []byte
	secure_secret_id int64
}

type TL_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow struct {
	salt1 []byte
	salt2 []byte
	g     int32
	p     []byte
}

type TL_inputCheckPasswordEmpty struct {
}

type TL_inputCheckPasswordSRP struct {
	srp_id int64
	A      []byte
	M1     []byte
}

type TL_secureValueError struct {
	_type TL // SecureValueType
	hash  []byte
	text  string
}

type TL_secureValueErrorTranslationFile struct {
	_type     TL // SecureValueType
	file_hash []byte
	text      string
}

type TL_secureValueErrorTranslationFiles struct {
	_type     TL   // SecureValueType
	file_hash []TL // bytes
	text      string
}

type TL_secureRequiredType struct {
	flags                int32
	native_names         bool // (bit flags.0)
	selfie_required      bool // (bit flags.1)
	translation_required bool // (bit flags.2)
	_type                TL   // SecureValueType
}

type TL_secureRequiredTypeOneOf struct {
	types []TL // SecureRequiredType
}

type TL_help_passportConfigNotModified struct {
}

type TL_help_passportConfig struct {
	hash            int32
	countries_langs TL // DataJSON
}

type TL_inputAppEvent struct {
	time  float64
	_type string
	peer  int64
	data  TL // JSONValue
}

type TL_jsonObjectValue struct {
	key   string
	value TL // JSONValue
}

type TL_jsonNull struct {
}

type TL_jsonBool struct {
	value TL // Bool
}

type TL_jsonNumber struct {
	value float64
}

type TL_jsonString struct {
	value string
}

type TL_jsonArray struct {
	value []TL // JSONValue
}

type TL_jsonObject struct {
	value []TL // JSONObjectValue
}

type TL_inputNotifyBroadcasts struct {
}

type TL_notifyBroadcasts struct {
}

type TL_textSubscript struct {
	text TL // RichText
}

type TL_textSuperscript struct {
	text TL // RichText
}

type TL_textMarked struct {
	text TL // RichText
}

type TL_textPhone struct {
	text  TL // RichText
	phone string
}

type TL_textImage struct {
	document_id int64
	w           int32
	h           int32
}

type TL_pageBlockKicker struct {
	text TL // RichText
}

type TL_pageTableCell struct {
	flags         int32
	header        bool  // (bit flags.0)
	align_center  bool  // (bit flags.3)
	align_right   bool  // (bit flags.4)
	valign_middle bool  // (bit flags.5)
	valign_bottom bool  // (bit flags.6)
	text          TL    // (bit flags.7) | RichText
	colspan       int32 // (bit flags.1)
	rowspan       int32 // (bit flags.2)
}

type TL_pageTableRow struct {
	cells []TL // PageTableCell
}

type TL_pageBlockTable struct {
	flags    int32
	bordered bool // (bit flags.0)
	striped  bool // (bit flags.1)
	title    TL   // RichText
	rows     []TL // PageTableRow
}

type TL_pageCaption struct {
	text   TL // RichText
	credit TL // RichText
}

type TL_pageListItemText struct {
	text TL // RichText
}

type TL_pageListItemBlocks struct {
	blocks []TL // PageBlock
}

type TL_pageListOrderedItemText struct {
	num  string
	text TL // RichText
}

type TL_pageListOrderedItemBlocks struct {
	num    string
	blocks []TL // PageBlock
}

type TL_pageBlockOrderedList struct {
	items []TL // PageListOrderedItem
}

type TL_pageBlockDetails struct {
	flags  int32
	open   bool // (bit flags.0)
	blocks []TL // PageBlock
	title  TL   // RichText
}

type TL_pageRelatedArticle struct {
	flags          int32
	url            string
	webpage_id     int64
	title          string // (bit flags.0)
	description    string // (bit flags.1)
	photo_id       int64  // (bit flags.2)
	author         string // (bit flags.3)
	published_date int32  // (bit flags.4)
}

type TL_pageBlockRelatedArticles struct {
	title    TL   // RichText
	articles []TL // PageRelatedArticle
}

type TL_pageBlockMap struct {
	geo     TL // GeoPoint
	zoom    int32
	w       int32
	h       int32
	caption TL // PageCaption
}

type TL_page struct {
	flags     int32
	part      bool // (bit flags.0)
	rtl       bool // (bit flags.1)
	v2        bool // (bit flags.2)
	url       string
	blocks    []TL  // PageBlock
	photos    []TL  // Photo
	documents []TL  // Document
	views     int32 // (bit flags.3)
}

type TL_inputPrivacyKeyPhoneP2P struct {
}

type TL_privacyKeyPhoneP2P struct {
}

type TL_textAnchor struct {
	text TL // RichText
	name string
}

type TL_help_supportName struct {
	name string
}

type TL_help_userInfoEmpty struct {
}

type TL_help_userInfo struct {
	message  string
	entities []TL // MessageEntity
	author   string
	date     int32
}

type TL_messageActionContactSignUp struct {
}

type TL_updateMessagePoll struct {
	flags   int32
	poll_id int64
	poll    TL // (bit flags.0) | Poll
	results TL // PollResults
}

type TL_pollAnswer struct {
	text   string
	option []byte
}

type TL_poll struct {
	id              int64
	flags           int32
	closed          bool // (bit flags.0)
	public_voters   bool // (bit flags.1)
	multiple_choice bool // (bit flags.2)
	quiz            bool // (bit flags.3)
	question        string
	answers         []TL  // PollAnswer
	close_period    int32 // (bit flags.4)
	close_date      int32 // (bit flags.5)
}

type TL_pollAnswerVoters struct {
	flags   int32
	chosen  bool // (bit flags.0)
	correct bool // (bit flags.1)
	option  []byte
	voters  int32
}

type TL_pollResults struct {
	flags             int32
	min               bool   // (bit flags.0)
	results           []TL   // (bit flags.1) | PollAnswerVoters
	total_voters      int32  // (bit flags.2)
	recent_voters     []TL   // (bit flags.3) | Peer
	solution          string // (bit flags.4)
	solution_entities []TL   // (bit flags.4) | MessageEntity
}

type TL_inputMediaPoll struct {
	flags             int32
	poll              TL     // Poll
	correct_answers   []TL   // (bit flags.0) | bytes
	solution          string // (bit flags.1)
	solution_entities []TL   // (bit flags.1) | MessageEntity
}

type TL_messageMediaPoll struct {
	poll    TL // Poll
	results TL // PollResults
}

type TL_chatOnlines struct {
	onlines int32
}

type TL_statsURL struct {
	url string
}

type TL_photoStrippedSize struct {
	_type string
	bytes []byte
}

type TL_chatAdminRights struct {
	flags           int32
	change_info     bool // (bit flags.0)
	post_messages   bool // (bit flags.1)
	edit_messages   bool // (bit flags.2)
	delete_messages bool // (bit flags.3)
	ban_users       bool // (bit flags.4)
	invite_users    bool // (bit flags.5)
	pin_messages    bool // (bit flags.7)
	add_admins      bool // (bit flags.9)
	anonymous       bool // (bit flags.10)
	manage_call     bool // (bit flags.11)
	other           bool // (bit flags.12)
	manage_topics   bool // (bit flags.13)
	post_stories    bool // (bit flags.14)
	edit_stories    bool // (bit flags.15)
	delete_stories  bool // (bit flags.16)
}

type TL_chatBannedRights struct {
	flags            int32
	view_messages    bool // (bit flags.0)
	send_messages    bool // (bit flags.1)
	send_media       bool // (bit flags.2)
	send_stickers    bool // (bit flags.3)
	send_gifs        bool // (bit flags.4)
	send_games       bool // (bit flags.5)
	send_inline      bool // (bit flags.6)
	embed_links      bool // (bit flags.7)
	send_polls       bool // (bit flags.8)
	change_info      bool // (bit flags.10)
	invite_users     bool // (bit flags.15)
	pin_messages     bool // (bit flags.17)
	manage_topics    bool // (bit flags.18)
	send_photos      bool // (bit flags.19)
	send_videos      bool // (bit flags.20)
	send_roundvideos bool // (bit flags.21)
	send_audios      bool // (bit flags.22)
	send_voices      bool // (bit flags.23)
	send_docs        bool // (bit flags.24)
	send_plain       bool // (bit flags.25)
	until_date       int32
}

type TL_updateChatDefaultBannedRights struct {
	peer                  TL // Peer
	default_banned_rights TL // ChatBannedRights
	version               int32
}

type TL_inputWallPaper struct {
	id          int64
	access_hash int64
}

type TL_inputWallPaperSlug struct {
	slug string
}

type TL_channelParticipantsContacts struct {
	q string
}

type TL_channelAdminLogEventActionDefaultBannedRights struct {
	prev_banned_rights TL // ChatBannedRights
	new_banned_rights  TL // ChatBannedRights
}

type TL_channelAdminLogEventActionStopPoll struct {
	message TL // Message
}

type TL_account_wallPapersNotModified struct {
}

type TL_account_wallPapers struct {
	hash       int64
	wallpapers []TL // WallPaper
}

type TL_codeSettings struct {
	flags             int32
	allow_flashcall   bool   // (bit flags.0)
	current_number    bool   // (bit flags.1)
	allow_app_hash    bool   // (bit flags.4)
	allow_missed_call bool   // (bit flags.5)
	allow_firebase    bool   // (bit flags.7)
	logout_tokens     []TL   // (bit flags.6) | bytes
	token             string // (bit flags.8)
	app_sandbox       TL     // (bit flags.8) | Bool
}

type TL_wallPaperSettings struct {
	flags                   int32
	blur                    bool   // (bit flags.1)
	motion                  bool   // (bit flags.2)
	background_color        int32  // (bit flags.0)
	second_background_color int32  // (bit flags.4)
	third_background_color  int32  // (bit flags.5)
	fourth_background_color int32  // (bit flags.6)
	intensity               int32  // (bit flags.3)
	rotation                int32  // (bit flags.4)
	emoticon                string // (bit flags.7)
}

type TL_autoDownloadSettings struct {
	flags                             int32
	disabled                          bool // (bit flags.0)
	video_preload_large               bool // (bit flags.1)
	audio_preload_next                bool // (bit flags.2)
	phonecalls_less_data              bool // (bit flags.3)
	stories_preload                   bool // (bit flags.4)
	photo_size_max                    int32
	video_size_max                    int64
	file_size_max                     int64
	video_upload_maxbitrate           int32
	small_queue_active_operations_max int32
	large_queue_active_operations_max int32
}

type TL_account_autoDownloadSettings struct {
	low    TL // AutoDownloadSettings
	medium TL // AutoDownloadSettings
	high   TL // AutoDownloadSettings
}

type TL_emojiKeyword struct {
	keyword   string
	emoticons []string
}

type TL_emojiKeywordDeleted struct {
	keyword   string
	emoticons []string
}

type TL_emojiKeywordsDifference struct {
	lang_code    string
	from_version int32
	version      int32
	keywords     []TL // EmojiKeyword
}

type TL_emojiURL struct {
	url string
}

type TL_emojiLanguage struct {
	lang_code string
}

type TL_inputPrivacyKeyForwards struct {
}

type TL_privacyKeyForwards struct {
}

type TL_inputPrivacyKeyProfilePhoto struct {
}

type TL_privacyKeyProfilePhoto struct {
}

type TL_inputPhotoFileLocation struct {
	id             int64
	access_hash    int64
	file_reference []byte
	thumb_size     string
}

type TL_inputPhotoLegacyFileLocation struct {
	id             int64
	access_hash    int64
	file_reference []byte
	volume_id      int64
	local_id       int32
	secret         int64
}

type TL_inputPeerPhotoFileLocation struct {
	flags    int32
	big      bool // (bit flags.0)
	peer     TL   // InputPeer
	photo_id int64
}

type TL_inputStickerSetThumb struct {
	stickerset    TL // InputStickerSet
	thumb_version int32
}

type TL_folder struct {
	flags                       int32
	autofill_new_broadcasts     bool // (bit flags.0)
	autofill_public_groups      bool // (bit flags.1)
	autofill_new_correspondents bool // (bit flags.2)
	id                          int32
	title                       string
	photo                       TL // (bit flags.3) | ChatPhoto
}

type TL_dialogFolder struct {
	flags                         int32
	pinned                        bool // (bit flags.2)
	folder                        TL   // Folder
	peer                          TL   // Peer
	top_message                   int32
	unread_muted_peers_count      int32
	unread_unmuted_peers_count    int32
	unread_muted_messages_count   int32
	unread_unmuted_messages_count int32
}

type TL_inputDialogPeerFolder struct {
	folder_id int32
}

type TL_dialogPeerFolder struct {
	folder_id int32
}

type TL_inputFolderPeer struct {
	peer      TL // InputPeer
	folder_id int32
}

type TL_folderPeer struct {
	peer      TL // Peer
	folder_id int32
}

type TL_updateFolderPeers struct {
	folder_peers []TL // FolderPeer
	pts          int32
	pts_count    int32
}

type TL_inputUserFromMessage struct {
	peer    TL // InputPeer
	msg_id  int32
	user_id int64
}

type TL_inputChannelFromMessage struct {
	peer       TL // InputPeer
	msg_id     int32
	channel_id int64
}

type TL_inputPeerUserFromMessage struct {
	peer    TL // InputPeer
	msg_id  int32
	user_id int64
}

type TL_inputPeerChannelFromMessage struct {
	peer       TL // InputPeer
	msg_id     int32
	channel_id int64
}

type TL_inputPrivacyKeyPhoneNumber struct {
}

type TL_privacyKeyPhoneNumber struct {
}

type TL_topPeerCategoryForwardUsers struct {
}

type TL_topPeerCategoryForwardChats struct {
}

type TL_channelAdminLogEventActionChangeLinkedChat struct {
	prev_value int64
	new_value  int64
}

type TL_messages_searchCounter struct {
	flags   int32
	inexact bool // (bit flags.1)
	filter  TL   // MessagesFilter
	count   int32
}

type TL_keyboardButtonUrlAuth struct {
	flags     int32
	text      string
	fwd_text  string // (bit flags.0)
	url       string
	button_id int32
}

type TL_inputKeyboardButtonUrlAuth struct {
	flags                int32
	request_write_access bool // (bit flags.0)
	text                 string
	fwd_text             string // (bit flags.1)
	url                  string
	bot                  TL // InputUser
}

type TL_urlAuthResultRequest struct {
	flags                int32
	request_write_access bool // (bit flags.0)
	bot                  TL   // User
	domain               string
}

type TL_urlAuthResultAccepted struct {
	url string
}

type TL_urlAuthResultDefault struct {
}

type TL_inputPrivacyValueAllowChatParticipants struct {
	chats []int64
}

type TL_inputPrivacyValueDisallowChatParticipants struct {
	chats []int64
}

type TL_privacyValueAllowChatParticipants struct {
	chats []int64
}

type TL_privacyValueDisallowChatParticipants struct {
	chats []int64
}

type TL_messageEntityUnderline struct {
	offset int32
	length int32
}

type TL_messageEntityStrike struct {
	offset int32
	length int32
}

type TL_updatePeerSettings struct {
	peer     TL // Peer
	settings TL // PeerSettings
}

type TL_channelLocationEmpty struct {
}

type TL_channelLocation struct {
	geo_point TL // GeoPoint
	address   string
}

type TL_peerLocated struct {
	peer     TL // Peer
	expires  int32
	distance int32
}

type TL_updatePeerLocated struct {
	peers []TL // PeerLocated
}

type TL_channelAdminLogEventActionChangeLocation struct {
	prev_value TL // ChannelLocation
	new_value  TL // ChannelLocation
}

type TL_inputReportReasonGeoIrrelevant struct {
}

type TL_channelAdminLogEventActionToggleSlowMode struct {
	prev_value int32
	new_value  int32
}

type TL_auth_authorizationSignUpRequired struct {
	flags            int32
	terms_of_service TL // (bit flags.0) | help_TermsOfService
}

type TL_payments_paymentVerificationNeeded struct {
	url string
}

type TL_inputStickerSetAnimatedEmoji struct {
}

type TL_updateNewScheduledMessage struct {
	message TL // Message
}

type TL_updateDeleteScheduledMessages struct {
	peer     TL // Peer
	messages []int32
}

type TL_restrictionReason struct {
	platform string
	reason   string
	text     string
}

type TL_inputTheme struct {
	id          int64
	access_hash int64
}

type TL_inputThemeSlug struct {
	slug string
}

type TL_theme struct {
	flags          int32
	creator        bool // (bit flags.0)
	_default       bool // (bit flags.1)
	for_chat       bool // (bit flags.5)
	id             int64
	access_hash    int64
	slug           string
	title          string
	document       TL     // (bit flags.2) | Document
	settings       []TL   // (bit flags.3) | ThemeSettings
	emoticon       string // (bit flags.6)
	installs_count int32  // (bit flags.4)
}

type TL_account_themesNotModified struct {
}

type TL_account_themes struct {
	hash   int64
	themes []TL // Theme
}

type TL_updateTheme struct {
	theme TL // Theme
}

type TL_inputPrivacyKeyAddedByPhone struct {
}

type TL_privacyKeyAddedByPhone struct {
}

type TL_updateGeoLiveViewed struct {
	peer   TL // Peer
	msg_id int32
}

type TL_updateLoginToken struct {
}

type TL_auth_loginToken struct {
	expires int32
	token   []byte
}

type TL_auth_loginTokenMigrateTo struct {
	dc_id int32
	token []byte
}

type TL_auth_loginTokenSuccess struct {
	authorization TL // auth_Authorization
}

type TL_account_contentSettings struct {
	flags                int32
	sensitive_enabled    bool // (bit flags.0)
	sensitive_can_change bool // (bit flags.1)
}

type TL_messages_inactiveChats struct {
	dates []int32
	chats []TL // Chat
	users []TL // User
}

type TL_baseThemeClassic struct {
}

type TL_baseThemeDay struct {
}

type TL_baseThemeNight struct {
}

type TL_baseThemeTinted struct {
}

type TL_baseThemeArctic struct {
}

type TL_inputWallPaperNoFile struct {
	id int64
}

type TL_wallPaperNoFile struct {
	id       int64
	flags    int32
	_default bool // (bit flags.1)
	dark     bool // (bit flags.4)
	settings TL   // (bit flags.2) | WallPaperSettings
}

type TL_inputThemeSettings struct {
	flags                   int32
	message_colors_animated bool // (bit flags.2)
	base_theme              TL   // BaseTheme
	accent_color            int32
	outbox_accent_color     int32   // (bit flags.3)
	message_colors          []int32 // (bit flags.0)
	wallpaper               TL      // (bit flags.1) | InputWallPaper
	wallpaper_settings      TL      // (bit flags.1) | WallPaperSettings
}

type TL_themeSettings struct {
	flags                   int32
	message_colors_animated bool // (bit flags.2)
	base_theme              TL   // BaseTheme
	accent_color            int32
	outbox_accent_color     int32   // (bit flags.3)
	message_colors          []int32 // (bit flags.0)
	wallpaper               TL      // (bit flags.1) | WallPaper
}

type TL_webPageAttributeTheme struct {
	flags     int32
	documents []TL // (bit flags.0) | Document
	settings  TL   // (bit flags.1) | ThemeSettings
}

type TL_updateMessagePollVote struct {
	poll_id int64
	peer    TL   // Peer
	options []TL // bytes
	qts     int32
}

type TL_messages_votesList struct {
	flags       int32
	count       int32
	votes       []TL   // MessagePeerVote
	chats       []TL   // Chat
	users       []TL   // User
	next_offset string // (bit flags.0)
}

type TL_keyboardButtonRequestPoll struct {
	flags int32
	quiz  TL // (bit flags.0) | Bool
	text  string
}

type TL_messageEntityBankCard struct {
	offset int32
	length int32
}

type TL_bankCardOpenUrl struct {
	url  string
	name string
}

type TL_payments_bankCardData struct {
	title     string
	open_urls []TL // BankCardOpenUrl
}

type TL_peerSelfLocated struct {
	expires int32
}

type TL_dialogFilter struct {
	flags            int32
	contacts         bool // (bit flags.0)
	non_contacts     bool // (bit flags.1)
	groups           bool // (bit flags.2)
	broadcasts       bool // (bit flags.3)
	bots             bool // (bit flags.4)
	exclude_muted    bool // (bit flags.11)
	exclude_read     bool // (bit flags.12)
	exclude_archived bool // (bit flags.13)
	id               int32
	title            string
	emoticon         string // (bit flags.25)
	pinned_peers     []TL   // InputPeer
	include_peers    []TL   // InputPeer
	exclude_peers    []TL   // InputPeer
}

type TL_dialogFilterSuggested struct {
	filter      TL // DialogFilter
	description string
}

type TL_updateDialogFilter struct {
	flags  int32
	id     int32
	filter TL // (bit flags.0) | DialogFilter
}

type TL_updateDialogFilterOrder struct {
	order []int32
}

type TL_updateDialogFilters struct {
}

type TL_statsDateRangeDays struct {
	min_date int32
	max_date int32
}

type TL_statsAbsValueAndPrev struct {
	current  float64
	previous float64
}

type TL_statsPercentValue struct {
	part  float64
	total float64
}

type TL_statsGraphAsync struct {
	token string
}

type TL_statsGraphError struct {
	error string
}

type TL_statsGraph struct {
	flags      int32
	json       TL     // DataJSON
	zoom_token string // (bit flags.0)
}

type TL_stats_broadcastStats struct {
	period                           TL   // StatsDateRangeDays
	followers                        TL   // StatsAbsValueAndPrev
	views_per_post                   TL   // StatsAbsValueAndPrev
	shares_per_post                  TL   // StatsAbsValueAndPrev
	reactions_per_post               TL   // StatsAbsValueAndPrev
	views_per_story                  TL   // StatsAbsValueAndPrev
	shares_per_story                 TL   // StatsAbsValueAndPrev
	reactions_per_story              TL   // StatsAbsValueAndPrev
	enabled_notifications            TL   // StatsPercentValue
	growth_graph                     TL   // StatsGraph
	followers_graph                  TL   // StatsGraph
	mute_graph                       TL   // StatsGraph
	top_hours_graph                  TL   // StatsGraph
	interactions_graph               TL   // StatsGraph
	iv_interactions_graph            TL   // StatsGraph
	views_by_source_graph            TL   // StatsGraph
	new_followers_by_source_graph    TL   // StatsGraph
	languages_graph                  TL   // StatsGraph
	reactions_by_emotion_graph       TL   // StatsGraph
	story_interactions_graph         TL   // StatsGraph
	story_reactions_by_emotion_graph TL   // StatsGraph
	recent_posts_interactions        []TL // PostInteractionCounters
}

type TL_inputMediaDice struct {
	emoticon string
}

type TL_messageMediaDice struct {
	value    int32
	emoticon string
}

type TL_inputStickerSetDice struct {
	emoticon string
}

type TL_help_promoDataEmpty struct {
	expires int32
}

type TL_help_promoData struct {
	flags       int32
	proxy       bool // (bit flags.0)
	expires     int32
	peer        TL     // Peer
	chats       []TL   // Chat
	users       []TL   // User
	psa_type    string // (bit flags.1)
	psa_message string // (bit flags.2)
}

type TL_videoSize struct {
	flags          int32
	_type          string
	w              int32
	h              int32
	size           int32
	video_start_ts float64 // (bit flags.0)
}

type TL_updatePhoneCallSignalingData struct {
	phone_call_id int64
	data          []byte
}

type TL_chatInvitePeek struct {
	chat    TL // Chat
	expires int32
}

type TL_statsGroupTopPoster struct {
	user_id   int64
	messages  int32
	avg_chars int32
}

type TL_statsGroupTopAdmin struct {
	user_id int64
	deleted int32
	kicked  int32
	banned  int32
}

type TL_statsGroupTopInviter struct {
	user_id     int64
	invitations int32
}

type TL_stats_megagroupStats struct {
	period                      TL   // StatsDateRangeDays
	members                     TL   // StatsAbsValueAndPrev
	messages                    TL   // StatsAbsValueAndPrev
	viewers                     TL   // StatsAbsValueAndPrev
	posters                     TL   // StatsAbsValueAndPrev
	growth_graph                TL   // StatsGraph
	members_graph               TL   // StatsGraph
	new_members_by_source_graph TL   // StatsGraph
	languages_graph             TL   // StatsGraph
	messages_graph              TL   // StatsGraph
	actions_graph               TL   // StatsGraph
	top_hours_graph             TL   // StatsGraph
	weekdays_graph              TL   // StatsGraph
	top_posters                 []TL // StatsGroupTopPoster
	top_admins                  []TL // StatsGroupTopAdmin
	top_inviters                []TL // StatsGroupTopInviter
	users                       []TL // User
}

type TL_globalPrivacySettings struct {
	flags                                 int32
	archive_and_mute_new_noncontact_peers bool // (bit flags.0)
	keep_archived_unmuted                 bool // (bit flags.1)
	keep_archived_folders                 bool // (bit flags.2)
}

type TL_phoneConnectionWebrtc struct {
	flags    int32
	turn     bool // (bit flags.0)
	stun     bool // (bit flags.1)
	id       int64
	ip       string
	ipv6     string
	port     int32
	username string
	password string
}

type TL_help_countryCode struct {
	flags        int32
	country_code string
	prefixes     []string // (bit flags.0)
	patterns     []string // (bit flags.1)
}

type TL_help_country struct {
	flags         int32
	hidden        bool // (bit flags.0)
	iso2          string
	default_name  string
	name          string // (bit flags.1)
	country_codes []TL   // help_CountryCode
}

type TL_help_countriesListNotModified struct {
}

type TL_help_countriesList struct {
	countries []TL // help_Country
	hash      int32
}

type TL_messageViews struct {
	flags    int32
	views    int32 // (bit flags.0)
	forwards int32 // (bit flags.1)
	replies  TL    // (bit flags.2) | MessageReplies
}

type TL_updateChannelMessageForwards struct {
	channel_id int64
	id         int32
	forwards   int32
}

type TL_photoSizeProgressive struct {
	_type string
	w     int32
	h     int32
	sizes []int32
}

type TL_messages_messageViews struct {
	views []TL // MessageViews
	chats []TL // Chat
	users []TL // User
}

type TL_updateReadChannelDiscussionInbox struct {
	flags          int32
	channel_id     int64
	top_msg_id     int32
	read_max_id    int32
	broadcast_id   int64 // (bit flags.0)
	broadcast_post int32 // (bit flags.0)
}

type TL_updateReadChannelDiscussionOutbox struct {
	channel_id  int64
	top_msg_id  int32
	read_max_id int32
}

type TL_messages_discussionMessage struct {
	flags              int32
	messages           []TL  // Message
	max_id             int32 // (bit flags.0)
	read_inbox_max_id  int32 // (bit flags.1)
	read_outbox_max_id int32 // (bit flags.2)
	unread_count       int32
	chats              []TL // Chat
	users              []TL // User
}

type TL_messageReplyHeader struct {
	flags              int32
	reply_to_scheduled bool   // (bit flags.2)
	forum_topic        bool   // (bit flags.3)
	quote              bool   // (bit flags.9)
	reply_to_msg_id    int32  // (bit flags.4)
	reply_to_peer_id   TL     // (bit flags.0) | Peer
	reply_from         TL     // (bit flags.5) | MessageFwdHeader
	reply_media        TL     // (bit flags.8) | MessageMedia
	reply_to_top_id    int32  // (bit flags.1)
	quote_text         string // (bit flags.6)
	quote_entities     []TL   // (bit flags.7) | MessageEntity
	quote_offset       int32  // (bit flags.10)
}

type TL_messageReplies struct {
	flags           int32
	comments        bool // (bit flags.0)
	replies         int32
	replies_pts     int32
	recent_repliers []TL  // (bit flags.1) | Peer
	channel_id      int64 // (bit flags.0)
	max_id          int32 // (bit flags.2)
	read_max_id     int32 // (bit flags.3)
}

type TL_updatePeerBlocked struct {
	flags                   int32
	blocked                 bool // (bit flags.0)
	blocked_my_stories_from bool // (bit flags.1)
	peer_id                 TL   // Peer
}

type TL_peerBlocked struct {
	peer_id TL // Peer
	date    int32
}

type TL_updateChannelUserTyping struct {
	flags      int32
	channel_id int64
	top_msg_id int32 // (bit flags.0)
	from_id    TL    // Peer
	action     TL    // SendMessageAction
}

type TL_inputMessageCallbackQuery struct {
	id       int32
	query_id int64
}

type TL_channelParticipantLeft struct {
	peer TL // Peer
}

type TL_channelParticipantsMentions struct {
	flags      int32
	q          string // (bit flags.0)
	top_msg_id int32  // (bit flags.1)
}

type TL_updatePinnedMessages struct {
	flags     int32
	pinned    bool // (bit flags.0)
	peer      TL   // Peer
	messages  []int32
	pts       int32
	pts_count int32
}

type TL_updatePinnedChannelMessages struct {
	flags      int32
	pinned     bool // (bit flags.0)
	channel_id int64
	messages   []int32
	pts        int32
	pts_count  int32
}

type TL_inputMessagesFilterPinned struct {
}

type TL_stats_messageStats struct {
	views_graph                TL // StatsGraph
	reactions_by_emotion_graph TL // StatsGraph
}

type TL_messageActionGeoProximityReached struct {
	from_id  TL // Peer
	to_id    TL // Peer
	distance int32
}

type TL_photoPathSize struct {
	_type string
	bytes []byte
}

type TL_speakingInGroupCallAction struct {
}

type TL_groupCallDiscarded struct {
	id          int64
	access_hash int64
	duration    int32
}

type TL_groupCall struct {
	flags                     int32
	join_muted                bool // (bit flags.1)
	can_change_join_muted     bool // (bit flags.2)
	join_date_asc             bool // (bit flags.6)
	schedule_start_subscribed bool // (bit flags.8)
	can_start_video           bool // (bit flags.9)
	record_video_active       bool // (bit flags.11)
	rtmp_stream               bool // (bit flags.12)
	listeners_hidden          bool // (bit flags.13)
	id                        int64
	access_hash               int64
	participants_count        int32
	title                     string // (bit flags.3)
	stream_dc_id              int32  // (bit flags.4)
	record_start_date         int32  // (bit flags.5)
	schedule_date             int32  // (bit flags.7)
	unmuted_video_count       int32  // (bit flags.10)
	unmuted_video_limit       int32
	version                   int32
}

type TL_inputGroupCall struct {
	id          int64
	access_hash int64
}

type TL_messageActionGroupCall struct {
	flags    int32
	call     TL    // InputGroupCall
	duration int32 // (bit flags.0)
}

type TL_messageActionInviteToGroupCall struct {
	call  TL // InputGroupCall
	users []int64
}

type TL_groupCallParticipant struct {
	flags             int32
	muted             bool // (bit flags.0)
	left              bool // (bit flags.1)
	can_self_unmute   bool // (bit flags.2)
	just_joined       bool // (bit flags.4)
	versioned         bool // (bit flags.5)
	min               bool // (bit flags.8)
	muted_by_you      bool // (bit flags.9)
	volume_by_admin   bool // (bit flags.10)
	self              bool // (bit flags.12)
	video_joined      bool // (bit flags.15)
	peer              TL   // Peer
	date              int32
	active_date       int32 // (bit flags.3)
	source            int32
	volume            int32  // (bit flags.7)
	about             string // (bit flags.11)
	raise_hand_rating int64  // (bit flags.13)
	video             TL     // (bit flags.6) | GroupCallParticipantVideo
	presentation      TL     // (bit flags.14) | GroupCallParticipantVideo
}

type TL_updateChat struct {
	chat_id int64
}

type TL_updateGroupCallParticipants struct {
	call         TL   // InputGroupCall
	participants []TL // GroupCallParticipant
	version      int32
}

type TL_updateGroupCall struct {
	chat_id int64
	call    TL // GroupCall
}

type TL_phone_groupCall struct {
	call                     TL   // GroupCall
	participants             []TL // GroupCallParticipant
	participants_next_offset string
	chats                    []TL // Chat
	users                    []TL // User
}

type TL_phone_groupParticipants struct {
	count        int32
	participants []TL // GroupCallParticipant
	next_offset  string
	chats        []TL // Chat
	users        []TL // User
	version      int32
}

type TL_inlineQueryPeerTypeSameBotPM struct {
}

type TL_inlineQueryPeerTypePM struct {
}

type TL_inlineQueryPeerTypeChat struct {
}

type TL_inlineQueryPeerTypeMegagroup struct {
}

type TL_inlineQueryPeerTypeBroadcast struct {
}

type TL_channelAdminLogEventActionStartGroupCall struct {
	call TL // InputGroupCall
}

type TL_channelAdminLogEventActionDiscardGroupCall struct {
	call TL // InputGroupCall
}

type TL_channelAdminLogEventActionParticipantMute struct {
	participant TL // GroupCallParticipant
}

type TL_channelAdminLogEventActionParticipantUnmute struct {
	participant TL // GroupCallParticipant
}

type TL_channelAdminLogEventActionToggleGroupCallSetting struct {
	join_muted TL // Bool
}

type TL_inputPaymentCredentialsGooglePay struct {
	payment_token TL // DataJSON
}

type TL_messages_historyImport struct {
	id int64
}

type TL_sendMessageHistoryImportAction struct {
	progress int32
}

type TL_messages_historyImportParsed struct {
	flags int32
	pm    bool   // (bit flags.0)
	group bool   // (bit flags.1)
	title string // (bit flags.2)
}

type TL_inputReportReasonFake struct {
}

type TL_messages_affectedFoundMessages struct {
	pts       int32
	pts_count int32
	offset    int32
	messages  []int32
}

type TL_messageActionSetMessagesTTL struct {
	flags             int32
	period            int32
	auto_setting_from int64 // (bit flags.0)
}

type TL_updatePeerHistoryTTL struct {
	flags      int32
	peer       TL    // Peer
	ttl_period int32 // (bit flags.0)
}

type TL_updateChatParticipant struct {
	flags            int32
	chat_id          int64
	date             int32
	actor_id         int64
	user_id          int64
	prev_participant TL // (bit flags.0) | ChatParticipant
	new_participant  TL // (bit flags.1) | ChatParticipant
	invite           TL // (bit flags.2) | ExportedChatInvite
	qts              int32
}

type TL_updateChannelParticipant struct {
	flags            int32
	via_chatlist     bool // (bit flags.3)
	channel_id       int64
	date             int32
	actor_id         int64
	user_id          int64
	prev_participant TL // (bit flags.0) | ChannelParticipant
	new_participant  TL // (bit flags.1) | ChannelParticipant
	invite           TL // (bit flags.2) | ExportedChatInvite
	qts              int32
}

type TL_updateBotStopped struct {
	user_id int64
	date    int32
	stopped TL // Bool
	qts     int32
}

type TL_chatInviteImporter struct {
	flags        int32
	requested    bool // (bit flags.0)
	via_chatlist bool // (bit flags.3)
	user_id      int64
	date         int32
	about        string // (bit flags.2)
	approved_by  int64  // (bit flags.1)
}

type TL_messages_exportedChatInvites struct {
	count   int32
	invites []TL // ExportedChatInvite
	users   []TL // User
}

type TL_messages_exportedChatInvite struct {
	invite TL   // ExportedChatInvite
	users  []TL // User
}

type TL_messages_exportedChatInviteReplaced struct {
	invite     TL   // ExportedChatInvite
	new_invite TL   // ExportedChatInvite
	users      []TL // User
}

type TL_messages_chatInviteImporters struct {
	count     int32
	importers []TL // ChatInviteImporter
	users     []TL // User
}

type TL_chatAdminWithInvites struct {
	admin_id              int64
	invites_count         int32
	revoked_invites_count int32
}

type TL_messages_chatAdminsWithInvites struct {
	admins []TL // ChatAdminWithInvites
	users  []TL // User
}

type TL_channelAdminLogEventActionParticipantJoinByInvite struct {
	flags        int32
	via_chatlist bool // (bit flags.0)
	invite       TL   // ExportedChatInvite
}

type TL_channelAdminLogEventActionExportedInviteDelete struct {
	invite TL // ExportedChatInvite
}

type TL_channelAdminLogEventActionExportedInviteRevoke struct {
	invite TL // ExportedChatInvite
}

type TL_channelAdminLogEventActionExportedInviteEdit struct {
	prev_invite TL // ExportedChatInvite
	new_invite  TL // ExportedChatInvite
}

type TL_channelAdminLogEventActionParticipantVolume struct {
	participant TL // GroupCallParticipant
}

type TL_channelAdminLogEventActionChangeHistoryTTL struct {
	prev_value int32
	new_value  int32
}

type TL_messages_checkedHistoryImportPeer struct {
	confirm_text string
}

type TL_inputGroupCallStream struct {
	flags         int32
	call          TL // InputGroupCall
	time_ms       int64
	scale         int32
	video_channel int32 // (bit flags.0)
	video_quality int32 // (bit flags.0)
}

type TL_phone_joinAsPeers struct {
	peers []TL // Peer
	chats []TL // Chat
	users []TL // User
}

type TL_phone_exportedGroupCallInvite struct {
	link string
}

type TL_inputBotInlineMessageMediaInvoice struct {
	flags         int32
	title         string
	description   string
	photo         TL // (bit flags.0) | InputWebDocument
	invoice       TL // Invoice
	payload       []byte
	provider      string
	provider_data TL // DataJSON
	reply_markup  TL // (bit flags.2) | ReplyMarkup
}

type TL_botInlineMessageMediaInvoice struct {
	flags                      int32
	shipping_address_requested bool // (bit flags.1)
	test                       bool // (bit flags.3)
	title                      string
	description                string
	photo                      TL // (bit flags.0) | WebDocument
	currency                   string
	total_amount               int64
	reply_markup               TL // (bit flags.2) | ReplyMarkup
}

type TL_messageActionGroupCallScheduled struct {
	call          TL // InputGroupCall
	schedule_date int32
}

type TL_groupCallParticipantVideoSourceGroup struct {
	semantics string
	sources   []int32
}

type TL_groupCallParticipantVideo struct {
	flags         int32
	paused        bool // (bit flags.0)
	endpoint      string
	source_groups []TL  // GroupCallParticipantVideoSourceGroup
	audio_source  int32 // (bit flags.1)
}

type TL_updateGroupCallConnection struct {
	flags        int32
	presentation bool // (bit flags.0)
	params       TL   // DataJSON
}

type TL_stickers_suggestedShortName struct {
	short_name string
}

type TL_botCommandScopeDefault struct {
}

type TL_botCommandScopeUsers struct {
}

type TL_botCommandScopeChats struct {
}

type TL_botCommandScopeChatAdmins struct {
}

type TL_botCommandScopePeer struct {
	peer TL // InputPeer
}

type TL_botCommandScopePeerAdmins struct {
	peer TL // InputPeer
}

type TL_botCommandScopePeerUser struct {
	peer    TL // InputPeer
	user_id TL // InputUser
}

type TL_account_resetPasswordFailedWait struct {
	retry_date int32
}

type TL_account_resetPasswordRequestedWait struct {
	until_date int32
}

type TL_account_resetPasswordOk struct {
}

type TL_updateBotCommands struct {
	peer     TL // Peer
	bot_id   int64
	commands []TL // BotCommand
}

type TL_messageActionSetChatTheme struct {
	emoticon string
}

type TL_sendMessageChooseStickerAction struct {
}

type TL_sponsoredMessage struct {
	flags            int32
	recommended      bool // (bit flags.5)
	show_peer_photo  bool // (bit flags.6)
	random_id        []byte
	from_id          TL     // (bit flags.3) | Peer
	chat_invite      TL     // (bit flags.4) | ChatInvite
	chat_invite_hash string // (bit flags.4)
	channel_post     int32  // (bit flags.2)
	start_param      string // (bit flags.0)
	webpage          TL     // (bit flags.9) | SponsoredWebPage
	app              TL     // (bit flags.10) | BotApp
	message          string
	entities         []TL   // (bit flags.1) | MessageEntity
	button_text      string // (bit flags.11)
	sponsor_info     string // (bit flags.7)
	additional_info  string // (bit flags.8)
}

type TL_messages_sponsoredMessages struct {
	flags         int32
	posts_between int32 // (bit flags.0)
	messages      []TL  // SponsoredMessage
	chats         []TL  // Chat
	users         []TL  // User
}

type TL_inputStickerSetAnimatedEmojiAnimations struct {
}

type TL_sendMessageEmojiInteraction struct {
	emoticon    string
	msg_id      int32
	interaction TL // DataJSON
}

type TL_sendMessageEmojiInteractionSeen struct {
	emoticon string
}

type TL_inputBotInlineMessageID64 struct {
	dc_id       int32
	owner_id    int64
	id          int32
	access_hash int64
}

type TL_searchResultsCalendarPeriod struct {
	date       int32
	min_msg_id int32
	max_msg_id int32
	count      int32
}

type TL_messages_searchResultsCalendar struct {
	flags            int32
	inexact          bool // (bit flags.0)
	count            int32
	min_date         int32
	min_msg_id       int32
	offset_id_offset int32 // (bit flags.1)
	periods          []TL  // SearchResultsCalendarPeriod
	messages         []TL  // Message
	chats            []TL  // Chat
	users            []TL  // User
}

type TL_searchResultPosition struct {
	msg_id int32
	date   int32
	offset int32
}

type TL_messages_searchResultsPositions struct {
	count     int32
	positions []TL // SearchResultsPosition
}

type TL_messageActionChatJoinedByRequest struct {
}

type TL_updatePendingJoinRequests struct {
	peer              TL // Peer
	requests_pending  int32
	recent_requesters []int64
}

type TL_updateBotChatInviteRequester struct {
	peer    TL // Peer
	date    int32
	user_id int64
	about   string
	invite  TL // ExportedChatInvite
	qts     int32
}

type TL_channelAdminLogEventActionParticipantJoinByRequest struct {
	invite      TL // ExportedChatInvite
	approved_by int64
}

type TL_inputKeyboardButtonUserProfile struct {
	text    string
	user_id TL // InputUser
}

type TL_keyboardButtonUserProfile struct {
	text    string
	user_id int64
}

type TL_channels_sendAsPeers struct {
	peers []TL // SendAsPeer
	chats []TL // Chat
	users []TL // User
}

type TL_channelAdminLogEventActionToggleNoForwards struct {
	new_value TL // Bool
}

type TL_messages_stickerSetNotModified struct {
}

type TL_users_userFull struct {
	full_user TL   // UserFull
	chats     []TL // Chat
	users     []TL // User
}

type TL_messages_peerSettings struct {
	settings TL   // PeerSettings
	chats    []TL // Chat
	users    []TL // User
}

type TL_channelAdminLogEventActionSendMessage struct {
	message TL // Message
}

type TL_auth_codeTypeMissedCall struct {
}

type TL_auth_sentCodeTypeMissedCall struct {
	prefix string
	length int32
}

type TL_auth_loggedOut struct {
	flags             int32
	future_auth_token []byte // (bit flags.0)
}

type TL_updateMessageReactions struct {
	flags      int32
	peer       TL // Peer
	msg_id     int32
	top_msg_id int32 // (bit flags.0)
	reactions  TL    // MessageReactions
}

type TL_reactionCount struct {
	flags        int32
	chosen_order int32 // (bit flags.0)
	reaction     TL    // Reaction
	count        int32
}

type TL_messageReactions struct {
	flags            int32
	min              bool // (bit flags.0)
	can_see_list     bool // (bit flags.2)
	results          []TL // ReactionCount
	recent_reactions []TL // (bit flags.1) | MessagePeerReaction
}

type TL_messages_messageReactionsList struct {
	flags       int32
	count       int32
	reactions   []TL   // MessagePeerReaction
	chats       []TL   // Chat
	users       []TL   // User
	next_offset string // (bit flags.0)
}

type TL_availableReaction struct {
	flags              int32
	inactive           bool // (bit flags.0)
	premium            bool // (bit flags.2)
	reaction           string
	title              string
	static_icon        TL // Document
	appear_animation   TL // Document
	select_animation   TL // Document
	activate_animation TL // Document
	effect_animation   TL // Document
	around_animation   TL // (bit flags.1) | Document
	center_icon        TL // (bit flags.1) | Document
}

type TL_messages_availableReactionsNotModified struct {
}

type TL_messages_availableReactions struct {
	hash      int32
	reactions []TL // AvailableReaction
}

type TL_messageEntitySpoiler struct {
	offset int32
	length int32
}

type TL_channelAdminLogEventActionChangeAvailableReactions struct {
	prev_value TL // ChatReactions
	new_value  TL // ChatReactions
}

type TL_messagePeerReaction struct {
	flags    int32
	big      bool // (bit flags.0)
	unread   bool // (bit flags.1)
	my       bool // (bit flags.2)
	peer_id  TL   // Peer
	date     int32
	reaction TL // Reaction
}

type TL_groupCallStreamChannel struct {
	channel           int32
	scale             int32
	last_timestamp_ms int64
}

type TL_phone_groupCallStreamChannels struct {
	channels []TL // GroupCallStreamChannel
}

type TL_inputReportReasonIllegalDrugs struct {
}

type TL_inputReportReasonPersonalDetails struct {
}

type TL_phone_groupCallStreamRtmpUrl struct {
	url string
	key string
}

type TL_attachMenuBotIconColor struct {
	name  string
	color int32
}

type TL_attachMenuBotIcon struct {
	flags  int32
	name   string
	icon   TL   // Document
	colors []TL // (bit flags.0) | AttachMenuBotIconColor
}

type TL_attachMenuBot struct {
	flags                       int32
	inactive                    bool // (bit flags.0)
	has_settings                bool // (bit flags.1)
	request_write_access        bool // (bit flags.2)
	show_in_attach_menu         bool // (bit flags.3)
	show_in_side_menu           bool // (bit flags.4)
	side_menu_disclaimer_needed bool // (bit flags.5)
	bot_id                      int64
	short_name                  string
	peer_types                  []TL // (bit flags.3) | AttachMenuPeerType
	icons                       []TL // AttachMenuBotIcon
}

type TL_attachMenuBotsNotModified struct {
}

type TL_attachMenuBots struct {
	hash  int64
	bots  []TL // AttachMenuBot
	users []TL // User
}

type TL_attachMenuBotsBot struct {
	bot   TL   // AttachMenuBot
	users []TL // User
}

type TL_updateAttachMenuBots struct {
}

type TL_webViewResultUrl struct {
	query_id int64
	url      string
}

type TL_simpleWebViewResultUrl struct {
	url string
}

type TL_webViewMessageSent struct {
	flags  int32
	msg_id TL // (bit flags.0) | InputBotInlineMessageID
}

type TL_updateWebViewResultSent struct {
	query_id int64
}

type TL_keyboardButtonWebView struct {
	text string
	url  string
}

type TL_keyboardButtonSimpleWebView struct {
	text string
	url  string
}

type TL_messageActionWebViewDataSentMe struct {
	text string
	data string
}

type TL_messageActionWebViewDataSent struct {
	text string
}

type TL_updateBotMenuButton struct {
	bot_id int64
	button TL // BotMenuButton
}

type TL_botMenuButtonDefault struct {
}

type TL_botMenuButtonCommands struct {
}

type TL_botMenuButton struct {
	text string
	url  string
}

type TL_account_savedRingtonesNotModified struct {
}

type TL_account_savedRingtones struct {
	hash      int64
	ringtones []TL // Document
}

type TL_updateSavedRingtones struct {
}

type TL_notificationSoundDefault struct {
}

type TL_notificationSoundNone struct {
}

type TL_notificationSoundLocal struct {
	title string
	data  string
}

type TL_notificationSoundRingtone struct {
	id int64
}

type TL_account_savedRingtone struct {
}

type TL_account_savedRingtoneConverted struct {
	document TL // Document
}

type TL_attachMenuPeerTypeSameBotPM struct {
}

type TL_attachMenuPeerTypeBotPM struct {
}

type TL_attachMenuPeerTypePM struct {
}

type TL_attachMenuPeerTypeChat struct {
}

type TL_attachMenuPeerTypeBroadcast struct {
}

type TL_chatInvitePublicJoinRequests struct {
}

type TL_inputInvoiceMessage struct {
	peer   TL // InputPeer
	msg_id int32
}

type TL_inputInvoiceSlug struct {
	slug string
}

type TL_payments_exportedInvoice struct {
	url string
}

type TL_updateTranscribedAudio struct {
	flags            int32
	pending          bool // (bit flags.0)
	peer             TL   // Peer
	msg_id           int32
	transcription_id int64
	text             string
}

type TL_messages_transcribedAudio struct {
	flags                    int32
	pending                  bool // (bit flags.0)
	transcription_id         int64
	text                     string
	trial_remains_num        int32 // (bit flags.1)
	trial_remains_until_date int32 // (bit flags.1)
}

type TL_dialogFilterDefault struct {
}

type TL_help_premiumPromo struct {
	status_text     string
	status_entities []TL // MessageEntity
	video_sections  []string
	videos          []TL // Document
	period_options  []TL // PremiumSubscriptionOption
	users           []TL // User
}

type TL_messageEntityCustomEmoji struct {
	offset      int32
	length      int32
	document_id int64
}

type TL_documentAttributeCustomEmoji struct {
	flags      int32
	free       bool // (bit flags.0)
	text_color bool // (bit flags.1)
	alt        string
	stickerset TL // InputStickerSet
}

type TL_stickerSetFullCovered struct {
	set       TL   // StickerSet
	packs     []TL // StickerPack
	keywords  []TL // StickerKeyword
	documents []TL // Document
}

type TL_inputStorePaymentPremiumSubscription struct {
	flags   int32
	restore bool // (bit flags.0)
	upgrade bool // (bit flags.1)
}

type TL_inputStorePaymentGiftPremium struct {
	user_id  TL // InputUser
	currency string
	amount   int64
}

type TL_messageActionGiftPremium struct {
	flags           int32
	currency        string
	amount          int64
	months          int32
	crypto_currency string // (bit flags.0)
	crypto_amount   int64  // (bit flags.0)
}

type TL_premiumGiftOption struct {
	flags         int32
	months        int32
	currency      string
	amount        int64
	bot_url       string
	store_product string // (bit flags.0)
}

type TL_inputStickerSetPremiumGifts struct {
}

type TL_updateReadFeaturedEmojiStickers struct {
}

type TL_inputPrivacyKeyVoiceMessages struct {
}

type TL_privacyKeyVoiceMessages struct {
}

type TL_paymentFormMethod struct {
	url   string
	title string
}

type TL_inputWebFileAudioAlbumThumbLocation struct {
	flags     int32
	small     bool   // (bit flags.2)
	document  TL     // (bit flags.0) | InputDocument
	title     string // (bit flags.1)
	performer string // (bit flags.1)
}

type TL_emojiStatusEmpty struct {
}

type TL_emojiStatus struct {
	document_id int64
}

type TL_emojiStatusUntil struct {
	document_id int64
	until       int32
}

type TL_updateUserEmojiStatus struct {
	user_id      int64
	emoji_status TL // EmojiStatus
}

type TL_updateRecentEmojiStatuses struct {
}

type TL_account_emojiStatusesNotModified struct {
}

type TL_account_emojiStatuses struct {
	hash     int64
	statuses []TL // EmojiStatus
}

type TL_reactionEmpty struct {
}

type TL_reactionEmoji struct {
	emoticon string
}

type TL_reactionCustomEmoji struct {
	document_id int64
}

type TL_chatReactionsNone struct {
}

type TL_chatReactionsAll struct {
	flags        int32
	allow_custom bool // (bit flags.0)
}

type TL_chatReactionsSome struct {
	reactions []TL // Reaction
}

type TL_messages_reactionsNotModified struct {
}

type TL_messages_reactions struct {
	hash      int64
	reactions []TL // Reaction
}

type TL_updateRecentReactions struct {
}

type TL_updateMoveStickerSetToTop struct {
	flags      int32
	masks      bool // (bit flags.0)
	emojis     bool // (bit flags.1)
	stickerset int64
}

type TL_auth_sentCodeTypeEmailCode struct {
	flags                  int32
	apple_signin_allowed   bool // (bit flags.0)
	google_signin_allowed  bool // (bit flags.1)
	email_pattern          string
	length                 int32
	reset_available_period int32 // (bit flags.3)
	reset_pending_date     int32 // (bit flags.4)
}

type TL_auth_sentCodeTypeSetUpEmailRequired struct {
	flags                 int32
	apple_signin_allowed  bool // (bit flags.0)
	google_signin_allowed bool // (bit flags.1)
}

type TL_emailVerifyPurposeLoginSetup struct {
	phone_number    string
	phone_code_hash string
}

type TL_emailVerifyPurposeLoginChange struct {
}

type TL_emailVerifyPurposePassport struct {
}

type TL_emailVerificationCode struct {
	code string
}

type TL_emailVerificationGoogle struct {
	token string
}

type TL_emailVerificationApple struct {
	token string
}

type TL_account_emailVerified struct {
	email string
}

type TL_account_emailVerifiedLogin struct {
	email     string
	sent_code TL // auth_SentCode
}

type TL_premiumSubscriptionOption struct {
	flags                int32
	current              bool   // (bit flags.1)
	can_purchase_upgrade bool   // (bit flags.2)
	transaction          string // (bit flags.3)
	months               int32
	currency             string
	amount               int64
	bot_url              string
	store_product        string // (bit flags.0)
}

type TL_inputStickerSetEmojiGenericAnimations struct {
}

type TL_inputStickerSetEmojiDefaultStatuses struct {
}

type TL_sendAsPeer struct {
	flags            int32
	premium_required bool // (bit flags.0)
	peer             TL   // Peer
}

type TL_messageExtendedMediaPreview struct {
	flags          int32
	w              int32 // (bit flags.0)
	h              int32 // (bit flags.0)
	thumb          TL    // (bit flags.1) | PhotoSize
	video_duration int32 // (bit flags.2)
}

type TL_messageExtendedMedia struct {
	media TL // MessageMedia
}

type TL_updateMessageExtendedMedia struct {
	peer           TL // Peer
	msg_id         int32
	extended_media TL // MessageExtendedMedia
}

type TL_stickerKeyword struct {
	document_id int64
	keyword     []string
}

type TL_username struct {
	flags    int32
	editable bool // (bit flags.0)
	active   bool // (bit flags.1)
	username string
}

type TL_channelAdminLogEventActionChangeUsernames struct {
	prev_value []string
	new_value  []string
}

type TL_channelAdminLogEventActionToggleForum struct {
	new_value TL // Bool
}

type TL_channelAdminLogEventActionCreateTopic struct {
	topic TL // ForumTopic
}

type TL_channelAdminLogEventActionEditTopic struct {
	prev_topic TL // ForumTopic
	new_topic  TL // ForumTopic
}

type TL_channelAdminLogEventActionDeleteTopic struct {
	topic TL // ForumTopic
}

type TL_channelAdminLogEventActionPinTopic struct {
	flags      int32
	prev_topic TL // (bit flags.0) | ForumTopic
	new_topic  TL // (bit flags.1) | ForumTopic
}

type TL_forumTopicDeleted struct {
	id int32
}

type TL_forumTopic struct {
	flags                  int32
	my                     bool // (bit flags.1)
	closed                 bool // (bit flags.2)
	pinned                 bool // (bit flags.3)
	short                  bool // (bit flags.5)
	hidden                 bool // (bit flags.6)
	id                     int32
	date                   int32
	title                  string
	icon_color             int32
	icon_emoji_id          int64 // (bit flags.0)
	top_message            int32
	read_inbox_max_id      int32
	read_outbox_max_id     int32
	unread_count           int32
	unread_mentions_count  int32
	unread_reactions_count int32
	from_id                TL // Peer
	notify_settings        TL // PeerNotifySettings
	draft                  TL // (bit flags.4) | DraftMessage
}

type TL_messages_forumTopics struct {
	flags                int32
	order_by_create_date bool // (bit flags.0)
	count                int32
	topics               []TL // ForumTopic
	messages             []TL // Message
	chats                []TL // Chat
	users                []TL // User
	pts                  int32
}

type TL_messageActionTopicCreate struct {
	flags         int32
	title         string
	icon_color    int32
	icon_emoji_id int64 // (bit flags.0)
}

type TL_messageActionTopicEdit struct {
	flags         int32
	title         string // (bit flags.0)
	icon_emoji_id int64  // (bit flags.1)
	closed        TL     // (bit flags.2) | Bool
	hidden        TL     // (bit flags.3) | Bool
}

type TL_updateChannelPinnedTopic struct {
	flags      int32
	pinned     bool // (bit flags.0)
	channel_id int64
	topic_id   int32
}

type TL_inputNotifyForumTopic struct {
	peer       TL // InputPeer
	top_msg_id int32
}

type TL_notifyForumTopic struct {
	peer       TL // Peer
	top_msg_id int32
}

type TL_inputStickerSetEmojiDefaultTopicIcons struct {
}

type TL_messages_sponsoredMessagesEmpty struct {
}

type TL_updateChannelPinnedTopics struct {
	flags      int32
	channel_id int64
	order      []int32 // (bit flags.0)
}

type TL_defaultHistoryTTL struct {
	period int32
}

type TL_auth_codeTypeFragmentSms struct {
}

type TL_auth_sentCodeTypeFragmentSms struct {
	url    string
	length int32
}

type TL_exportedContactToken struct {
	url     string
	expires int32
}

type TL_channelAdminLogEventActionToggleAntiSpam struct {
	new_value TL // Bool
}

type TL_messageActionSuggestProfilePhoto struct {
	photo TL // Photo
}

type TL_stickerSetNoCovered struct {
	set TL // StickerSet
}

type TL_updateUser struct {
	user_id int64
}

type TL_auth_sentCodeSuccess struct {
	authorization TL // auth_Authorization
}

type TL_messageActionRequestedPeer struct {
	button_id int32
	peers     []TL // Peer
}

type TL_requestPeerTypeUser struct {
	flags   int32
	bot     TL // (bit flags.0) | Bool
	premium TL // (bit flags.1) | Bool
}

type TL_requestPeerTypeChat struct {
	flags             int32
	creator           bool // (bit flags.0)
	bot_participant   bool // (bit flags.5)
	has_username      TL   // (bit flags.3) | Bool
	forum             TL   // (bit flags.4) | Bool
	user_admin_rights TL   // (bit flags.1) | ChatAdminRights
	bot_admin_rights  TL   // (bit flags.2) | ChatAdminRights
}

type TL_requestPeerTypeBroadcast struct {
	flags             int32
	creator           bool // (bit flags.0)
	has_username      TL   // (bit flags.3) | Bool
	user_admin_rights TL   // (bit flags.1) | ChatAdminRights
	bot_admin_rights  TL   // (bit flags.2) | ChatAdminRights
}

type TL_keyboardButtonRequestPeer struct {
	text         string
	button_id    int32
	peer_type    TL // RequestPeerType
	max_quantity int32
}

type TL_emojiListNotModified struct {
}

type TL_emojiList struct {
	hash        int64
	document_id []int64
}

type TL_auth_sentCodeTypeFirebaseSms struct {
	flags        int32
	nonce        []byte // (bit flags.0)
	receipt      string // (bit flags.1)
	push_timeout int32  // (bit flags.1)
	length       int32
}

type TL_emojiGroup struct {
	title         string
	icon_emoji_id int64
	emoticons     []string
}

type TL_messages_emojiGroupsNotModified struct {
}

type TL_messages_emojiGroups struct {
	hash   int32
	groups []TL // EmojiGroup
}

type TL_videoSizeEmojiMarkup struct {
	emoji_id          int64
	background_colors []int32
}

type TL_videoSizeStickerMarkup struct {
	stickerset        TL // InputStickerSet
	sticker_id        int64
	background_colors []int32
}

type TL_textWithEntities struct {
	text     string
	entities []TL // MessageEntity
}

type TL_messages_translateResult struct {
	result []TL // TextWithEntities
}

type TL_autoSaveSettings struct {
	flags          int32
	photos         bool  // (bit flags.0)
	videos         bool  // (bit flags.1)
	video_max_size int64 // (bit flags.2)
}

type TL_autoSaveException struct {
	peer     TL // Peer
	settings TL // AutoSaveSettings
}

type TL_account_autoSaveSettings struct {
	users_settings      TL   // AutoSaveSettings
	chats_settings      TL   // AutoSaveSettings
	broadcasts_settings TL   // AutoSaveSettings
	exceptions          []TL // AutoSaveException
	chats               []TL // Chat
	users               []TL // User
}

type TL_updateAutoSaveSettings struct {
}

type TL_help_appConfigNotModified struct {
}

type TL_help_appConfig struct {
	hash   int32
	config TL // JSONValue
}

type TL_inputBotAppID struct {
	id          int64
	access_hash int64
}

type TL_inputBotAppShortName struct {
	bot_id     TL // InputUser
	short_name string
}

type TL_botAppNotModified struct {
}

type TL_botApp struct {
	flags       int32
	id          int64
	access_hash int64
	short_name  string
	title       string
	description string
	photo       TL // Photo
	document    TL // (bit flags.0) | Document
	hash        int64
}

type TL_messages_botApp struct {
	flags                int32
	inactive             bool // (bit flags.0)
	request_write_access bool // (bit flags.1)
	has_settings         bool // (bit flags.2)
	app                  TL   // BotApp
}

type TL_appWebViewResultUrl struct {
	url string
}

type TL_inlineBotWebView struct {
	text string
	url  string
}

type TL_readParticipantDate struct {
	user_id int64
	date    int32
}

type TL_updateGroupInvitePrivacyForbidden struct {
	user_id int64
}

type TL_dialogFilterChatlist struct {
	flags          int32
	has_my_invites bool // (bit flags.26)
	id             int32
	title          string
	emoticon       string // (bit flags.25)
	pinned_peers   []TL   // InputPeer
	include_peers  []TL   // InputPeer
}

type TL_inputChatlistDialogFilter struct {
	filter_id int32
}

type TL_exportedChatlistInvite struct {
	flags int32
	title string
	url   string
	peers []TL // Peer
}

type TL_chatlists_exportedChatlistInvite struct {
	filter TL // DialogFilter
	invite TL // ExportedChatlistInvite
}

type TL_chatlists_exportedInvites struct {
	invites []TL // ExportedChatlistInvite
	chats   []TL // Chat
	users   []TL // User
}

type TL_chatlists_chatlistInviteAlready struct {
	filter_id     int32
	missing_peers []TL // Peer
	already_peers []TL // Peer
	chats         []TL // Chat
	users         []TL // User
}

type TL_chatlists_chatlistInvite struct {
	flags    int32
	title    string
	emoticon string // (bit flags.0)
	peers    []TL   // Peer
	chats    []TL   // Chat
	users    []TL   // User
}

type TL_chatlists_chatlistUpdates struct {
	missing_peers []TL // Peer
	chats         []TL // Chat
	users         []TL // User
}

type TL_messageActionSetChatWallPaper struct {
	flags     int32
	same      bool // (bit flags.0)
	for_both  bool // (bit flags.1)
	wallpaper TL   // WallPaper
}

type TL_bots_botInfo struct {
	name        string
	about       string
	description string
}

type TL_inlineQueryPeerTypeBotPM struct {
}

type TL_messagePeerVote struct {
	peer   TL // Peer
	option []byte
	date   int32
}

type TL_messagePeerVoteInputOption struct {
	peer TL // Peer
	date int32
}

type TL_messagePeerVoteMultiple struct {
	peer    TL   // Peer
	options []TL // bytes
	date    int32
}

type TL_inputPrivacyKeyAbout struct {
}

type TL_privacyKeyAbout struct {
}

type TL_sponsoredWebPage struct {
	flags     int32
	url       string
	site_name string
	photo     TL // (bit flags.0) | Photo
}

type TL_storyViews struct {
	flags           int32
	has_viewers     bool // (bit flags.1)
	views_count     int32
	forwards_count  int32   // (bit flags.2)
	reactions       []TL    // (bit flags.3) | ReactionCount
	reactions_count int32   // (bit flags.4)
	recent_viewers  []int64 // (bit flags.0)
}

type TL_storyItemDeleted struct {
	id int32
}

type TL_storyItemSkipped struct {
	flags         int32
	close_friends bool // (bit flags.8)
	id            int32
	date          int32
	expire_date   int32
}

type TL_storyItem struct {
	flags             int32
	pinned            bool // (bit flags.5)
	public            bool // (bit flags.7)
	close_friends     bool // (bit flags.8)
	min               bool // (bit flags.9)
	noforwards        bool // (bit flags.10)
	edited            bool // (bit flags.11)
	contacts          bool // (bit flags.12)
	selected_contacts bool // (bit flags.13)
	out               bool // (bit flags.16)
	id                int32
	date              int32
	fwd_from          TL // (bit flags.17) | StoryFwdHeader
	expire_date       int32
	caption           string // (bit flags.0)
	entities          []TL   // (bit flags.1) | MessageEntity
	media             TL     // MessageMedia
	media_areas       []TL   // (bit flags.14) | MediaArea
	privacy           []TL   // (bit flags.2) | PrivacyRule
	views             TL     // (bit flags.3) | StoryViews
	sent_reaction     TL     // (bit flags.15) | Reaction
}

type TL_updateStory struct {
	peer  TL // Peer
	story TL // StoryItem
}

type TL_updateReadStories struct {
	peer   TL // Peer
	max_id int32
}

type TL_stories_allStoriesNotModified struct {
	flags        int32
	state        string
	stealth_mode TL // StoriesStealthMode
}

type TL_stories_allStories struct {
	flags        int32
	has_more     bool // (bit flags.0)
	count        int32
	state        string
	peer_stories []TL // PeerStories
	chats        []TL // Chat
	users        []TL // User
	stealth_mode TL   // StoriesStealthMode
}

type TL_stories_stories struct {
	count   int32
	stories []TL // StoryItem
	chats   []TL // Chat
	users   []TL // User
}

type TL_inputPrivacyValueAllowCloseFriends struct {
}

type TL_privacyValueAllowCloseFriends struct {
}

type TL_storyView struct {
	flags                   int32
	blocked                 bool // (bit flags.0)
	blocked_my_stories_from bool // (bit flags.1)
	user_id                 int64
	date                    int32
	reaction                TL // (bit flags.2) | Reaction
}

type TL_stories_storyViewsList struct {
	flags           int32
	count           int32
	views_count     int32
	forwards_count  int32
	reactions_count int32
	views           []TL   // StoryView
	chats           []TL   // Chat
	users           []TL   // User
	next_offset     string // (bit flags.0)
}

type TL_stories_storyViews struct {
	views []TL // StoryViews
	users []TL // User
}

type TL_inputReplyToMessage struct {
	flags            int32
	reply_to_msg_id  int32
	top_msg_id       int32  // (bit flags.0)
	reply_to_peer_id TL     // (bit flags.1) | InputPeer
	quote_text       string // (bit flags.2)
	quote_entities   []TL   // (bit flags.3) | MessageEntity
	quote_offset     int32  // (bit flags.4)
}

type TL_inputReplyToStory struct {
	user_id  TL // InputUser
	story_id int32
}

type TL_messageReplyStoryHeader struct {
	user_id  int64
	story_id int32
}

type TL_updateStoryID struct {
	id        int32
	random_id int64
}

type TL_exportedStoryLink struct {
	link string
}

type TL_inputMediaStory struct {
	peer TL // InputPeer
	id   int32
}

type TL_messageMediaStory struct {
	flags       int32
	via_mention bool // (bit flags.1)
	peer        TL   // Peer
	id          int32
	story       TL // (bit flags.0) | StoryItem
}

type TL_webPageAttributeStory struct {
	flags int32
	peer  TL // Peer
	id    int32
	story TL // (bit flags.0) | StoryItem
}

type TL_storiesStealthMode struct {
	flags               int32
	active_until_date   int32 // (bit flags.0)
	cooldown_until_date int32 // (bit flags.1)
}

type TL_updateStoriesStealthMode struct {
	stealth_mode TL // StoriesStealthMode
}

type TL_mediaAreaCoordinates struct {
	x        float64
	y        float64
	w        float64
	h        float64
	rotation float64
}

type TL_mediaAreaVenue struct {
	coordinates TL // MediaAreaCoordinates
	geo         TL // GeoPoint
	title       string
	address     string
	provider    string
	venue_id    string
	venue_type  string
}

type TL_inputMediaAreaVenue struct {
	coordinates TL // MediaAreaCoordinates
	query_id    int64
	result_id   string
}

type TL_mediaAreaGeoPoint struct {
	coordinates TL // MediaAreaCoordinates
	geo         TL // GeoPoint
}

type TL_updateSentStoryReaction struct {
	peer     TL // Peer
	story_id int32
	reaction TL // Reaction
}

type TL_mediaAreaSuggestedReaction struct {
	flags       int32
	dark        bool // (bit flags.0)
	flipped     bool // (bit flags.1)
	coordinates TL   // MediaAreaCoordinates
	reaction    TL   // Reaction
}

type TL_peerStories struct {
	flags       int32
	peer        TL    // Peer
	max_read_id int32 // (bit flags.0)
	stories     []TL  // StoryItem
}

type TL_stories_peerStories struct {
	stories TL   // PeerStories
	chats   []TL // Chat
	users   []TL // User
}

type TL_messages_webPage struct {
	webpage TL   // WebPage
	chats   []TL // Chat
	users   []TL // User
}

type TL_inputStorePaymentPremiumGiftCode struct {
	flags      int32
	users      []TL // InputUser
	boost_peer TL   // (bit flags.0) | InputPeer
	currency   string
	amount     int64
}

type TL_inputStorePaymentPremiumGiveaway struct {
	flags                int32
	only_new_subscribers bool     // (bit flags.0)
	winners_are_visible  bool     // (bit flags.3)
	boost_peer           TL       // InputPeer
	additional_peers     []TL     // (bit flags.1) | InputPeer
	countries_iso2       []string // (bit flags.2)
	prize_description    string   // (bit flags.4)
	random_id            int64
	until_date           int32
	currency             string
	amount               int64
}

type TL_inputInvoicePremiumGiftCode struct {
	purpose TL // InputStorePaymentPurpose
	option  TL // PremiumGiftCodeOption
}

type TL_premiumGiftCodeOption struct {
	flags          int32
	users          int32
	months         int32
	store_product  string // (bit flags.0)
	store_quantity int32  // (bit flags.1)
	currency       string
	amount         int64
}

type TL_payments_checkedGiftCode struct {
	flags           int32
	via_giveaway    bool  // (bit flags.2)
	from_id         TL    // (bit flags.4) | Peer
	giveaway_msg_id int32 // (bit flags.3)
	to_id           int64 // (bit flags.0)
	date            int32
	months          int32
	used_date       int32 // (bit flags.1)
	chats           []TL  // Chat
	users           []TL  // User
}

type TL_messageMediaGiveaway struct {
	flags                int32
	only_new_subscribers bool // (bit flags.0)
	winners_are_visible  bool // (bit flags.2)
	channels             []int64
	countries_iso2       []string // (bit flags.1)
	prize_description    string   // (bit flags.3)
	quantity             int32
	months               int32
	until_date           int32
}

type TL_messageActionGiftCode struct {
	flags           int32
	via_giveaway    bool // (bit flags.0)
	unclaimed       bool // (bit flags.2)
	boost_peer      TL   // (bit flags.1) | Peer
	months          int32
	slug            string
	currency        string // (bit flags.2)
	amount          int64  // (bit flags.2)
	crypto_currency string // (bit flags.3)
	crypto_amount   int64  // (bit flags.3)
}

type TL_messageActionGiveawayLaunch struct {
}

type TL_payments_giveawayInfo struct {
	flags                    int32
	participating            bool // (bit flags.0)
	preparing_results        bool // (bit flags.3)
	start_date               int32
	joined_too_early_date    int32  // (bit flags.1)
	admin_disallowed_chat_id int64  // (bit flags.2)
	disallowed_country       string // (bit flags.4)
}

type TL_payments_giveawayInfoResults struct {
	flags           int32
	winner          bool // (bit flags.0)
	refunded        bool // (bit flags.1)
	start_date      int32
	gift_code_slug  string // (bit flags.0)
	finish_date     int32
	winners_count   int32
	activated_count int32
}

type TL_messageEntityBlockquote struct {
	offset int32
	length int32
}

type TL_prepaidGiveaway struct {
	id       int64
	months   int32
	quantity int32
	date     int32
}

type TL_inputMediaWebPage struct {
	flags             int32
	force_large_media bool // (bit flags.0)
	force_small_media bool // (bit flags.1)
	optional          bool // (bit flags.2)
	url               string
}

type TL_inputBotInlineMessageMediaWebPage struct {
	flags             int32
	invert_media      bool // (bit flags.3)
	force_large_media bool // (bit flags.4)
	force_small_media bool // (bit flags.5)
	optional          bool // (bit flags.6)
	message           string
	entities          []TL // (bit flags.1) | MessageEntity
	url               string
	reply_markup      TL // (bit flags.2) | ReplyMarkup
}

type TL_botInlineMessageMediaWebPage struct {
	flags             int32
	invert_media      bool // (bit flags.3)
	force_large_media bool // (bit flags.4)
	force_small_media bool // (bit flags.5)
	manual            bool // (bit flags.7)
	safe              bool // (bit flags.8)
	message           string
	entities          []TL // (bit flags.1) | MessageEntity
	url               string
	reply_markup      TL // (bit flags.2) | ReplyMarkup
}

type TL_boost struct {
	flags           int32
	gift            bool // (bit flags.1)
	giveaway        bool // (bit flags.2)
	unclaimed       bool // (bit flags.3)
	id              string
	user_id         int64 // (bit flags.0)
	giveaway_msg_id int32 // (bit flags.2)
	date            int32
	expires         int32
	used_gift_slug  string // (bit flags.4)
	multiplier      int32  // (bit flags.5)
}

type TL_premium_boostsList struct {
	flags       int32
	count       int32
	boosts      []TL   // Boost
	next_offset string // (bit flags.0)
	users       []TL   // User
}

type TL_myBoost struct {
	flags               int32
	slot                int32
	peer                TL // (bit flags.0) | Peer
	date                int32
	expires             int32
	cooldown_until_date int32 // (bit flags.1)
}

type TL_premium_myBoosts struct {
	my_boosts []TL // MyBoost
	chats     []TL // Chat
	users     []TL // User
}

type TL_premium_boostsStatus struct {
	flags                int32
	my_boost             bool // (bit flags.2)
	level                int32
	current_level_boosts int32
	boosts               int32
	gift_boosts          int32 // (bit flags.4)
	next_level_boosts    int32 // (bit flags.0)
	premium_audience     TL    // (bit flags.1) | StatsPercentValue
	boost_url            string
	prepaid_giveaways    []TL    // (bit flags.3) | PrepaidGiveaway
	my_boost_slots       []int32 // (bit flags.2)
}

type TL_updateBotChatBoost struct {
	peer  TL // Peer
	boost TL // Boost
	qts   int32
}

type TL_updateChannelViewForumAsMessages struct {
	channel_id int64
	enabled    TL // Bool
}

type TL_messageActionGiveawayResults struct {
	winners_count   int32
	unclaimed_count int32
}

type TL_updatePeerWallpaper struct {
	flags                int32
	wallpaper_overridden bool // (bit flags.1)
	peer                 TL   // Peer
	wallpaper            TL   // (bit flags.0) | WallPaper
}

type TL_storyFwdHeader struct {
	flags     int32
	modified  bool   // (bit flags.3)
	from      TL     // (bit flags.0) | Peer
	from_name string // (bit flags.1)
	story_id  int32  // (bit flags.2)
}

type TL_postInteractionCountersMessage struct {
	msg_id    int32
	views     int32
	forwards  int32
	reactions int32
}

type TL_postInteractionCountersStory struct {
	story_id  int32
	views     int32
	forwards  int32
	reactions int32
}

type TL_stats_storyStats struct {
	views_graph                TL // StatsGraph
	reactions_by_emotion_graph TL // StatsGraph
}

type TL_publicForwardMessage struct {
	message TL // Message
}

type TL_publicForwardStory struct {
	peer  TL // Peer
	story TL // StoryItem
}

type TL_stats_publicForwards struct {
	flags       int32
	count       int32
	forwards    []TL   // PublicForward
	next_offset string // (bit flags.0)
	chats       []TL   // Chat
	users       []TL   // User
}

type TL_peerColor struct {
	flags               int32
	color               int32 // (bit flags.0)
	background_emoji_id int64 // (bit flags.1)
}

type TL_help_peerColorSet struct {
	colors []int32
}

type TL_help_peerColorProfileSet struct {
	palette_colors []int32
	bg_colors      []int32
	story_colors   []int32
}

type TL_help_peerColorOption struct {
	flags             int32
	hidden            bool // (bit flags.0)
	color_id          int32
	colors            TL    // (bit flags.1) | help_PeerColorSet
	dark_colors       TL    // (bit flags.2) | help_PeerColorSet
	channel_min_level int32 // (bit flags.3)
}

type TL_help_peerColorsNotModified struct {
}

type TL_help_peerColors struct {
	hash   int32
	colors []TL // help_PeerColorOption
}

type TL_messageMediaGiveawayResults struct {
	flags                  int32
	only_new_subscribers   bool // (bit flags.0)
	refunded               bool // (bit flags.2)
	channel_id             int64
	additional_peers_count int32 // (bit flags.3)
	launch_msg_id          int32
	winners_count          int32
	unclaimed_count        int32
	winners                []int64
	months                 int32
	prize_description      string // (bit flags.1)
	until_date             int32
}

type TL_storyReaction struct {
	peer_id  TL // Peer
	date     int32
	reaction TL // Reaction
}

type TL_storyReactionPublicForward struct {
	message TL // Message
}

type TL_storyReactionPublicRepost struct {
	peer_id TL // Peer
	story   TL // StoryItem
}

type TL_stories_storyReactionsList struct {
	flags       int32
	count       int32
	reactions   []TL   // StoryReaction
	chats       []TL   // Chat
	users       []TL   // User
	next_offset string // (bit flags.0)
}

type TL_storyViewPublicForward struct {
	flags                   int32
	blocked                 bool // (bit flags.0)
	blocked_my_stories_from bool // (bit flags.1)
	message                 TL   // Message
}

type TL_storyViewPublicRepost struct {
	flags                   int32
	blocked                 bool // (bit flags.0)
	blocked_my_stories_from bool // (bit flags.1)
	peer_id                 TL   // Peer
	story                   TL   // StoryItem
}

type TL_channelAdminLogEventActionChangePeerColor struct {
	prev_value TL // PeerColor
	new_value  TL // PeerColor
}

type TL_channelAdminLogEventActionChangeProfilePeerColor struct {
	prev_value TL // PeerColor
	new_value  TL // PeerColor
}

type TL_channelAdminLogEventActionChangeWallpaper struct {
	prev_value TL // WallPaper
	new_value  TL // WallPaper
}

type TL_channelAdminLogEventActionChangeEmojiStatus struct {
	prev_value TL // EmojiStatus
	new_value  TL // EmojiStatus
}

type TL_inputStickerSetEmojiChannelDefaultStatuses struct {
}

type TL_mediaAreaChannelPost struct {
	coordinates TL // MediaAreaCoordinates
	channel_id  int64
	msg_id      int32
}

type TL_inputMediaAreaChannelPost struct {
	coordinates TL // MediaAreaCoordinates
	channel     TL // InputChannel
	msg_id      int32
}

type TL_updateBotMessageReaction struct {
	peer          TL // Peer
	msg_id        int32
	date          int32
	actor         TL   // Peer
	old_reactions []TL // Reaction
	new_reactions []TL // Reaction
	qts           int32
}

type TL_updateBotMessageReactions struct {
	peer      TL // Peer
	msg_id    int32
	date      int32
	reactions []TL // ReactionCount
	qts       int32
}

type TL_savedDialog struct {
	flags       int32
	pinned      bool // (bit flags.2)
	peer        TL   // Peer
	top_message int32
}

type TL_updateSavedDialogPinned struct {
	flags  int32
	pinned bool // (bit flags.0)
	peer   TL   // DialogPeer
}

type TL_updatePinnedSavedDialogs struct {
	flags int32
	order []TL // (bit flags.0) | DialogPeer
}

type TL_messages_savedDialogs struct {
	dialogs  []TL // SavedDialog
	messages []TL // Message
	chats    []TL // Chat
	users    []TL // User
}

type TL_messages_savedDialogsSlice struct {
	count    int32
	dialogs  []TL // SavedDialog
	messages []TL // Message
	chats    []TL // Chat
	users    []TL // User
}

type TL_messages_savedDialogsNotModified struct {
	count int32
}

type TL_invokeAfterMsg struct {
	msg_id int64
	query  TL
}

type TL_invokeAfterMsgs struct {
	msg_ids []int64
	query   TL
}

type TL_auth_sendCode struct {
	phone_number string
	api_id       int32
	api_hash     string
	settings     TL // CodeSettings
}

type TL_auth_signUp struct {
	phone_number    string
	phone_code_hash string
	first_name      string
	last_name       string
}

type TL_auth_signIn struct {
	flags              int32
	phone_number       string
	phone_code_hash    string
	phone_code         string // (bit flags.0)
	email_verification TL     // (bit flags.1) | EmailVerification
}

type TL_auth_logOut struct {
}

type TL_auth_resetAuthorizations struct {
}

type TL_auth_exportAuthorization struct {
	dc_id int32
}

type TL_auth_importAuthorization struct {
	id    int64
	bytes []byte
}

type TL_auth_bindTempAuthKey struct {
	perm_auth_key_id  int64
	nonce             int64
	expires_at        int32
	encrypted_message []byte
}

type TL_account_registerDevice struct {
	flags       int32
	no_muted    bool // (bit flags.0)
	token_type  int32
	token       string
	app_sandbox TL // Bool
	secret      []byte
	other_uids  []int64
}

type TL_account_unregisterDevice struct {
	token_type int32
	token      string
	other_uids []int64
}

type TL_account_updateNotifySettings struct {
	peer     TL // InputNotifyPeer
	settings TL // InputPeerNotifySettings
}

type TL_account_getNotifySettings struct {
	peer TL // InputNotifyPeer
}

type TL_account_resetNotifySettings struct {
}

type TL_account_updateProfile struct {
	flags      int32
	first_name string // (bit flags.0)
	last_name  string // (bit flags.1)
	about      string // (bit flags.2)
}

type TL_account_updateStatus struct {
	offline TL // Bool
}

type TL_account_getWallPapers struct {
	hash int64
}

type TL_account_reportPeer struct {
	peer    TL // InputPeer
	reason  TL // ReportReason
	message string
}

type TL_users_getUsers struct {
	id []TL // InputUser
}

type TL_users_getFullUser struct {
	id TL // InputUser
}

type TL_contacts_getContactIDs struct {
	hash int64
}

type TL_contacts_getStatuses struct {
}

type TL_contacts_getContacts struct {
	hash int64
}

type TL_contacts_importContacts struct {
	contacts []TL // InputContact
}

type TL_contacts_deleteContacts struct {
	id []TL // InputUser
}

type TL_contacts_deleteByPhones struct {
	phones []string
}

type TL_contacts_block struct {
	flags           int32
	my_stories_from bool // (bit flags.0)
	id              TL   // InputPeer
}

type TL_contacts_unblock struct {
	flags           int32
	my_stories_from bool // (bit flags.0)
	id              TL   // InputPeer
}

type TL_contacts_getBlocked struct {
	flags           int32
	my_stories_from bool // (bit flags.0)
	offset          int32
	limit           int32
}

type TL_messages_getMessages struct {
	id []TL // InputMessage
}

type TL_messages_getDialogs struct {
	flags          int32
	exclude_pinned bool  // (bit flags.0)
	folder_id      int32 // (bit flags.1)
	offset_date    int32
	offset_id      int32
	offset_peer    TL // InputPeer
	limit          int32
	hash           int64
}

type TL_messages_getHistory struct {
	peer        TL // InputPeer
	offset_id   int32
	offset_date int32
	add_offset  int32
	limit       int32
	max_id      int32
	min_id      int32
	hash        int64
}

type TL_messages_search struct {
	flags         int32
	peer          TL // InputPeer
	q             string
	from_id       TL    // (bit flags.0) | InputPeer
	saved_peer_id TL    // (bit flags.2) | InputPeer
	top_msg_id    int32 // (bit flags.1)
	filter        TL    // MessagesFilter
	min_date      int32
	max_date      int32
	offset_id     int32
	add_offset    int32
	limit         int32
	max_id        int32
	min_id        int32
	hash          int64
}

type TL_messages_readHistory struct {
	peer   TL // InputPeer
	max_id int32
}

type TL_messages_deleteHistory struct {
	flags      int32
	just_clear bool // (bit flags.0)
	revoke     bool // (bit flags.1)
	peer       TL   // InputPeer
	max_id     int32
	min_date   int32 // (bit flags.2)
	max_date   int32 // (bit flags.3)
}

type TL_messages_deleteMessages struct {
	flags  int32
	revoke bool // (bit flags.0)
	id     []int32
}

type TL_messages_receivedMessages struct {
	max_id int32
}

type TL_messages_setTyping struct {
	flags      int32
	peer       TL    // InputPeer
	top_msg_id int32 // (bit flags.0)
	action     TL    // SendMessageAction
}

type TL_messages_sendMessage struct {
	flags                    int32
	no_webpage               bool // (bit flags.1)
	silent                   bool // (bit flags.5)
	background               bool // (bit flags.6)
	clear_draft              bool // (bit flags.7)
	noforwards               bool // (bit flags.14)
	update_stickersets_order bool // (bit flags.15)
	invert_media             bool // (bit flags.16)
	peer                     TL   // InputPeer
	reply_to                 TL   // (bit flags.0) | InputReplyTo
	message                  string
	random_id                int64
	reply_markup             TL    // (bit flags.2) | ReplyMarkup
	entities                 []TL  // (bit flags.3) | MessageEntity
	schedule_date            int32 // (bit flags.10)
	send_as                  TL    // (bit flags.13) | InputPeer
}

type TL_messages_sendMedia struct {
	flags                    int32
	silent                   bool // (bit flags.5)
	background               bool // (bit flags.6)
	clear_draft              bool // (bit flags.7)
	noforwards               bool // (bit flags.14)
	update_stickersets_order bool // (bit flags.15)
	invert_media             bool // (bit flags.16)
	peer                     TL   // InputPeer
	reply_to                 TL   // (bit flags.0) | InputReplyTo
	media                    TL   // InputMedia
	message                  string
	random_id                int64
	reply_markup             TL    // (bit flags.2) | ReplyMarkup
	entities                 []TL  // (bit flags.3) | MessageEntity
	schedule_date            int32 // (bit flags.10)
	send_as                  TL    // (bit flags.13) | InputPeer
}

type TL_messages_forwardMessages struct {
	flags               int32
	silent              bool // (bit flags.5)
	background          bool // (bit flags.6)
	with_my_score       bool // (bit flags.8)
	drop_author         bool // (bit flags.11)
	drop_media_captions bool // (bit flags.12)
	noforwards          bool // (bit flags.14)
	from_peer           TL   // InputPeer
	id                  []int32
	random_id           []int64
	to_peer             TL    // InputPeer
	top_msg_id          int32 // (bit flags.9)
	schedule_date       int32 // (bit flags.10)
	send_as             TL    // (bit flags.13) | InputPeer
}

type TL_messages_reportSpam struct {
	peer TL // InputPeer
}

type TL_messages_getPeerSettings struct {
	peer TL // InputPeer
}

type TL_messages_report struct {
	peer    TL // InputPeer
	id      []int32
	reason  TL // ReportReason
	message string
}

type TL_messages_getChats struct {
	id []int64
}

type TL_messages_getFullChat struct {
	chat_id int64
}

type TL_messages_editChatTitle struct {
	chat_id int64
	title   string
}

type TL_messages_editChatPhoto struct {
	chat_id int64
	photo   TL // InputChatPhoto
}

type TL_messages_addChatUser struct {
	chat_id   int64
	user_id   TL // InputUser
	fwd_limit int32
}

type TL_messages_deleteChatUser struct {
	flags          int32
	revoke_history bool // (bit flags.0)
	chat_id        int64
	user_id        TL // InputUser
}

type TL_messages_createChat struct {
	flags      int32
	users      []TL // InputUser
	title      string
	ttl_period int32 // (bit flags.0)
}

type TL_updates_getState struct {
}

type TL_updates_getDifference struct {
	flags           int32
	pts             int32
	pts_limit       int32 // (bit flags.1)
	pts_total_limit int32 // (bit flags.0)
	date            int32
	qts             int32
	qts_limit       int32 // (bit flags.2)
}

type TL_photos_updateProfilePhoto struct {
	flags    int32
	fallback bool // (bit flags.0)
	bot      TL   // (bit flags.1) | InputUser
	id       TL   // InputPhoto
}

type TL_photos_uploadProfilePhoto struct {
	flags              int32
	fallback           bool    // (bit flags.3)
	bot                TL      // (bit flags.5) | InputUser
	file               TL      // (bit flags.0) | InputFile
	video              TL      // (bit flags.1) | InputFile
	video_start_ts     float64 // (bit flags.2)
	video_emoji_markup TL      // (bit flags.4) | VideoSize
}

type TL_photos_deletePhotos struct {
	id []TL // InputPhoto
}

type TL_upload_saveFilePart struct {
	file_id   int64
	file_part int32
	bytes     []byte
}

type TL_upload_getFile struct {
	flags         int32
	precise       bool // (bit flags.0)
	cdn_supported bool // (bit flags.1)
	location      TL   // InputFileLocation
	offset        int64
	limit         int32
}

type TL_help_getConfig struct {
}

type TL_help_getNearestDc struct {
}

type TL_help_getAppUpdate struct {
	source string
}

type TL_help_getInviteText struct {
}

type TL_photos_getUserPhotos struct {
	user_id TL // InputUser
	offset  int32
	max_id  int64
	limit   int32
}

type TL_messages_getDhConfig struct {
	version       int32
	random_length int32
}

type TL_messages_requestEncryption struct {
	user_id   TL // InputUser
	random_id int32
	g_a       []byte
}

type TL_messages_acceptEncryption struct {
	peer            TL // InputEncryptedChat
	g_b             []byte
	key_fingerprint int64
}

type TL_messages_discardEncryption struct {
	flags          int32
	delete_history bool // (bit flags.0)
	chat_id        int32
}

type TL_messages_setEncryptedTyping struct {
	peer   TL // InputEncryptedChat
	typing TL // Bool
}

type TL_messages_readEncryptedHistory struct {
	peer     TL // InputEncryptedChat
	max_date int32
}

type TL_messages_sendEncrypted struct {
	flags     int32
	silent    bool // (bit flags.0)
	peer      TL   // InputEncryptedChat
	random_id int64
	data      []byte
}

type TL_messages_sendEncryptedFile struct {
	flags     int32
	silent    bool // (bit flags.0)
	peer      TL   // InputEncryptedChat
	random_id int64
	data      []byte
	file      TL // InputEncryptedFile
}

type TL_messages_sendEncryptedService struct {
	peer      TL // InputEncryptedChat
	random_id int64
	data      []byte
}

type TL_messages_receivedQueue struct {
	max_qts int32
}

type TL_messages_reportEncryptedSpam struct {
	peer TL // InputEncryptedChat
}

type TL_upload_saveBigFilePart struct {
	file_id          int64
	file_part        int32
	file_total_parts int32
	bytes            []byte
}

type TL_initConnection struct {
	flags            int32
	api_id           int32
	device_model     string
	system_version   string
	app_version      string
	system_lang_code string
	lang_pack        string
	lang_code        string
	proxy            TL // (bit flags.0) | InputClientProxy
	params           TL // (bit flags.1) | JSONValue
	query            TL
}

type TL_help_getSupport struct {
}

type TL_messages_readMessageContents struct {
	id []int32
}

type TL_account_checkUsername struct {
	username string
}

type TL_account_updateUsername struct {
	username string
}

type TL_contacts_search struct {
	q     string
	limit int32
}

type TL_account_getPrivacy struct {
	key TL // InputPrivacyKey
}

type TL_account_setPrivacy struct {
	key   TL   // InputPrivacyKey
	rules []TL // InputPrivacyRule
}

type TL_account_deleteAccount struct {
	flags    int32
	reason   string
	password TL // (bit flags.0) | InputCheckPasswordSRP
}

type TL_account_getAccountTTL struct {
}

type TL_account_setAccountTTL struct {
	ttl TL // AccountDaysTTL
}

type TL_invokeWithLayer struct {
	layer int32
	query TL
}

type TL_contacts_resolveUsername struct {
	username string
}

type TL_account_sendChangePhoneCode struct {
	phone_number string
	settings     TL // CodeSettings
}

type TL_account_changePhone struct {
	phone_number    string
	phone_code_hash string
	phone_code      string
}

type TL_messages_getStickers struct {
	emoticon string
	hash     int64
}

type TL_messages_getAllStickers struct {
	hash int64
}

type TL_account_updateDeviceLocked struct {
	period int32
}

type TL_auth_importBotAuthorization struct {
	flags          int32
	api_id         int32
	api_hash       string
	bot_auth_token string
}

type TL_messages_getWebPagePreview struct {
	flags    int32
	message  string
	entities []TL // (bit flags.3) | MessageEntity
}

type TL_account_getAuthorizations struct {
}

type TL_account_resetAuthorization struct {
	hash int64
}

type TL_account_getPassword struct {
}

type TL_account_getPasswordSettings struct {
	password TL // InputCheckPasswordSRP
}

type TL_account_updatePasswordSettings struct {
	password     TL // InputCheckPasswordSRP
	new_settings TL // account_PasswordInputSettings
}

type TL_auth_checkPassword struct {
	password TL // InputCheckPasswordSRP
}

type TL_auth_requestPasswordRecovery struct {
}

type TL_auth_recoverPassword struct {
	flags        int32
	code         string
	new_settings TL // (bit flags.0) | account_PasswordInputSettings
}

type TL_invokeWithoutUpdates struct {
	query TL
}

type TL_messages_exportChatInvite struct {
	flags                   int32
	legacy_revoke_permanent bool   // (bit flags.2)
	request_needed          bool   // (bit flags.3)
	peer                    TL     // InputPeer
	expire_date             int32  // (bit flags.0)
	usage_limit             int32  // (bit flags.1)
	title                   string // (bit flags.4)
}

type TL_messages_checkChatInvite struct {
	hash string
}

type TL_messages_importChatInvite struct {
	hash string
}

type TL_messages_getStickerSet struct {
	stickerset TL // InputStickerSet
	hash       int32
}

type TL_messages_installStickerSet struct {
	stickerset TL // InputStickerSet
	archived   TL // Bool
}

type TL_messages_uninstallStickerSet struct {
	stickerset TL // InputStickerSet
}

type TL_messages_startBot struct {
	bot         TL // InputUser
	peer        TL // InputPeer
	random_id   int64
	start_param string
}

type TL_messages_getMessagesViews struct {
	peer      TL // InputPeer
	id        []int32
	increment TL // Bool
}

type TL_channels_readHistory struct {
	channel TL // InputChannel
	max_id  int32
}

type TL_channels_deleteMessages struct {
	channel TL // InputChannel
	id      []int32
}

type TL_channels_reportSpam struct {
	channel     TL // InputChannel
	participant TL // InputPeer
	id          []int32
}

type TL_channels_getMessages struct {
	channel TL   // InputChannel
	id      []TL // InputMessage
}

type TL_channels_getParticipants struct {
	channel TL // InputChannel
	filter  TL // ChannelParticipantsFilter
	offset  int32
	limit   int32
	hash    int64
}

type TL_channels_getParticipant struct {
	channel     TL // InputChannel
	participant TL // InputPeer
}

type TL_channels_getChannels struct {
	id []TL // InputChannel
}

type TL_channels_getFullChannel struct {
	channel TL // InputChannel
}

type TL_channels_createChannel struct {
	flags      int32
	broadcast  bool // (bit flags.0)
	megagroup  bool // (bit flags.1)
	for_import bool // (bit flags.3)
	forum      bool // (bit flags.5)
	title      string
	about      string
	geo_point  TL     // (bit flags.2) | InputGeoPoint
	address    string // (bit flags.2)
	ttl_period int32  // (bit flags.4)
}

type TL_channels_editAdmin struct {
	channel      TL // InputChannel
	user_id      TL // InputUser
	admin_rights TL // ChatAdminRights
	rank         string
}

type TL_channels_editTitle struct {
	channel TL // InputChannel
	title   string
}

type TL_channels_editPhoto struct {
	channel TL // InputChannel
	photo   TL // InputChatPhoto
}

type TL_channels_checkUsername struct {
	channel  TL // InputChannel
	username string
}

type TL_channels_updateUsername struct {
	channel  TL // InputChannel
	username string
}

type TL_channels_joinChannel struct {
	channel TL // InputChannel
}

type TL_channels_leaveChannel struct {
	channel TL // InputChannel
}

type TL_channels_inviteToChannel struct {
	channel TL   // InputChannel
	users   []TL // InputUser
}

type TL_channels_deleteChannel struct {
	channel TL // InputChannel
}

type TL_updates_getChannelDifference struct {
	flags   int32
	force   bool // (bit flags.0)
	channel TL   // InputChannel
	filter  TL   // ChannelMessagesFilter
	pts     int32
	limit   int32
}

type TL_messages_editChatAdmin struct {
	chat_id  int64
	user_id  TL // InputUser
	is_admin TL // Bool
}

type TL_messages_migrateChat struct {
	chat_id int64
}

type TL_messages_searchGlobal struct {
	flags           int32
	broadcasts_only bool  // (bit flags.1)
	folder_id       int32 // (bit flags.0)
	q               string
	filter          TL // MessagesFilter
	min_date        int32
	max_date        int32
	offset_rate     int32
	offset_peer     TL // InputPeer
	offset_id       int32
	limit           int32
}

type TL_messages_reorderStickerSets struct {
	flags  int32
	masks  bool // (bit flags.0)
	emojis bool // (bit flags.1)
	order  []int64
}

type TL_messages_getDocumentByHash struct {
	sha256    []byte
	size      int64
	mime_type string
}

type TL_messages_getSavedGifs struct {
	hash int64
}

type TL_messages_saveGif struct {
	id     TL // InputDocument
	unsave TL // Bool
}

type TL_messages_getInlineBotResults struct {
	flags     int32
	bot       TL // InputUser
	peer      TL // InputPeer
	geo_point TL // (bit flags.0) | InputGeoPoint
	query     string
	offset    string
}

type TL_messages_setInlineBotResults struct {
	flags          int32
	gallery        bool // (bit flags.0)
	private        bool // (bit flags.1)
	query_id       int64
	results        []TL // InputBotInlineResult
	cache_time     int32
	next_offset    string // (bit flags.2)
	switch_pm      TL     // (bit flags.3) | InlineBotSwitchPM
	switch_webview TL     // (bit flags.4) | InlineBotWebView
}

type TL_messages_sendInlineBotResult struct {
	flags         int32
	silent        bool // (bit flags.5)
	background    bool // (bit flags.6)
	clear_draft   bool // (bit flags.7)
	hide_via      bool // (bit flags.11)
	peer          TL   // InputPeer
	reply_to      TL   // (bit flags.0) | InputReplyTo
	random_id     int64
	query_id      int64
	id            string
	schedule_date int32 // (bit flags.10)
	send_as       TL    // (bit flags.13) | InputPeer
}

type TL_channels_exportMessageLink struct {
	flags   int32
	grouped bool // (bit flags.0)
	thread  bool // (bit flags.1)
	channel TL   // InputChannel
	id      int32
}

type TL_channels_toggleSignatures struct {
	channel TL // InputChannel
	enabled TL // Bool
}

type TL_auth_resendCode struct {
	phone_number    string
	phone_code_hash string
}

type TL_auth_cancelCode struct {
	phone_number    string
	phone_code_hash string
}

type TL_messages_getMessageEditData struct {
	peer TL // InputPeer
	id   int32
}

type TL_messages_editMessage struct {
	flags         int32
	no_webpage    bool // (bit flags.1)
	invert_media  bool // (bit flags.16)
	peer          TL   // InputPeer
	id            int32
	message       string // (bit flags.11)
	media         TL     // (bit flags.14) | InputMedia
	reply_markup  TL     // (bit flags.2) | ReplyMarkup
	entities      []TL   // (bit flags.3) | MessageEntity
	schedule_date int32  // (bit flags.15)
}

type TL_messages_editInlineBotMessage struct {
	flags        int32
	no_webpage   bool   // (bit flags.1)
	invert_media bool   // (bit flags.16)
	id           TL     // InputBotInlineMessageID
	message      string // (bit flags.11)
	media        TL     // (bit flags.14) | InputMedia
	reply_markup TL     // (bit flags.2) | ReplyMarkup
	entities     []TL   // (bit flags.3) | MessageEntity
}

type TL_messages_getBotCallbackAnswer struct {
	flags    int32
	game     bool // (bit flags.1)
	peer     TL   // InputPeer
	msg_id   int32
	data     []byte // (bit flags.0)
	password TL     // (bit flags.2) | InputCheckPasswordSRP
}

type TL_messages_setBotCallbackAnswer struct {
	flags      int32
	alert      bool // (bit flags.1)
	query_id   int64
	message    string // (bit flags.0)
	url        string // (bit flags.2)
	cache_time int32
}

type TL_contacts_getTopPeers struct {
	flags          int32
	correspondents bool // (bit flags.0)
	bots_pm        bool // (bit flags.1)
	bots_inline    bool // (bit flags.2)
	phone_calls    bool // (bit flags.3)
	forward_users  bool // (bit flags.4)
	forward_chats  bool // (bit flags.5)
	groups         bool // (bit flags.10)
	channels       bool // (bit flags.15)
	bots_app       bool // (bit flags.16)
	offset         int32
	limit          int32
	hash           int64
}

type TL_contacts_resetTopPeerRating struct {
	category TL // TopPeerCategory
	peer     TL // InputPeer
}

type TL_messages_getPeerDialogs struct {
	peers []TL // InputDialogPeer
}

type TL_messages_saveDraft struct {
	flags        int32
	no_webpage   bool // (bit flags.1)
	invert_media bool // (bit flags.6)
	reply_to     TL   // (bit flags.4) | InputReplyTo
	peer         TL   // InputPeer
	message      string
	entities     []TL // (bit flags.3) | MessageEntity
	media        TL   // (bit flags.5) | InputMedia
}

type TL_messages_getAllDrafts struct {
}

type TL_messages_getFeaturedStickers struct {
	hash int64
}

type TL_messages_readFeaturedStickers struct {
	id []int64
}

type TL_messages_getRecentStickers struct {
	flags    int32
	attached bool // (bit flags.0)
	hash     int64
}

type TL_messages_saveRecentSticker struct {
	flags    int32
	attached bool // (bit flags.0)
	id       TL   // InputDocument
	unsave   TL   // Bool
}

type TL_messages_clearRecentStickers struct {
	flags    int32
	attached bool // (bit flags.0)
}

type TL_messages_getArchivedStickers struct {
	flags     int32
	masks     bool // (bit flags.0)
	emojis    bool // (bit flags.1)
	offset_id int64
	limit     int32
}

type TL_account_sendConfirmPhoneCode struct {
	hash     string
	settings TL // CodeSettings
}

type TL_account_confirmPhone struct {
	phone_code_hash string
	phone_code      string
}

type TL_channels_getAdminedPublicChannels struct {
	flags       int32
	by_location bool // (bit flags.0)
	check_limit bool // (bit flags.1)
}

type TL_messages_getMaskStickers struct {
	hash int64
}

type TL_messages_getAttachedStickers struct {
	media TL // InputStickeredMedia
}

type TL_auth_dropTempAuthKeys struct {
	except_auth_keys []int64
}

type TL_messages_setGameScore struct {
	flags        int32
	edit_message bool // (bit flags.0)
	force        bool // (bit flags.1)
	peer         TL   // InputPeer
	id           int32
	user_id      TL // InputUser
	score        int32
}

type TL_messages_setInlineGameScore struct {
	flags        int32
	edit_message bool // (bit flags.0)
	force        bool // (bit flags.1)
	id           TL   // InputBotInlineMessageID
	user_id      TL   // InputUser
	score        int32
}

type TL_messages_getGameHighScores struct {
	peer    TL // InputPeer
	id      int32
	user_id TL // InputUser
}

type TL_messages_getInlineGameHighScores struct {
	id      TL // InputBotInlineMessageID
	user_id TL // InputUser
}

type TL_messages_getCommonChats struct {
	user_id TL // InputUser
	max_id  int64
	limit   int32
}

type TL_help_setBotUpdatesStatus struct {
	pending_updates_count int32
	message               string
}

type TL_messages_getWebPage struct {
	url  string
	hash int32
}

type TL_messages_toggleDialogPin struct {
	flags  int32
	pinned bool // (bit flags.0)
	peer   TL   // InputDialogPeer
}

type TL_messages_reorderPinnedDialogs struct {
	flags     int32
	force     bool // (bit flags.0)
	folder_id int32
	order     []TL // InputDialogPeer
}

type TL_messages_getPinnedDialogs struct {
	folder_id int32
}

type TL_bots_sendCustomRequest struct {
	custom_method string
	params        TL // DataJSON
}

type TL_bots_answerWebhookJSONQuery struct {
	query_id int64
	data     TL // DataJSON
}

type TL_upload_getWebFile struct {
	location TL // InputWebFileLocation
	offset   int32
	limit    int32
}

type TL_payments_getPaymentForm struct {
	flags        int32
	invoice      TL // InputInvoice
	theme_params TL // (bit flags.0) | DataJSON
}

type TL_payments_getPaymentReceipt struct {
	peer   TL // InputPeer
	msg_id int32
}

type TL_payments_validateRequestedInfo struct {
	flags   int32
	save    bool // (bit flags.0)
	invoice TL   // InputInvoice
	info    TL   // PaymentRequestedInfo
}

type TL_payments_sendPaymentForm struct {
	flags              int32
	form_id            int64
	invoice            TL     // InputInvoice
	requested_info_id  string // (bit flags.0)
	shipping_option_id string // (bit flags.1)
	credentials        TL     // InputPaymentCredentials
	tip_amount         int64  // (bit flags.2)
}

type TL_account_getTmpPassword struct {
	password TL // InputCheckPasswordSRP
	period   int32
}

type TL_payments_getSavedInfo struct {
}

type TL_payments_clearSavedInfo struct {
	flags       int32
	credentials bool // (bit flags.0)
	info        bool // (bit flags.1)
}

type TL_messages_setBotShippingResults struct {
	flags            int32
	query_id         int64
	error            string // (bit flags.0)
	shipping_options []TL   // (bit flags.1) | ShippingOption
}

type TL_messages_setBotPrecheckoutResults struct {
	flags    int32
	success  bool // (bit flags.1)
	query_id int64
	error    string // (bit flags.0)
}

type TL_stickers_createStickerSet struct {
	flags      int32
	masks      bool // (bit flags.0)
	animated   bool // (bit flags.1)
	videos     bool // (bit flags.4)
	emojis     bool // (bit flags.5)
	text_color bool // (bit flags.6)
	user_id    TL   // InputUser
	title      string
	short_name string
	thumb      TL     // (bit flags.2) | InputDocument
	stickers   []TL   // InputStickerSetItem
	software   string // (bit flags.3)
}

type TL_stickers_removeStickerFromSet struct {
	sticker TL // InputDocument
}

type TL_stickers_changeStickerPosition struct {
	sticker  TL // InputDocument
	position int32
}

type TL_stickers_addStickerToSet struct {
	stickerset TL // InputStickerSet
	sticker    TL // InputStickerSetItem
}

type TL_messages_uploadMedia struct {
	peer  TL // InputPeer
	media TL // InputMedia
}

type TL_phone_getCallConfig struct {
}

type TL_phone_requestCall struct {
	flags     int32
	video     bool // (bit flags.0)
	user_id   TL   // InputUser
	random_id int32
	g_a_hash  []byte
	protocol  TL // PhoneCallProtocol
}

type TL_phone_acceptCall struct {
	peer     TL // InputPhoneCall
	g_b      []byte
	protocol TL // PhoneCallProtocol
}

type TL_phone_confirmCall struct {
	peer            TL // InputPhoneCall
	g_a             []byte
	key_fingerprint int64
	protocol        TL // PhoneCallProtocol
}

type TL_phone_receivedCall struct {
	peer TL // InputPhoneCall
}

type TL_phone_discardCall struct {
	flags         int32
	video         bool // (bit flags.0)
	peer          TL   // InputPhoneCall
	duration      int32
	reason        TL // PhoneCallDiscardReason
	connection_id int64
}

type TL_phone_setCallRating struct {
	flags           int32
	user_initiative bool // (bit flags.0)
	peer            TL   // InputPhoneCall
	rating          int32
	comment         string
}

type TL_phone_saveCallDebug struct {
	peer  TL // InputPhoneCall
	debug TL // DataJSON
}

type TL_upload_getCdnFile struct {
	file_token []byte
	offset     int64
	limit      int32
}

type TL_upload_reuploadCdnFile struct {
	file_token    []byte
	request_token []byte
}

type TL_help_getCdnConfig struct {
}

type TL_langpack_getLangPack struct {
	lang_pack string
	lang_code string
}

type TL_langpack_getStrings struct {
	lang_pack string
	lang_code string
	keys      []string
}

type TL_langpack_getDifference struct {
	lang_pack    string
	lang_code    string
	from_version int32
}

type TL_langpack_getLanguages struct {
	lang_pack string
}

type TL_channels_editBanned struct {
	channel       TL // InputChannel
	participant   TL // InputPeer
	banned_rights TL // ChatBannedRights
}

type TL_channels_getAdminLog struct {
	flags         int32
	channel       TL // InputChannel
	q             string
	events_filter TL   // (bit flags.0) | ChannelAdminLogEventsFilter
	admins        []TL // (bit flags.1) | InputUser
	max_id        int64
	min_id        int64
	limit         int32
}

type TL_upload_getCdnFileHashes struct {
	file_token []byte
	offset     int64
}

type TL_messages_sendScreenshotNotification struct {
	peer      TL // InputPeer
	reply_to  TL // InputReplyTo
	random_id int64
}

type TL_channels_setStickers struct {
	channel    TL // InputChannel
	stickerset TL // InputStickerSet
}

type TL_messages_getFavedStickers struct {
	hash int64
}

type TL_messages_faveSticker struct {
	id     TL // InputDocument
	unfave TL // Bool
}

type TL_channels_readMessageContents struct {
	channel TL // InputChannel
	id      []int32
}

type TL_contacts_resetSaved struct {
}

type TL_messages_getUnreadMentions struct {
	flags      int32
	peer       TL    // InputPeer
	top_msg_id int32 // (bit flags.0)
	offset_id  int32
	add_offset int32
	limit      int32
	max_id     int32
	min_id     int32
}

type TL_channels_deleteHistory struct {
	flags        int32
	for_everyone bool // (bit flags.0)
	channel      TL   // InputChannel
	max_id       int32
}

type TL_help_getRecentMeUrls struct {
	referer string
}

type TL_channels_togglePreHistoryHidden struct {
	channel TL // InputChannel
	enabled TL // Bool
}

type TL_messages_readMentions struct {
	flags      int32
	peer       TL    // InputPeer
	top_msg_id int32 // (bit flags.0)
}

type TL_messages_getRecentLocations struct {
	peer  TL // InputPeer
	limit int32
	hash  int64
}

type TL_messages_sendMultiMedia struct {
	flags                    int32
	silent                   bool  // (bit flags.5)
	background               bool  // (bit flags.6)
	clear_draft              bool  // (bit flags.7)
	noforwards               bool  // (bit flags.14)
	update_stickersets_order bool  // (bit flags.15)
	invert_media             bool  // (bit flags.16)
	peer                     TL    // InputPeer
	reply_to                 TL    // (bit flags.0) | InputReplyTo
	multi_media              []TL  // InputSingleMedia
	schedule_date            int32 // (bit flags.10)
	send_as                  TL    // (bit flags.13) | InputPeer
}

type TL_messages_uploadEncryptedFile struct {
	peer TL // InputEncryptedChat
	file TL // InputEncryptedFile
}

type TL_account_getWebAuthorizations struct {
}

type TL_account_resetWebAuthorization struct {
	hash int64
}

type TL_account_resetWebAuthorizations struct {
}

type TL_messages_searchStickerSets struct {
	flags            int32
	exclude_featured bool // (bit flags.0)
	q                string
	hash             int64
}

type TL_upload_getFileHashes struct {
	location TL // InputFileLocation
	offset   int64
}

type TL_help_getTermsOfServiceUpdate struct {
}

type TL_help_acceptTermsOfService struct {
	id TL // DataJSON
}

type TL_account_getAllSecureValues struct {
}

type TL_account_getSecureValue struct {
	types []TL // SecureValueType
}

type TL_account_saveSecureValue struct {
	value            TL // InputSecureValue
	secure_secret_id int64
}

type TL_account_deleteSecureValue struct {
	types []TL // SecureValueType
}

type TL_users_setSecureValueErrors struct {
	id     TL   // InputUser
	errors []TL // SecureValueError
}

type TL_account_getAuthorizationForm struct {
	bot_id     int64
	scope      string
	public_key string
}

type TL_account_acceptAuthorization struct {
	bot_id       int64
	scope        string
	public_key   string
	value_hashes []TL // SecureValueHash
	credentials  TL   // SecureCredentialsEncrypted
}

type TL_account_sendVerifyPhoneCode struct {
	phone_number string
	settings     TL // CodeSettings
}

type TL_account_verifyPhone struct {
	phone_number    string
	phone_code_hash string
	phone_code      string
}

type TL_account_sendVerifyEmailCode struct {
	purpose TL // EmailVerifyPurpose
	email   string
}

type TL_account_verifyEmail struct {
	purpose      TL // EmailVerifyPurpose
	verification TL // EmailVerification
}

type TL_help_getDeepLinkInfo struct {
	path string
}

type TL_contacts_getSaved struct {
}

type TL_channels_getLeftChannels struct {
	offset int32
}

type TL_account_initTakeoutSession struct {
	flags              int32
	contacts           bool  // (bit flags.0)
	message_users      bool  // (bit flags.1)
	message_chats      bool  // (bit flags.2)
	message_megagroups bool  // (bit flags.3)
	message_channels   bool  // (bit flags.4)
	files              bool  // (bit flags.5)
	file_max_size      int64 // (bit flags.5)
}

type TL_account_finishTakeoutSession struct {
	flags   int32
	success bool // (bit flags.0)
}

type TL_messages_getSplitRanges struct {
}

type TL_invokeWithMessagesRange struct {
	_range TL // MessageRange
	query  TL
}

type TL_invokeWithTakeout struct {
	takeout_id int64
	query      TL
}

type TL_messages_markDialogUnread struct {
	flags  int32
	unread bool // (bit flags.0)
	peer   TL   // InputDialogPeer
}

type TL_messages_getDialogUnreadMarks struct {
}

type TL_contacts_toggleTopPeers struct {
	enabled TL // Bool
}

type TL_messages_clearAllDrafts struct {
}

type TL_help_getAppConfig struct {
	hash int32
}

type TL_help_saveAppLog struct {
	events []TL // InputAppEvent
}

type TL_help_getPassportConfig struct {
	hash int32
}

type TL_langpack_getLanguage struct {
	lang_pack string
	lang_code string
}

type TL_messages_updatePinnedMessage struct {
	flags      int32
	silent     bool // (bit flags.0)
	unpin      bool // (bit flags.1)
	pm_oneside bool // (bit flags.2)
	peer       TL   // InputPeer
	id         int32
}

type TL_account_confirmPasswordEmail struct {
	code string
}

type TL_account_resendPasswordEmail struct {
}

type TL_account_cancelPasswordEmail struct {
}

type TL_help_getSupportName struct {
}

type TL_help_getUserInfo struct {
	user_id TL // InputUser
}

type TL_help_editUserInfo struct {
	user_id  TL // InputUser
	message  string
	entities []TL // MessageEntity
}

type TL_account_getContactSignUpNotification struct {
}

type TL_account_setContactSignUpNotification struct {
	silent TL // Bool
}

type TL_account_getNotifyExceptions struct {
	flags           int32
	compare_sound   bool // (bit flags.1)
	compare_stories bool // (bit flags.2)
	peer            TL   // (bit flags.0) | InputNotifyPeer
}

type TL_messages_sendVote struct {
	peer    TL // InputPeer
	msg_id  int32
	options []TL // bytes
}

type TL_messages_getPollResults struct {
	peer   TL // InputPeer
	msg_id int32
}

type TL_messages_getOnlines struct {
	peer TL // InputPeer
}

type TL_messages_editChatAbout struct {
	peer  TL // InputPeer
	about string
}

type TL_messages_editChatDefaultBannedRights struct {
	peer          TL // InputPeer
	banned_rights TL // ChatBannedRights
}

type TL_account_getWallPaper struct {
	wallpaper TL // InputWallPaper
}

type TL_account_uploadWallPaper struct {
	flags     int32
	for_chat  bool // (bit flags.0)
	file      TL   // InputFile
	mime_type string
	settings  TL // WallPaperSettings
}

type TL_account_saveWallPaper struct {
	wallpaper TL // InputWallPaper
	unsave    TL // Bool
	settings  TL // WallPaperSettings
}

type TL_account_installWallPaper struct {
	wallpaper TL // InputWallPaper
	settings  TL // WallPaperSettings
}

type TL_account_resetWallPapers struct {
}

type TL_account_getAutoDownloadSettings struct {
}

type TL_account_saveAutoDownloadSettings struct {
	flags    int32
	low      bool // (bit flags.0)
	high     bool // (bit flags.1)
	settings TL   // AutoDownloadSettings
}

type TL_messages_getEmojiKeywords struct {
	lang_code string
}

type TL_messages_getEmojiKeywordsDifference struct {
	lang_code    string
	from_version int32
}

type TL_messages_getEmojiKeywordsLanguages struct {
	lang_codes []string
}

type TL_messages_getEmojiURL struct {
	lang_code string
}

type TL_folders_editPeerFolders struct {
	folder_peers []TL // InputFolderPeer
}

type TL_messages_getSearchCounters struct {
	flags         int32
	peer          TL    // InputPeer
	saved_peer_id TL    // (bit flags.2) | InputPeer
	top_msg_id    int32 // (bit flags.0)
	filters       []TL  // MessagesFilter
}

type TL_channels_getGroupsForDiscussion struct {
}

type TL_channels_setDiscussionGroup struct {
	broadcast TL // InputChannel
	group     TL // InputChannel
}

type TL_messages_requestUrlAuth struct {
	flags     int32
	peer      TL     // (bit flags.1) | InputPeer
	msg_id    int32  // (bit flags.1)
	button_id int32  // (bit flags.1)
	url       string // (bit flags.2)
}

type TL_messages_acceptUrlAuth struct {
	flags         int32
	write_allowed bool   // (bit flags.0)
	peer          TL     // (bit flags.1) | InputPeer
	msg_id        int32  // (bit flags.1)
	button_id     int32  // (bit flags.1)
	url           string // (bit flags.2)
}

type TL_messages_hidePeerSettingsBar struct {
	peer TL // InputPeer
}

type TL_contacts_addContact struct {
	flags                       int32
	add_phone_privacy_exception bool // (bit flags.0)
	id                          TL   // InputUser
	first_name                  string
	last_name                   string
	phone                       string
}

type TL_contacts_acceptContact struct {
	id TL // InputUser
}

type TL_channels_editCreator struct {
	channel  TL // InputChannel
	user_id  TL // InputUser
	password TL // InputCheckPasswordSRP
}

type TL_contacts_getLocated struct {
	flags        int32
	background   bool  // (bit flags.1)
	geo_point    TL    // InputGeoPoint
	self_expires int32 // (bit flags.0)
}

type TL_channels_editLocation struct {
	channel   TL // InputChannel
	geo_point TL // InputGeoPoint
	address   string
}

type TL_channels_toggleSlowMode struct {
	channel TL // InputChannel
	seconds int32
}

type TL_messages_getScheduledHistory struct {
	peer TL // InputPeer
	hash int64
}

type TL_messages_getScheduledMessages struct {
	peer TL // InputPeer
	id   []int32
}

type TL_messages_sendScheduledMessages struct {
	peer TL // InputPeer
	id   []int32
}

type TL_messages_deleteScheduledMessages struct {
	peer TL // InputPeer
	id   []int32
}

type TL_account_uploadTheme struct {
	flags     int32
	file      TL // InputFile
	thumb     TL // (bit flags.0) | InputFile
	file_name string
	mime_type string
}

type TL_account_createTheme struct {
	flags    int32
	slug     string
	title    string
	document TL   // (bit flags.2) | InputDocument
	settings []TL // (bit flags.3) | InputThemeSettings
}

type TL_account_updateTheme struct {
	flags    int32
	format   string
	theme    TL     // InputTheme
	slug     string // (bit flags.0)
	title    string // (bit flags.1)
	document TL     // (bit flags.2) | InputDocument
	settings []TL   // (bit flags.3) | InputThemeSettings
}

type TL_account_saveTheme struct {
	theme  TL // InputTheme
	unsave TL // Bool
}

type TL_account_installTheme struct {
	flags      int32
	dark       bool   // (bit flags.0)
	theme      TL     // (bit flags.1) | InputTheme
	format     string // (bit flags.2)
	base_theme TL     // (bit flags.3) | BaseTheme
}

type TL_account_getTheme struct {
	format string
	theme  TL // InputTheme
}

type TL_account_getThemes struct {
	format string
	hash   int64
}

type TL_auth_exportLoginToken struct {
	api_id     int32
	api_hash   string
	except_ids []int64
}

type TL_auth_importLoginToken struct {
	token []byte
}

type TL_auth_acceptLoginToken struct {
	token []byte
}

type TL_account_setContentSettings struct {
	flags             int32
	sensitive_enabled bool // (bit flags.0)
}

type TL_account_getContentSettings struct {
}

type TL_channels_getInactiveChannels struct {
}

type TL_account_getMultiWallPapers struct {
	wallpapers []TL // InputWallPaper
}

type TL_messages_getPollVotes struct {
	flags  int32
	peer   TL // InputPeer
	id     int32
	option []byte // (bit flags.0)
	offset string // (bit flags.1)
	limit  int32
}

type TL_messages_toggleStickerSets struct {
	flags       int32
	uninstall   bool // (bit flags.0)
	archive     bool // (bit flags.1)
	unarchive   bool // (bit flags.2)
	stickersets []TL // InputStickerSet
}

type TL_payments_getBankCardData struct {
	number string
}

type TL_messages_getDialogFilters struct {
}

type TL_messages_getSuggestedDialogFilters struct {
}

type TL_messages_updateDialogFilter struct {
	flags  int32
	id     int32
	filter TL // (bit flags.0) | DialogFilter
}

type TL_messages_updateDialogFiltersOrder struct {
	order []int32
}

type TL_stats_getBroadcastStats struct {
	flags   int32
	dark    bool // (bit flags.0)
	channel TL   // InputChannel
}

type TL_stats_loadAsyncGraph struct {
	flags int32
	token string
	x     int64 // (bit flags.0)
}

type TL_stickers_setStickerSetThumb struct {
	flags             int32
	stickerset        TL    // InputStickerSet
	thumb             TL    // (bit flags.0) | InputDocument
	thumb_document_id int64 // (bit flags.1)
}

type TL_bots_setBotCommands struct {
	scope     TL // BotCommandScope
	lang_code string
	commands  []TL // BotCommand
}

type TL_messages_getOldFeaturedStickers struct {
	offset int32
	limit  int32
	hash   int64
}

type TL_help_getPromoData struct {
}

type TL_help_hidePromoData struct {
	peer TL // InputPeer
}

type TL_phone_sendSignalingData struct {
	peer TL // InputPhoneCall
	data []byte
}

type TL_stats_getMegagroupStats struct {
	flags   int32
	dark    bool // (bit flags.0)
	channel TL   // InputChannel
}

type TL_account_getGlobalPrivacySettings struct {
}

type TL_account_setGlobalPrivacySettings struct {
	settings TL // GlobalPrivacySettings
}

type TL_help_dismissSuggestion struct {
	peer       TL // InputPeer
	suggestion string
}

type TL_help_getCountriesList struct {
	lang_code string
	hash      int32
}

type TL_messages_getReplies struct {
	peer        TL // InputPeer
	msg_id      int32
	offset_id   int32
	offset_date int32
	add_offset  int32
	limit       int32
	max_id      int32
	min_id      int32
	hash        int64
}

type TL_messages_getDiscussionMessage struct {
	peer   TL // InputPeer
	msg_id int32
}

type TL_messages_readDiscussion struct {
	peer        TL // InputPeer
	msg_id      int32
	read_max_id int32
}

type TL_contacts_blockFromReplies struct {
	flags          int32
	delete_message bool // (bit flags.0)
	delete_history bool // (bit flags.1)
	report_spam    bool // (bit flags.2)
	msg_id         int32
}

type TL_stats_getMessagePublicForwards struct {
	channel TL // InputChannel
	msg_id  int32
	offset  string
	limit   int32
}

type TL_stats_getMessageStats struct {
	flags   int32
	dark    bool // (bit flags.0)
	channel TL   // InputChannel
	msg_id  int32
}

type TL_messages_unpinAllMessages struct {
	flags      int32
	peer       TL    // InputPeer
	top_msg_id int32 // (bit flags.0)
}

type TL_phone_createGroupCall struct {
	flags         int32
	rtmp_stream   bool // (bit flags.2)
	peer          TL   // InputPeer
	random_id     int32
	title         string // (bit flags.0)
	schedule_date int32  // (bit flags.1)
}

type TL_phone_joinGroupCall struct {
	flags         int32
	muted         bool   // (bit flags.0)
	video_stopped bool   // (bit flags.2)
	call          TL     // InputGroupCall
	join_as       TL     // InputPeer
	invite_hash   string // (bit flags.1)
	params        TL     // DataJSON
}

type TL_phone_leaveGroupCall struct {
	call   TL // InputGroupCall
	source int32
}

type TL_phone_inviteToGroupCall struct {
	call  TL   // InputGroupCall
	users []TL // InputUser
}

type TL_phone_discardGroupCall struct {
	call TL // InputGroupCall
}

type TL_phone_toggleGroupCallSettings struct {
	flags             int32
	reset_invite_hash bool // (bit flags.1)
	call              TL   // InputGroupCall
	join_muted        TL   // (bit flags.0) | Bool
}

type TL_phone_getGroupCall struct {
	call  TL // InputGroupCall
	limit int32
}

type TL_phone_getGroupParticipants struct {
	call    TL   // InputGroupCall
	ids     []TL // InputPeer
	sources []int32
	offset  string
	limit   int32
}

type TL_phone_checkGroupCall struct {
	call    TL // InputGroupCall
	sources []int32
}

type TL_messages_deleteChat struct {
	chat_id int64
}

type TL_messages_deletePhoneCallHistory struct {
	flags  int32
	revoke bool // (bit flags.0)
}

type TL_messages_checkHistoryImport struct {
	import_head string
}

type TL_messages_initHistoryImport struct {
	peer        TL // InputPeer
	file        TL // InputFile
	media_count int32
}

type TL_messages_uploadImportedMedia struct {
	peer      TL // InputPeer
	import_id int64
	file_name string
	media     TL // InputMedia
}

type TL_messages_startHistoryImport struct {
	peer      TL // InputPeer
	import_id int64
}

type TL_messages_getExportedChatInvites struct {
	flags       int32
	revoked     bool   // (bit flags.3)
	peer        TL     // InputPeer
	admin_id    TL     // InputUser
	offset_date int32  // (bit flags.2)
	offset_link string // (bit flags.2)
	limit       int32
}

type TL_messages_getExportedChatInvite struct {
	peer TL // InputPeer
	link string
}

type TL_messages_editExportedChatInvite struct {
	flags          int32
	revoked        bool // (bit flags.2)
	peer           TL   // InputPeer
	link           string
	expire_date    int32  // (bit flags.0)
	usage_limit    int32  // (bit flags.1)
	request_needed TL     // (bit flags.3) | Bool
	title          string // (bit flags.4)
}

type TL_messages_deleteRevokedExportedChatInvites struct {
	peer     TL // InputPeer
	admin_id TL // InputUser
}

type TL_messages_deleteExportedChatInvite struct {
	peer TL // InputPeer
	link string
}

type TL_messages_getAdminsWithInvites struct {
	peer TL // InputPeer
}

type TL_messages_getChatInviteImporters struct {
	flags                int32
	requested            bool   // (bit flags.0)
	subscription_expired bool   // (bit flags.3)
	peer                 TL     // InputPeer
	link                 string // (bit flags.1)
	q                    string // (bit flags.2)
	offset_date          int32
	offset_user          TL // InputUser
	limit                int32
}

type TL_messages_setHistoryTTL struct {
	peer   TL // InputPeer
	period int32
}

type TL_account_reportProfilePhoto struct {
	peer     TL // InputPeer
	photo_id TL // InputPhoto
	reason   TL // ReportReason
	message  string
}

type TL_channels_convertToGigagroup struct {
	channel TL // InputChannel
}

type TL_messages_checkHistoryImportPeer struct {
	peer TL // InputPeer
}

type TL_phone_toggleGroupCallRecord struct {
	flags          int32
	start          bool   // (bit flags.0)
	video          bool   // (bit flags.2)
	call           TL     // InputGroupCall
	title          string // (bit flags.1)
	video_portrait TL     // (bit flags.2) | Bool
}

type TL_phone_editGroupCallParticipant struct {
	flags               int32
	call                TL    // InputGroupCall
	participant         TL    // InputPeer
	muted               TL    // (bit flags.0) | Bool
	volume              int32 // (bit flags.1)
	raise_hand          TL    // (bit flags.2) | Bool
	video_stopped       TL    // (bit flags.3) | Bool
	video_paused        TL    // (bit flags.4) | Bool
	presentation_paused TL    // (bit flags.5) | Bool
}

type TL_phone_editGroupCallTitle struct {
	call  TL // InputGroupCall
	title string
}

type TL_phone_getGroupCallJoinAs struct {
	peer TL // InputPeer
}

type TL_phone_exportGroupCallInvite struct {
	flags           int32
	can_self_unmute bool // (bit flags.0)
	call            TL   // InputGroupCall
}

type TL_phone_toggleGroupCallStartSubscription struct {
	call       TL // InputGroupCall
	subscribed TL // Bool
}

type TL_phone_startScheduledGroupCall struct {
	call TL // InputGroupCall
}

type TL_phone_saveDefaultGroupCallJoinAs struct {
	peer    TL // InputPeer
	join_as TL // InputPeer
}

type TL_phone_joinGroupCallPresentation struct {
	call   TL // InputGroupCall
	params TL // DataJSON
}

type TL_phone_leaveGroupCallPresentation struct {
	call TL // InputGroupCall
}

type TL_stickers_checkShortName struct {
	short_name string
}

type TL_stickers_suggestShortName struct {
	title string
}

type TL_bots_resetBotCommands struct {
	scope     TL // BotCommandScope
	lang_code string
}

type TL_bots_getBotCommands struct {
	scope     TL // BotCommandScope
	lang_code string
}

type TL_account_resetPassword struct {
}

type TL_account_declinePasswordReset struct {
}

type TL_auth_checkRecoveryPassword struct {
	code string
}

type TL_account_getChatThemes struct {
	hash int64
}

type TL_messages_setChatTheme struct {
	peer     TL // InputPeer
	emoticon string
}

type TL_channels_viewSponsoredMessage struct {
	channel   TL // InputChannel
	random_id []byte
}

type TL_channels_getSponsoredMessages struct {
	channel TL // InputChannel
}

type TL_messages_getMessageReadParticipants struct {
	peer   TL // InputPeer
	msg_id int32
}

type TL_messages_getSearchResultsCalendar struct {
	flags         int32
	peer          TL // InputPeer
	saved_peer_id TL // (bit flags.2) | InputPeer
	filter        TL // MessagesFilter
	offset_id     int32
	offset_date   int32
}

type TL_messages_getSearchResultsPositions struct {
	flags         int32
	peer          TL // InputPeer
	saved_peer_id TL // (bit flags.2) | InputPeer
	filter        TL // MessagesFilter
	offset_id     int32
	limit         int32
}

type TL_messages_hideChatJoinRequest struct {
	flags    int32
	approved bool // (bit flags.0)
	peer     TL   // InputPeer
	user_id  TL   // InputUser
}

type TL_messages_hideAllChatJoinRequests struct {
	flags    int32
	approved bool   // (bit flags.0)
	peer     TL     // InputPeer
	link     string // (bit flags.1)
}

type TL_messages_toggleNoForwards struct {
	peer    TL // InputPeer
	enabled TL // Bool
}

type TL_messages_saveDefaultSendAs struct {
	peer    TL // InputPeer
	send_as TL // InputPeer
}

type TL_channels_getSendAs struct {
	peer TL // InputPeer
}

type TL_account_setAuthorizationTTL struct {
	authorization_ttl_days int32
}

type TL_account_changeAuthorizationSettings struct {
	flags                       int32
	confirmed                   bool // (bit flags.3)
	hash                        int64
	encrypted_requests_disabled TL // (bit flags.0) | Bool
	call_requests_disabled      TL // (bit flags.1) | Bool
}

type TL_channels_deleteParticipantHistory struct {
	channel     TL // InputChannel
	participant TL // InputPeer
}

type TL_messages_sendReaction struct {
	flags         int32
	big           bool // (bit flags.1)
	add_to_recent bool // (bit flags.2)
	peer          TL   // InputPeer
	msg_id        int32
	reaction      []TL // (bit flags.0) | Reaction
}

type TL_messages_getMessagesReactions struct {
	peer TL // InputPeer
	id   []int32
}

type TL_messages_getMessageReactionsList struct {
	flags    int32
	peer     TL // InputPeer
	id       int32
	reaction TL     // (bit flags.0) | Reaction
	offset   string // (bit flags.1)
	limit    int32
}

type TL_messages_setChatAvailableReactions struct {
	peer                TL // InputPeer
	available_reactions TL // ChatReactions
}

type TL_messages_getAvailableReactions struct {
	hash int32
}

type TL_messages_setDefaultReaction struct {
	reaction TL // Reaction
}

type TL_messages_translateText struct {
	flags   int32
	peer    TL      // (bit flags.0) | InputPeer
	id      []int32 // (bit flags.0)
	text    []TL    // (bit flags.1) | TextWithEntities
	to_lang string
}

type TL_messages_getUnreadReactions struct {
	flags      int32
	peer       TL    // InputPeer
	top_msg_id int32 // (bit flags.0)
	offset_id  int32
	add_offset int32
	limit      int32
	max_id     int32
	min_id     int32
}

type TL_messages_readReactions struct {
	flags      int32
	peer       TL    // InputPeer
	top_msg_id int32 // (bit flags.0)
}

type TL_contacts_resolvePhone struct {
	phone string
}

type TL_phone_getGroupCallStreamChannels struct {
	call TL // InputGroupCall
}

type TL_phone_getGroupCallStreamRtmpUrl struct {
	peer   TL // InputPeer
	revoke TL // Bool
}

type TL_messages_searchSentMedia struct {
	q      string
	filter TL // MessagesFilter
	limit  int32
}

type TL_messages_getAttachMenuBots struct {
	hash int64
}

type TL_messages_getAttachMenuBot struct {
	bot TL // InputUser
}

type TL_messages_toggleBotInAttachMenu struct {
	flags         int32
	write_allowed bool // (bit flags.0)
	bot           TL   // InputUser
	enabled       TL   // Bool
}

type TL_messages_requestWebView struct {
	flags         int32
	from_bot_menu bool   // (bit flags.4)
	silent        bool   // (bit flags.5)
	peer          TL     // InputPeer
	bot           TL     // InputUser
	url           string // (bit flags.1)
	start_param   string // (bit flags.3)
	theme_params  TL     // (bit flags.2) | DataJSON
	platform      string
	reply_to      TL // (bit flags.0) | InputReplyTo
	send_as       TL // (bit flags.13) | InputPeer
}

type TL_messages_prolongWebView struct {
	flags    int32
	silent   bool // (bit flags.5)
	peer     TL   // InputPeer
	bot      TL   // InputUser
	query_id int64
	reply_to TL // (bit flags.0) | InputReplyTo
	send_as  TL // (bit flags.13) | InputPeer
}

type TL_messages_requestSimpleWebView struct {
	flags               int32
	from_switch_webview bool   // (bit flags.1)
	from_side_menu      bool   // (bit flags.2)
	bot                 TL     // InputUser
	url                 string // (bit flags.3)
	start_param         string // (bit flags.4)
	theme_params        TL     // (bit flags.0) | DataJSON
	platform            string
}

type TL_messages_sendWebViewResultMessage struct {
	bot_query_id string
	result       TL // InputBotInlineResult
}

type TL_messages_sendWebViewData struct {
	bot         TL // InputUser
	random_id   int64
	button_text string
	data        string
}

type TL_bots_setBotMenuButton struct {
	user_id TL // InputUser
	button  TL // BotMenuButton
}

type TL_bots_getBotMenuButton struct {
	user_id TL // InputUser
}

type TL_account_getSavedRingtones struct {
	hash int64
}

type TL_account_saveRingtone struct {
	id     TL // InputDocument
	unsave TL // Bool
}

type TL_account_uploadRingtone struct {
	file      TL // InputFile
	file_name string
	mime_type string
}

type TL_bots_setBotBroadcastDefaultAdminRights struct {
	admin_rights TL // ChatAdminRights
}

type TL_bots_setBotGroupDefaultAdminRights struct {
	admin_rights TL // ChatAdminRights
}

type TL_phone_saveCallLog struct {
	peer TL // InputPhoneCall
	file TL // InputFile
}

type TL_channels_toggleJoinToSend struct {
	channel TL // InputChannel
	enabled TL // Bool
}

type TL_channels_toggleJoinRequest struct {
	channel TL // InputChannel
	enabled TL // Bool
}

type TL_payments_exportInvoice struct {
	invoice_media TL // InputMedia
}

type TL_messages_transcribeAudio struct {
	peer   TL // InputPeer
	msg_id int32
}

type TL_messages_rateTranscribedAudio struct {
	peer             TL // InputPeer
	msg_id           int32
	transcription_id int64
	good             TL // Bool
}

type TL_payments_assignAppStoreTransaction struct {
	receipt []byte
	purpose TL // InputStorePaymentPurpose
}

type TL_payments_assignPlayMarketTransaction struct {
	receipt TL // DataJSON
	purpose TL // InputStorePaymentPurpose
}

type TL_payments_canPurchasePremium struct {
	purpose TL // InputStorePaymentPurpose
}

type TL_help_getPremiumPromo struct {
}

type TL_messages_getCustomEmojiDocuments struct {
	document_id []int64
}

type TL_messages_getEmojiStickers struct {
	hash int64
}

type TL_messages_getFeaturedEmojiStickers struct {
	hash int64
}

type TL_account_updateEmojiStatus struct {
	emoji_status TL // EmojiStatus
}

type TL_account_getDefaultEmojiStatuses struct {
	hash int64
}

type TL_account_getRecentEmojiStatuses struct {
	hash int64
}

type TL_account_clearRecentEmojiStatuses struct {
}

type TL_messages_reportReaction struct {
	peer          TL // InputPeer
	id            int32
	reaction_peer TL // InputPeer
}

type TL_messages_getTopReactions struct {
	limit int32
	hash  int64
}

type TL_messages_getRecentReactions struct {
	limit int32
	hash  int64
}

type TL_messages_clearRecentReactions struct {
}

type TL_messages_getExtendedMedia struct {
	peer TL // InputPeer
	id   []int32
}

type TL_auth_importWebTokenAuthorization struct {
	api_id         int32
	api_hash       string
	web_auth_token string
}

type TL_account_reorderUsernames struct {
	order []string
}

type TL_account_toggleUsername struct {
	username string
	active   TL // Bool
}

type TL_channels_reorderUsernames struct {
	channel TL // InputChannel
	order   []string
}

type TL_channels_toggleUsername struct {
	channel  TL // InputChannel
	username string
	active   TL // Bool
}

type TL_channels_deactivateAllUsernames struct {
	channel TL // InputChannel
}

type TL_channels_toggleForum struct {
	channel TL // InputChannel
	enabled TL // Bool
}

type TL_channels_createForumTopic struct {
	flags         int32
	channel       TL // InputChannel
	title         string
	icon_color    int32 // (bit flags.0)
	icon_emoji_id int64 // (bit flags.3)
	random_id     int64
	send_as       TL // (bit flags.2) | InputPeer
}

type TL_channels_getForumTopics struct {
	flags        int32
	channel      TL     // InputChannel
	q            string // (bit flags.0)
	offset_date  int32
	offset_id    int32
	offset_topic int32
	limit        int32
}

type TL_channels_getForumTopicsByID struct {
	channel TL // InputChannel
	topics  []int32
}

type TL_channels_editForumTopic struct {
	flags         int32
	channel       TL // InputChannel
	topic_id      int32
	title         string // (bit flags.0)
	icon_emoji_id int64  // (bit flags.1)
	closed        TL     // (bit flags.2) | Bool
	hidden        TL     // (bit flags.3) | Bool
}

type TL_channels_updatePinnedForumTopic struct {
	channel  TL // InputChannel
	topic_id int32
	pinned   TL // Bool
}

type TL_channels_deleteTopicHistory struct {
	channel    TL // InputChannel
	top_msg_id int32
}

type TL_channels_reorderPinnedForumTopics struct {
	flags   int32
	force   bool // (bit flags.0)
	channel TL   // InputChannel
	order   []int32
}

type TL_channels_toggleAntiSpam struct {
	channel TL // InputChannel
	enabled TL // Bool
}

type TL_channels_reportAntiSpamFalsePositive struct {
	channel TL // InputChannel
	msg_id  int32
}

type TL_messages_setDefaultHistoryTTL struct {
	period int32
}

type TL_messages_getDefaultHistoryTTL struct {
}

type TL_contacts_exportContactToken struct {
}

type TL_contacts_importContactToken struct {
	token string
}

type TL_photos_uploadContactProfilePhoto struct {
	flags              int32
	suggest            bool    // (bit flags.3)
	save               bool    // (bit flags.4)
	user_id            TL      // InputUser
	file               TL      // (bit flags.0) | InputFile
	video              TL      // (bit flags.1) | InputFile
	video_start_ts     float64 // (bit flags.2)
	video_emoji_markup TL      // (bit flags.5) | VideoSize
}

type TL_channels_toggleParticipantsHidden struct {
	channel TL // InputChannel
	enabled TL // Bool
}

type TL_messages_sendBotRequestedPeer struct {
	peer            TL // InputPeer
	msg_id          int32
	button_id       int32
	requested_peers []TL // InputPeer
}

type TL_account_getDefaultProfilePhotoEmojis struct {
	hash int64
}

type TL_account_getDefaultGroupPhotoEmojis struct {
	hash int64
}

type TL_auth_requestFirebaseSms struct {
	flags            int32
	phone_number     string
	phone_code_hash  string
	safety_net_token string // (bit flags.0)
	ios_push_secret  string // (bit flags.1)
}

type TL_messages_getEmojiGroups struct {
	hash int32
}

type TL_messages_getEmojiStatusGroups struct {
	hash int32
}

type TL_messages_getEmojiProfilePhotoGroups struct {
	hash int32
}

type TL_messages_searchCustomEmoji struct {
	emoticon string
	hash     int64
}

type TL_messages_togglePeerTranslations struct {
	flags    int32
	disabled bool // (bit flags.0)
	peer     TL   // InputPeer
}

type TL_account_getAutoSaveSettings struct {
}

type TL_account_saveAutoSaveSettings struct {
	flags      int32
	users      bool // (bit flags.0)
	chats      bool // (bit flags.1)
	broadcasts bool // (bit flags.2)
	peer       TL   // (bit flags.3) | InputPeer
	settings   TL   // AutoSaveSettings
}

type TL_account_deleteAutoSaveExceptions struct {
}

type TL_stickers_changeSticker struct {
	flags       int32
	sticker     TL     // InputDocument
	emoji       string // (bit flags.0)
	mask_coords TL     // (bit flags.1) | MaskCoords
	keywords    string // (bit flags.2)
}

type TL_stickers_renameStickerSet struct {
	stickerset TL // InputStickerSet
	title      string
}

type TL_stickers_deleteStickerSet struct {
	stickerset TL // InputStickerSet
}

type TL_messages_getBotApp struct {
	app  TL // InputBotApp
	hash int64
}

type TL_messages_requestAppWebView struct {
	flags         int32
	write_allowed bool   // (bit flags.0)
	peer          TL     // InputPeer
	app           TL     // InputBotApp
	start_param   string // (bit flags.1)
	theme_params  TL     // (bit flags.2) | DataJSON
	platform      string
}

type TL_bots_setBotInfo struct {
	flags       int32
	bot         TL // (bit flags.2) | InputUser
	lang_code   string
	name        string // (bit flags.3)
	about       string // (bit flags.0)
	description string // (bit flags.1)
}

type TL_bots_getBotInfo struct {
	flags     int32
	bot       TL // (bit flags.0) | InputUser
	lang_code string
}

type TL_auth_resetLoginEmail struct {
	phone_number    string
	phone_code_hash string
}

type TL_chatlists_exportChatlistInvite struct {
	chatlist TL // InputChatlist
	title    string
	peers    []TL // InputPeer
}

type TL_chatlists_deleteExportedInvite struct {
	chatlist TL // InputChatlist
	slug     string
}

type TL_chatlists_editExportedInvite struct {
	flags    int32
	chatlist TL // InputChatlist
	slug     string
	title    string // (bit flags.1)
	peers    []TL   // (bit flags.2) | InputPeer
}

type TL_chatlists_getExportedInvites struct {
	chatlist TL // InputChatlist
}

type TL_chatlists_checkChatlistInvite struct {
	slug string
}

type TL_chatlists_joinChatlistInvite struct {
	slug  string
	peers []TL // InputPeer
}

type TL_chatlists_getChatlistUpdates struct {
	chatlist TL // InputChatlist
}

type TL_chatlists_joinChatlistUpdates struct {
	chatlist TL   // InputChatlist
	peers    []TL // InputPeer
}

type TL_chatlists_hideChatlistUpdates struct {
	chatlist TL // InputChatlist
}

type TL_chatlists_getLeaveChatlistSuggestions struct {
	chatlist TL // InputChatlist
}

type TL_chatlists_leaveChatlist struct {
	chatlist TL   // InputChatlist
	peers    []TL // InputPeer
}

type TL_bots_reorderUsernames struct {
	bot   TL // InputUser
	order []string
}

type TL_bots_toggleUsername struct {
	bot      TL // InputUser
	username string
	active   TL // Bool
}

type TL_messages_setChatWallPaper struct {
	flags     int32
	for_both  bool  // (bit flags.3)
	revert    bool  // (bit flags.4)
	peer      TL    // InputPeer
	wallpaper TL    // (bit flags.0) | InputWallPaper
	settings  TL    // (bit flags.2) | WallPaperSettings
	id        int32 // (bit flags.1)
}

type TL_account_invalidateSignInCodes struct {
	codes []string
}

type TL_channels_clickSponsoredMessage struct {
	channel   TL // InputChannel
	random_id []byte
}

type TL_contacts_editCloseFriends struct {
	id []int64
}

type TL_stories_canSendStory struct {
	peer TL // InputPeer
}

type TL_stories_sendStory struct {
	flags          int32
	pinned         bool   // (bit flags.2)
	noforwards     bool   // (bit flags.4)
	fwd_modified   bool   // (bit flags.7)
	peer           TL     // InputPeer
	media          TL     // InputMedia
	media_areas    []TL   // (bit flags.5) | MediaArea
	caption        string // (bit flags.0)
	entities       []TL   // (bit flags.1) | MessageEntity
	privacy_rules  []TL   // InputPrivacyRule
	random_id      int64
	period         int32 // (bit flags.3)
	fwd_from_id    TL    // (bit flags.6) | InputPeer
	fwd_from_story int32 // (bit flags.6)
}

type TL_stories_editStory struct {
	flags         int32
	peer          TL // InputPeer
	id            int32
	media         TL     // (bit flags.0) | InputMedia
	media_areas   []TL   // (bit flags.3) | MediaArea
	caption       string // (bit flags.1)
	entities      []TL   // (bit flags.1) | MessageEntity
	privacy_rules []TL   // (bit flags.2) | InputPrivacyRule
}

type TL_stories_deleteStories struct {
	peer TL // InputPeer
	id   []int32
}

type TL_stories_togglePinned struct {
	peer   TL // InputPeer
	id     []int32
	pinned TL // Bool
}

type TL_stories_getAllStories struct {
	flags  int32
	next   bool   // (bit flags.1)
	hidden bool   // (bit flags.2)
	state  string // (bit flags.0)
}

type TL_stories_getPinnedStories struct {
	peer      TL // InputPeer
	offset_id int32
	limit     int32
}

type TL_stories_getStoriesArchive struct {
	peer      TL // InputPeer
	offset_id int32
	limit     int32
}

type TL_stories_getStoriesByID struct {
	peer TL // InputPeer
	id   []int32
}

type TL_stories_toggleAllStoriesHidden struct {
	hidden TL // Bool
}

type TL_stories_readStories struct {
	peer   TL // InputPeer
	max_id int32
}

type TL_stories_incrementStoryViews struct {
	peer TL // InputPeer
	id   []int32
}

type TL_stories_getStoryViewsList struct {
	flags           int32
	just_contacts   bool   // (bit flags.0)
	reactions_first bool   // (bit flags.2)
	forwards_first  bool   // (bit flags.3)
	peer            TL     // InputPeer
	q               string // (bit flags.1)
	id              int32
	offset          string
	limit           int32
}

type TL_stories_getStoriesViews struct {
	peer TL // InputPeer
	id   []int32
}

type TL_stories_exportStoryLink struct {
	peer TL // InputPeer
	id   int32
}

type TL_stories_report struct {
	peer    TL // InputPeer
	id      []int32
	reason  TL // ReportReason
	message string
}

type TL_stories_activateStealthMode struct {
	flags  int32
	past   bool // (bit flags.0)
	future bool // (bit flags.1)
}

type TL_contacts_setBlocked struct {
	flags           int32
	my_stories_from bool // (bit flags.0)
	id              []TL // InputPeer
	limit           int32
}

type TL_stories_sendReaction struct {
	flags         int32
	add_to_recent bool // (bit flags.0)
	peer          TL   // InputPeer
	story_id      int32
	reaction      TL // Reaction
}

type TL_bots_canSendMessage struct {
	bot TL // InputUser
}

type TL_bots_allowSendMessage struct {
	bot TL // InputUser
}

type TL_bots_invokeWebViewCustomMethod struct {
	bot           TL // InputUser
	custom_method string
	params        TL // DataJSON
}

type TL_stories_getPeerStories struct {
	peer TL // InputPeer
}

type TL_stories_getAllReadPeerStories struct {
}

type TL_stories_getPeerMaxIDs struct {
	id []TL // InputPeer
}

type TL_stories_getChatsToSend struct {
}

type TL_stories_togglePeerStoriesHidden struct {
	peer   TL // InputPeer
	hidden TL // Bool
}

type TL_payments_getPremiumGiftCodeOptions struct {
	flags      int32
	boost_peer TL // (bit flags.0) | InputPeer
}

type TL_payments_checkGiftCode struct {
	slug string
}

type TL_payments_applyGiftCode struct {
	slug string
}

type TL_payments_getGiveawayInfo struct {
	peer   TL // InputPeer
	msg_id int32
}

type TL_payments_launchPrepaidGiveaway struct {
	peer        TL // InputPeer
	giveaway_id int64
	purpose     TL // InputStorePaymentPurpose
}

type TL_account_updateColor struct {
	flags               int32
	for_profile         bool  // (bit flags.1)
	color               int32 // (bit flags.2)
	background_emoji_id int64 // (bit flags.0)
}

type TL_channels_updateColor struct {
	flags               int32
	for_profile         bool  // (bit flags.1)
	channel             TL    // InputChannel
	color               int32 // (bit flags.2)
	background_emoji_id int64 // (bit flags.0)
}

type TL_account_getDefaultBackgroundEmojis struct {
	hash int64
}

type TL_premium_getBoostsList struct {
	flags  int32
	gifts  bool // (bit flags.0)
	peer   TL   // InputPeer
	offset string
	limit  int32
}

type TL_premium_getMyBoosts struct {
}

type TL_premium_applyBoost struct {
	flags int32
	slots []int32 // (bit flags.0)
	peer  TL      // InputPeer
}

type TL_premium_getBoostsStatus struct {
	peer TL // InputPeer
}

type TL_premium_getUserBoosts struct {
	peer    TL // InputPeer
	user_id TL // InputUser
}

type TL_channels_toggleViewForumAsMessages struct {
	channel TL // InputChannel
	enabled TL // Bool
}

type TL_messages_searchEmojiStickerSets struct {
	flags            int32
	exclude_featured bool // (bit flags.0)
	q                string
	hash             int64
}

type TL_channels_getChannelRecommendations struct {
	channel TL // InputChannel
}

type TL_stats_getStoryStats struct {
	flags int32
	dark  bool // (bit flags.0)
	peer  TL   // InputPeer
	id    int32
}

type TL_stats_getStoryPublicForwards struct {
	peer   TL // InputPeer
	id     int32
	offset string
	limit  int32
}

type TL_help_getPeerColors struct {
	hash int32
}

type TL_help_getPeerProfileColors struct {
	hash int32
}

type TL_stories_getStoryReactionsList struct {
	flags          int32
	forwards_first bool // (bit flags.2)
	peer           TL   // InputPeer
	id             int32
	reaction       TL     // (bit flags.0) | Reaction
	offset         string // (bit flags.1)
	limit          int32
}

type TL_channels_updateEmojiStatus struct {
	channel      TL // InputChannel
	emoji_status TL // EmojiStatus
}

type TL_account_getChannelDefaultEmojiStatuses struct {
	hash int64
}

type TL_account_getChannelRestrictedStatusEmojis struct {
	hash int64
}

type TL_messages_getSavedDialogs struct {
	flags          int32
	exclude_pinned bool // (bit flags.0)
	offset_date    int32
	offset_id      int32
	offset_peer    TL // InputPeer
	limit          int32
	hash           int64
}

type TL_messages_getSavedHistory struct {
	peer        TL // InputPeer
	offset_id   int32
	offset_date int32
	add_offset  int32
	limit       int32
	max_id      int32
	min_id      int32
	hash        int64
}

type TL_messages_deleteSavedHistory struct {
	flags    int32
	peer     TL // InputPeer
	max_id   int32
	min_date int32 // (bit flags.2)
	max_date int32 // (bit flags.3)
}

type TL_messages_getPinnedSavedDialogs struct {
}

type TL_messages_toggleSavedDialogPin struct {
	flags  int32
	pinned bool // (bit flags.0)
	peer   TL   // InputDialogPeer
}

type TL_messages_reorderPinnedSavedDialogs struct {
	flags int32
	force bool // (bit flags.0)
	order []TL // InputDialogPeer
}

func (e TL_boolFalse) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_boolFalse)
	return x.buf
}

func (e TL_boolTrue) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_boolTrue)
	return x.buf
}

func (e TL_true) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_true)
	return x.buf
}

func (e TL_error) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_error)
	x.Int(e.code)
	x.String(e.text)
	return x.buf
}

func (e TL_null) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_null)
	return x.buf
}

func (e TL_inputPeerEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputPeerEmpty)
	return x.buf
}

func (e TL_inputPeerSelf) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputPeerSelf)
	return x.buf
}

func (e TL_inputPeerChat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputPeerChat)
	x.Long(e.chat_id)
	return x.buf
}

func (e TL_inputUserEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputUserEmpty)
	return x.buf
}

func (e TL_inputUserSelf) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputUserSelf)
	return x.buf
}

func (e TL_inputPhoneContact) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputPhoneContact)
	x.Long(e.client_id)
	x.String(e.phone)
	x.String(e.first_name)
	x.String(e.last_name)
	return x.buf
}

func (e TL_inputFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputFile)
	x.Long(e.id)
	x.Int(e.parts)
	x.String(e.name)
	x.String(e.md5_checksum)
	return x.buf
}

func (e TL_inputMediaEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMediaEmpty)
	return x.buf
}

func (e TL_inputMediaUploadedPhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMediaUploadedPhoto)
	x.Int(e.flags)
	x.Bytes(e.file.encode())
	if e.flags&(1<<0) != 0 {
		x.Vector(e.stickers)
	}
	if e.flags&(1<<1) != 0 {
		x.Int(e.ttl_seconds)
	}
	return x.buf
}

func (e TL_inputMediaPhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMediaPhoto)
	x.Int(e.flags)
	x.Bytes(e.id.encode())
	if e.flags&(1<<0) != 0 {
		x.Int(e.ttl_seconds)
	}
	return x.buf
}

func (e TL_inputMediaGeoPoint) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMediaGeoPoint)
	x.Bytes(e.geo_point.encode())
	return x.buf
}

func (e TL_inputMediaContact) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMediaContact)
	x.String(e.phone_number)
	x.String(e.first_name)
	x.String(e.last_name)
	x.String(e.vcard)
	return x.buf
}

func (e TL_inputChatPhotoEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputChatPhotoEmpty)
	return x.buf
}

func (e TL_inputChatUploadedPhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputChatUploadedPhoto)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.file.encode())
	}
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.video.encode())
	}
	if e.flags&(1<<2) != 0 {
		x.Double(e.video_start_ts)
	}
	if e.flags&(1<<3) != 0 {
		x.Bytes(e.video_emoji_markup.encode())
	}
	return x.buf
}

func (e TL_inputChatPhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputChatPhoto)
	x.Bytes(e.id.encode())
	return x.buf
}

func (e TL_inputGeoPointEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputGeoPointEmpty)
	return x.buf
}

func (e TL_inputGeoPoint) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputGeoPoint)
	x.Int(e.flags)
	x.Double(e.lat)
	x.Double(e.long)
	if e.flags&(1<<0) != 0 {
		x.Int(e.accuracy_radius)
	}
	return x.buf
}

func (e TL_inputPhotoEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputPhotoEmpty)
	return x.buf
}

func (e TL_inputPhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputPhoto)
	x.Long(e.id)
	x.Long(e.access_hash)
	x.StringBytes(e.file_reference)
	return x.buf
}

func (e TL_inputFileLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputFileLocation)
	x.Long(e.volume_id)
	x.Int(e.local_id)
	x.Long(e.secret)
	x.StringBytes(e.file_reference)
	return x.buf
}

func (e TL_peerUser) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_peerUser)
	x.Long(e.user_id)
	return x.buf
}

func (e TL_peerChat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_peerChat)
	x.Long(e.chat_id)
	return x.buf
}

func (e TL_storage_fileUnknown) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_storage_fileUnknown)
	return x.buf
}

func (e TL_storage_filePartial) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_storage_filePartial)
	return x.buf
}

func (e TL_storage_fileJpeg) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_storage_fileJpeg)
	return x.buf
}

func (e TL_storage_fileGif) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_storage_fileGif)
	return x.buf
}

func (e TL_storage_filePng) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_storage_filePng)
	return x.buf
}

func (e TL_storage_filePdf) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_storage_filePdf)
	return x.buf
}

func (e TL_storage_fileMp3) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_storage_fileMp3)
	return x.buf
}

func (e TL_storage_fileMov) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_storage_fileMov)
	return x.buf
}

func (e TL_storage_fileMp4) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_storage_fileMp4)
	return x.buf
}

func (e TL_storage_fileWebp) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_storage_fileWebp)
	return x.buf
}

func (e TL_userEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_userEmpty)
	x.Long(e.id)
	return x.buf
}

func (e TL_userProfilePhotoEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_userProfilePhotoEmpty)
	return x.buf
}

func (e TL_userProfilePhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_userProfilePhoto)
	x.Int(e.flags)
	x.Long(e.photo_id)
	if e.flags&(1<<1) != 0 {
		x.StringBytes(e.stripped_thumb)
	}
	x.Int(e.dc_id)
	return x.buf
}

func (e TL_userStatusEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_userStatusEmpty)
	return x.buf
}

func (e TL_userStatusOnline) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_userStatusOnline)
	x.Int(e.expires)
	return x.buf
}

func (e TL_userStatusOffline) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_userStatusOffline)
	x.Int(e.was_online)
	return x.buf
}

func (e TL_chatEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chatEmpty)
	x.Long(e.id)
	return x.buf
}

func (e TL_chat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chat)
	x.Int(e.flags)
	x.Long(e.id)
	x.String(e.title)
	x.Bytes(e.photo.encode())
	x.Int(e.participants_count)
	x.Int(e.date)
	x.Int(e.version)
	if e.flags&(1<<6) != 0 {
		x.Bytes(e.migrated_to.encode())
	}
	if e.flags&(1<<14) != 0 {
		x.Bytes(e.admin_rights.encode())
	}
	if e.flags&(1<<18) != 0 {
		x.Bytes(e.default_banned_rights.encode())
	}
	return x.buf
}

func (e TL_chatForbidden) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chatForbidden)
	x.Long(e.id)
	x.String(e.title)
	return x.buf
}

func (e TL_chatFull) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chatFull)
	x.Int(e.flags)
	x.Long(e.id)
	x.String(e.about)
	x.Bytes(e.participants.encode())
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.chat_photo.encode())
	}
	x.Bytes(e.notify_settings.encode())
	if e.flags&(1<<13) != 0 {
		x.Bytes(e.exported_invite.encode())
	}
	if e.flags&(1<<3) != 0 {
		x.Vector(e.bot_info)
	}
	if e.flags&(1<<6) != 0 {
		x.Int(e.pinned_msg_id)
	}
	if e.flags&(1<<11) != 0 {
		x.Int(e.folder_id)
	}
	if e.flags&(1<<12) != 0 {
		x.Bytes(e.call.encode())
	}
	if e.flags&(1<<14) != 0 {
		x.Int(e.ttl_period)
	}
	if e.flags&(1<<15) != 0 {
		x.Bytes(e.groupcall_default_join_as.encode())
	}
	if e.flags&(1<<16) != 0 {
		x.String(e.theme_emoticon)
	}
	if e.flags&(1<<17) != 0 {
		x.Int(e.requests_pending)
	}
	if e.flags&(1<<17) != 0 {
		x.VectorLong(e.recent_requesters)
	}
	if e.flags&(1<<18) != 0 {
		x.Bytes(e.available_reactions.encode())
	}
	return x.buf
}

func (e TL_chatParticipant) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chatParticipant)
	x.Long(e.user_id)
	x.Long(e.inviter_id)
	x.Int(e.date)
	return x.buf
}

func (e TL_chatParticipantsForbidden) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chatParticipantsForbidden)
	x.Int(e.flags)
	x.Long(e.chat_id)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.self_participant.encode())
	}
	return x.buf
}

func (e TL_chatParticipants) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chatParticipants)
	x.Long(e.chat_id)
	x.Vector(e.participants)
	x.Int(e.version)
	return x.buf
}

func (e TL_chatPhotoEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chatPhotoEmpty)
	return x.buf
}

func (e TL_chatPhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chatPhoto)
	x.Int(e.flags)
	x.Long(e.photo_id)
	if e.flags&(1<<1) != 0 {
		x.StringBytes(e.stripped_thumb)
	}
	x.Int(e.dc_id)
	return x.buf
}

func (e TL_messageEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageEmpty)
	x.Int(e.flags)
	x.Int(e.id)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.peer_id.encode())
	}
	return x.buf
}

func (e TL_message) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_message)
	x.Int(e.flags)
	x.Int(e.id)
	if e.flags&(1<<8) != 0 {
		x.Bytes(e.from_id.encode())
	}
	x.Bytes(e.peer_id.encode())
	if e.flags&(1<<28) != 0 {
		x.Bytes(e.saved_peer_id.encode())
	}
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.fwd_from.encode())
	}
	if e.flags&(1<<11) != 0 {
		x.Long(e.via_bot_id)
	}
	if e.flags&(1<<3) != 0 {
		x.Bytes(e.reply_to.encode())
	}
	x.Int(e.date)
	x.String(e.message)
	if e.flags&(1<<9) != 0 {
		x.Bytes(e.media.encode())
	}
	if e.flags&(1<<6) != 0 {
		x.Bytes(e.reply_markup.encode())
	}
	if e.flags&(1<<7) != 0 {
		x.Vector(e.entities)
	}
	if e.flags&(1<<10) != 0 {
		x.Int(e.views)
	}
	if e.flags&(1<<10) != 0 {
		x.Int(e.forwards)
	}
	if e.flags&(1<<23) != 0 {
		x.Bytes(e.replies.encode())
	}
	if e.flags&(1<<15) != 0 {
		x.Int(e.edit_date)
	}
	if e.flags&(1<<16) != 0 {
		x.String(e.post_author)
	}
	if e.flags&(1<<17) != 0 {
		x.Long(e.grouped_id)
	}
	if e.flags&(1<<20) != 0 {
		x.Bytes(e.reactions.encode())
	}
	if e.flags&(1<<22) != 0 {
		x.Vector(e.restriction_reason)
	}
	if e.flags&(1<<25) != 0 {
		x.Int(e.ttl_period)
	}
	return x.buf
}

func (e TL_messageService) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageService)
	x.Int(e.flags)
	x.Int(e.id)
	if e.flags&(1<<8) != 0 {
		x.Bytes(e.from_id.encode())
	}
	x.Bytes(e.peer_id.encode())
	if e.flags&(1<<3) != 0 {
		x.Bytes(e.reply_to.encode())
	}
	x.Int(e.date)
	x.Bytes(e.action.encode())
	if e.flags&(1<<25) != 0 {
		x.Int(e.ttl_period)
	}
	return x.buf
}

func (e TL_messageMediaEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageMediaEmpty)
	return x.buf
}

func (e TL_messageMediaPhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageMediaPhoto)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.photo.encode())
	}
	if e.flags&(1<<2) != 0 {
		x.Int(e.ttl_seconds)
	}
	return x.buf
}

func (e TL_messageMediaGeo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageMediaGeo)
	x.Bytes(e.geo.encode())
	return x.buf
}

func (e TL_messageMediaContact) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageMediaContact)
	x.String(e.phone_number)
	x.String(e.first_name)
	x.String(e.last_name)
	x.String(e.vcard)
	x.Long(e.user_id)
	return x.buf
}

func (e TL_messageMediaUnsupported) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageMediaUnsupported)
	return x.buf
}

func (e TL_messageActionEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionEmpty)
	return x.buf
}

func (e TL_messageActionChatCreate) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionChatCreate)
	x.String(e.title)
	x.VectorLong(e.users)
	return x.buf
}

func (e TL_messageActionChatEditTitle) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionChatEditTitle)
	x.String(e.title)
	return x.buf
}

func (e TL_messageActionChatEditPhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionChatEditPhoto)
	x.Bytes(e.photo.encode())
	return x.buf
}

func (e TL_messageActionChatDeletePhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionChatDeletePhoto)
	return x.buf
}

func (e TL_messageActionChatAddUser) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionChatAddUser)
	x.VectorLong(e.users)
	return x.buf
}

func (e TL_messageActionChatDeleteUser) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionChatDeleteUser)
	x.Long(e.user_id)
	return x.buf
}

func (e TL_dialog) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_dialog)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	x.Int(e.top_message)
	x.Int(e.read_inbox_max_id)
	x.Int(e.read_outbox_max_id)
	x.Int(e.unread_count)
	x.Int(e.unread_mentions_count)
	x.Int(e.unread_reactions_count)
	x.Bytes(e.notify_settings.encode())
	if e.flags&(1<<0) != 0 {
		x.Int(e.pts)
	}
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.draft.encode())
	}
	if e.flags&(1<<4) != 0 {
		x.Int(e.folder_id)
	}
	if e.flags&(1<<5) != 0 {
		x.Int(e.ttl_period)
	}
	return x.buf
}

func (e TL_photoEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_photoEmpty)
	x.Long(e.id)
	return x.buf
}

func (e TL_photo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_photo)
	x.Int(e.flags)
	x.Long(e.id)
	x.Long(e.access_hash)
	x.StringBytes(e.file_reference)
	x.Int(e.date)
	x.Vector(e.sizes)
	if e.flags&(1<<1) != 0 {
		x.Vector(e.video_sizes)
	}
	x.Int(e.dc_id)
	return x.buf
}

func (e TL_photoSizeEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_photoSizeEmpty)
	x.String(e._type)
	return x.buf
}

func (e TL_photoSize) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_photoSize)
	x.String(e._type)
	x.Int(e.w)
	x.Int(e.h)
	x.Int(e.size)
	return x.buf
}

func (e TL_photoCachedSize) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_photoCachedSize)
	x.String(e._type)
	x.Int(e.w)
	x.Int(e.h)
	x.StringBytes(e.bytes)
	return x.buf
}

func (e TL_geoPointEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_geoPointEmpty)
	return x.buf
}

func (e TL_geoPoint) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_geoPoint)
	x.Int(e.flags)
	x.Double(e.long)
	x.Double(e.lat)
	x.Long(e.access_hash)
	if e.flags&(1<<0) != 0 {
		x.Int(e.accuracy_radius)
	}
	return x.buf
}

func (e TL_auth_sentCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_sentCode)
	x.Int(e.flags)
	x.Bytes(e._type.encode())
	x.String(e.phone_code_hash)
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.next_type.encode())
	}
	if e.flags&(1<<2) != 0 {
		x.Int(e.timeout)
	}
	return x.buf
}

func (e TL_auth_authorization) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_authorization)
	x.Int(e.flags)
	if e.flags&(1<<1) != 0 {
		x.Int(e.otherwise_relogin_days)
	}
	if e.flags&(1<<0) != 0 {
		x.Int(e.tmp_sessions)
	}
	if e.flags&(1<<2) != 0 {
		x.StringBytes(e.future_auth_token)
	}
	x.Bytes(e.user.encode())
	return x.buf
}

func (e TL_auth_exportedAuthorization) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_exportedAuthorization)
	x.Long(e.id)
	x.StringBytes(e.bytes)
	return x.buf
}

func (e TL_inputNotifyPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputNotifyPeer)
	x.Bytes(e.peer.encode())
	return x.buf
}

func (e TL_inputNotifyUsers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputNotifyUsers)
	return x.buf
}

func (e TL_inputNotifyChats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputNotifyChats)
	return x.buf
}

func (e TL_inputPeerNotifySettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputPeerNotifySettings)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.show_previews.encode())
	}
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.silent.encode())
	}
	if e.flags&(1<<2) != 0 {
		x.Int(e.mute_until)
	}
	if e.flags&(1<<3) != 0 {
		x.Bytes(e.sound.encode())
	}
	if e.flags&(1<<6) != 0 {
		x.Bytes(e.stories_muted.encode())
	}
	if e.flags&(1<<7) != 0 {
		x.Bytes(e.stories_hide_sender.encode())
	}
	if e.flags&(1<<8) != 0 {
		x.Bytes(e.stories_sound.encode())
	}
	return x.buf
}

func (e TL_peerNotifySettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_peerNotifySettings)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.show_previews.encode())
	}
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.silent.encode())
	}
	if e.flags&(1<<2) != 0 {
		x.Int(e.mute_until)
	}
	if e.flags&(1<<3) != 0 {
		x.Bytes(e.ios_sound.encode())
	}
	if e.flags&(1<<4) != 0 {
		x.Bytes(e.android_sound.encode())
	}
	if e.flags&(1<<5) != 0 {
		x.Bytes(e.other_sound.encode())
	}
	if e.flags&(1<<6) != 0 {
		x.Bytes(e.stories_muted.encode())
	}
	if e.flags&(1<<7) != 0 {
		x.Bytes(e.stories_hide_sender.encode())
	}
	if e.flags&(1<<8) != 0 {
		x.Bytes(e.stories_ios_sound.encode())
	}
	if e.flags&(1<<9) != 0 {
		x.Bytes(e.stories_android_sound.encode())
	}
	if e.flags&(1<<10) != 0 {
		x.Bytes(e.stories_other_sound.encode())
	}
	return x.buf
}

func (e TL_peerSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_peerSettings)
	x.Int(e.flags)
	if e.flags&(1<<6) != 0 {
		x.Int(e.geo_distance)
	}
	if e.flags&(1<<9) != 0 {
		x.String(e.request_chat_title)
	}
	if e.flags&(1<<9) != 0 {
		x.Int(e.request_chat_date)
	}
	return x.buf
}

func (e TL_wallPaper) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_wallPaper)
	x.Long(e.id)
	x.Int(e.flags)
	x.Long(e.access_hash)
	x.String(e.slug)
	x.Bytes(e.document.encode())
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.settings.encode())
	}
	return x.buf
}

func (e TL_inputReportReasonSpam) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputReportReasonSpam)
	return x.buf
}

func (e TL_inputReportReasonViolence) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputReportReasonViolence)
	return x.buf
}

func (e TL_inputReportReasonPornography) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputReportReasonPornography)
	return x.buf
}

func (e TL_inputReportReasonChildAbuse) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputReportReasonChildAbuse)
	return x.buf
}

func (e TL_inputReportReasonOther) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputReportReasonOther)
	return x.buf
}

func (e TL_userFull) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_userFull)
	x.Int(e.flags)
	x.Long(e.id)
	if e.flags&(1<<1) != 0 {
		x.String(e.about)
	}
	x.Bytes(e.settings.encode())
	if e.flags&(1<<21) != 0 {
		x.Bytes(e.personal_photo.encode())
	}
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.profile_photo.encode())
	}
	if e.flags&(1<<22) != 0 {
		x.Bytes(e.fallback_photo.encode())
	}
	x.Bytes(e.notify_settings.encode())
	if e.flags&(1<<3) != 0 {
		x.Bytes(e.bot_info.encode())
	}
	if e.flags&(1<<6) != 0 {
		x.Int(e.pinned_msg_id)
	}
	x.Int(e.common_chats_count)
	if e.flags&(1<<11) != 0 {
		x.Int(e.folder_id)
	}
	if e.flags&(1<<14) != 0 {
		x.Int(e.ttl_period)
	}
	if e.flags&(1<<15) != 0 {
		x.String(e.theme_emoticon)
	}
	if e.flags&(1<<16) != 0 {
		x.String(e.private_forward_name)
	}
	if e.flags&(1<<17) != 0 {
		x.Bytes(e.bot_group_admin_rights.encode())
	}
	if e.flags&(1<<18) != 0 {
		x.Bytes(e.bot_broadcast_admin_rights.encode())
	}
	if e.flags&(1<<19) != 0 {
		x.Vector(e.premium_gifts)
	}
	if e.flags&(1<<24) != 0 {
		x.Bytes(e.wallpaper.encode())
	}
	if e.flags&(1<<25) != 0 {
		x.Bytes(e.stories.encode())
	}
	return x.buf
}

func (e TL_contact) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_contact)
	x.Long(e.user_id)
	x.Bytes(e.mutual.encode())
	return x.buf
}

func (e TL_importedContact) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_importedContact)
	x.Long(e.user_id)
	x.Long(e.client_id)
	return x.buf
}

func (e TL_contactStatus) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_contactStatus)
	x.Long(e.user_id)
	x.Bytes(e.status.encode())
	return x.buf
}

func (e TL_contacts_contactsNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_contacts_contactsNotModified)
	return x.buf
}

func (e TL_contacts_contacts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_contacts_contacts)
	x.Vector(e.contacts)
	x.Int(e.saved_count)
	x.Vector(e.users)
	return x.buf
}

func (e TL_contacts_importedContacts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_contacts_importedContacts)
	x.Vector(e.imported)
	x.Vector(e.popular_invites)
	x.VectorLong(e.retry_contacts)
	x.Vector(e.users)
	return x.buf
}

func (e TL_contacts_blocked) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_contacts_blocked)
	x.Vector(e.blocked)
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_contacts_blockedSlice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_contacts_blockedSlice)
	x.Int(e.count)
	x.Vector(e.blocked)
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_messages_dialogs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_dialogs)
	x.Vector(e.dialogs)
	x.Vector(e.messages)
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_messages_dialogsSlice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_dialogsSlice)
	x.Int(e.count)
	x.Vector(e.dialogs)
	x.Vector(e.messages)
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_messages_messages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_messages)
	x.Vector(e.messages)
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_messages_messagesSlice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_messagesSlice)
	x.Int(e.flags)
	x.Int(e.count)
	if e.flags&(1<<0) != 0 {
		x.Int(e.next_rate)
	}
	if e.flags&(1<<2) != 0 {
		x.Int(e.offset_id_offset)
	}
	x.Vector(e.messages)
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_messages_chats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_chats)
	x.Vector(e.chats)
	return x.buf
}

func (e TL_messages_chatFull) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_chatFull)
	x.Bytes(e.full_chat.encode())
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_messages_affectedHistory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_affectedHistory)
	x.Int(e.pts)
	x.Int(e.pts_count)
	x.Int(e.offset)
	return x.buf
}

func (e TL_inputMessagesFilterEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMessagesFilterEmpty)
	return x.buf
}

func (e TL_inputMessagesFilterPhotos) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMessagesFilterPhotos)
	return x.buf
}

func (e TL_inputMessagesFilterVideo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMessagesFilterVideo)
	return x.buf
}

func (e TL_inputMessagesFilterPhotoVideo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMessagesFilterPhotoVideo)
	return x.buf
}

func (e TL_inputMessagesFilterDocument) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMessagesFilterDocument)
	return x.buf
}

func (e TL_inputMessagesFilterUrl) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMessagesFilterUrl)
	return x.buf
}

func (e TL_inputMessagesFilterGif) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMessagesFilterGif)
	return x.buf
}

func (e TL_updateNewMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateNewMessage)
	x.Bytes(e.message.encode())
	x.Int(e.pts)
	x.Int(e.pts_count)
	return x.buf
}

func (e TL_updateMessageID) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateMessageID)
	x.Int(e.id)
	x.Long(e.random_id)
	return x.buf
}

func (e TL_updateDeleteMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateDeleteMessages)
	x.VectorInt(e.messages)
	x.Int(e.pts)
	x.Int(e.pts_count)
	return x.buf
}

func (e TL_updateUserTyping) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateUserTyping)
	x.Long(e.user_id)
	x.Bytes(e.action.encode())
	return x.buf
}

func (e TL_updateChatUserTyping) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateChatUserTyping)
	x.Long(e.chat_id)
	x.Bytes(e.from_id.encode())
	x.Bytes(e.action.encode())
	return x.buf
}

func (e TL_updateChatParticipants) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateChatParticipants)
	x.Bytes(e.participants.encode())
	return x.buf
}

func (e TL_updateUserStatus) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateUserStatus)
	x.Long(e.user_id)
	x.Bytes(e.status.encode())
	return x.buf
}

func (e TL_updateUserName) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateUserName)
	x.Long(e.user_id)
	x.String(e.first_name)
	x.String(e.last_name)
	x.Vector(e.usernames)
	return x.buf
}

func (e TL_updateNewAuthorization) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateNewAuthorization)
	x.Int(e.flags)
	x.Long(e.hash)
	if e.flags&(1<<0) != 0 {
		x.Int(e.date)
	}
	if e.flags&(1<<0) != 0 {
		x.String(e.device)
	}
	if e.flags&(1<<0) != 0 {
		x.String(e.location)
	}
	return x.buf
}

func (e TL_updates_state) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updates_state)
	x.Int(e.pts)
	x.Int(e.qts)
	x.Int(e.date)
	x.Int(e.seq)
	x.Int(e.unread_count)
	return x.buf
}

func (e TL_updates_differenceEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updates_differenceEmpty)
	x.Int(e.date)
	x.Int(e.seq)
	return x.buf
}

func (e TL_updates_difference) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updates_difference)
	x.Vector(e.new_messages)
	x.Vector(e.new_encrypted_messages)
	x.Vector(e.other_updates)
	x.Vector(e.chats)
	x.Vector(e.users)
	x.Bytes(e.state.encode())
	return x.buf
}

func (e TL_updates_differenceSlice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updates_differenceSlice)
	x.Vector(e.new_messages)
	x.Vector(e.new_encrypted_messages)
	x.Vector(e.other_updates)
	x.Vector(e.chats)
	x.Vector(e.users)
	x.Bytes(e.intermediate_state.encode())
	return x.buf
}

func (e TL_updatesTooLong) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updatesTooLong)
	return x.buf
}

func (e TL_updateShortMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateShortMessage)
	x.Int(e.flags)
	x.Int(e.id)
	x.Long(e.user_id)
	x.String(e.message)
	x.Int(e.pts)
	x.Int(e.pts_count)
	x.Int(e.date)
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.fwd_from.encode())
	}
	if e.flags&(1<<11) != 0 {
		x.Long(e.via_bot_id)
	}
	if e.flags&(1<<3) != 0 {
		x.Bytes(e.reply_to.encode())
	}
	if e.flags&(1<<7) != 0 {
		x.Vector(e.entities)
	}
	if e.flags&(1<<25) != 0 {
		x.Int(e.ttl_period)
	}
	return x.buf
}

func (e TL_updateShortChatMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateShortChatMessage)
	x.Int(e.flags)
	x.Int(e.id)
	x.Long(e.from_id)
	x.Long(e.chat_id)
	x.String(e.message)
	x.Int(e.pts)
	x.Int(e.pts_count)
	x.Int(e.date)
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.fwd_from.encode())
	}
	if e.flags&(1<<11) != 0 {
		x.Long(e.via_bot_id)
	}
	if e.flags&(1<<3) != 0 {
		x.Bytes(e.reply_to.encode())
	}
	if e.flags&(1<<7) != 0 {
		x.Vector(e.entities)
	}
	if e.flags&(1<<25) != 0 {
		x.Int(e.ttl_period)
	}
	return x.buf
}

func (e TL_updateShort) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateShort)
	x.Bytes(e.update.encode())
	x.Int(e.date)
	return x.buf
}

func (e TL_updatesCombined) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updatesCombined)
	x.Vector(e.updates)
	x.Vector(e.users)
	x.Vector(e.chats)
	x.Int(e.date)
	x.Int(e.seq_start)
	x.Int(e.seq)
	return x.buf
}

func (e TL_updates) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updates)
	x.Vector(e.updates)
	x.Vector(e.users)
	x.Vector(e.chats)
	x.Int(e.date)
	x.Int(e.seq)
	return x.buf
}

func (e TL_photos_photos) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_photos_photos)
	x.Vector(e.photos)
	x.Vector(e.users)
	return x.buf
}

func (e TL_photos_photosSlice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_photos_photosSlice)
	x.Int(e.count)
	x.Vector(e.photos)
	x.Vector(e.users)
	return x.buf
}

func (e TL_photos_photo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_photos_photo)
	x.Bytes(e.photo.encode())
	x.Vector(e.users)
	return x.buf
}

func (e TL_upload_file) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_upload_file)
	x.Bytes(e._type.encode())
	x.Int(e.mtime)
	x.StringBytes(e.bytes)
	return x.buf
}

func (e TL_dcOption) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_dcOption)
	x.Int(e.flags)
	x.Int(e.id)
	x.String(e.ip_address)
	x.Int(e.port)
	if e.flags&(1<<10) != 0 {
		x.StringBytes(e.secret)
	}
	return x.buf
}

func (e TL_config) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_config)
	x.Int(e.flags)
	x.Int(e.date)
	x.Int(e.expires)
	x.Bytes(e.test_mode.encode())
	x.Int(e.this_dc)
	x.Vector(e.dc_options)
	x.String(e.dc_txt_domain_name)
	x.Int(e.chat_size_max)
	x.Int(e.megagroup_size_max)
	x.Int(e.forwarded_count_max)
	x.Int(e.online_update_period_ms)
	x.Int(e.offline_blur_timeout_ms)
	x.Int(e.offline_idle_timeout_ms)
	x.Int(e.online_cloud_timeout_ms)
	x.Int(e.notify_cloud_delay_ms)
	x.Int(e.notify_default_delay_ms)
	x.Int(e.push_chat_period_ms)
	x.Int(e.push_chat_limit)
	x.Int(e.edit_time_limit)
	x.Int(e.revoke_time_limit)
	x.Int(e.revoke_pm_time_limit)
	x.Int(e.rating_e_decay)
	x.Int(e.stickers_recent_limit)
	x.Int(e.channels_read_media_period)
	if e.flags&(1<<0) != 0 {
		x.Int(e.tmp_sessions)
	}
	x.Int(e.call_receive_timeout_ms)
	x.Int(e.call_ring_timeout_ms)
	x.Int(e.call_connect_timeout_ms)
	x.Int(e.call_packet_timeout_ms)
	x.String(e.me_url_prefix)
	if e.flags&(1<<7) != 0 {
		x.String(e.autoupdate_url_prefix)
	}
	if e.flags&(1<<9) != 0 {
		x.String(e.gif_search_username)
	}
	if e.flags&(1<<10) != 0 {
		x.String(e.venue_search_username)
	}
	if e.flags&(1<<11) != 0 {
		x.String(e.img_search_username)
	}
	if e.flags&(1<<12) != 0 {
		x.String(e.static_maps_provider)
	}
	x.Int(e.caption_length_max)
	x.Int(e.message_length_max)
	x.Int(e.webfile_dc_id)
	if e.flags&(1<<2) != 0 {
		x.String(e.suggested_lang_code)
	}
	if e.flags&(1<<2) != 0 {
		x.Int(e.lang_pack_version)
	}
	if e.flags&(1<<2) != 0 {
		x.Int(e.base_lang_pack_version)
	}
	if e.flags&(1<<15) != 0 {
		x.Bytes(e.reactions_default.encode())
	}
	if e.flags&(1<<16) != 0 {
		x.String(e.autologin_token)
	}
	return x.buf
}

func (e TL_nearestDc) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_nearestDc)
	x.String(e.country)
	x.Int(e.this_dc)
	x.Int(e.nearest_dc)
	return x.buf
}

func (e TL_help_appUpdate) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_appUpdate)
	x.Int(e.flags)
	x.Int(e.id)
	x.String(e.version)
	x.String(e.text)
	x.Vector(e.entities)
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.document.encode())
	}
	if e.flags&(1<<2) != 0 {
		x.String(e.url)
	}
	if e.flags&(1<<3) != 0 {
		x.Bytes(e.sticker.encode())
	}
	return x.buf
}

func (e TL_help_noAppUpdate) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_noAppUpdate)
	return x.buf
}

func (e TL_help_inviteText) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_inviteText)
	x.String(e.message)
	return x.buf
}

func (e TL_updateNewEncryptedMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateNewEncryptedMessage)
	x.Bytes(e.message.encode())
	x.Int(e.qts)
	return x.buf
}

func (e TL_updateEncryptedChatTyping) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateEncryptedChatTyping)
	x.Int(e.chat_id)
	return x.buf
}

func (e TL_updateEncryption) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateEncryption)
	x.Bytes(e.chat.encode())
	x.Int(e.date)
	return x.buf
}

func (e TL_updateEncryptedMessagesRead) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateEncryptedMessagesRead)
	x.Int(e.chat_id)
	x.Int(e.max_date)
	x.Int(e.date)
	return x.buf
}

func (e TL_encryptedChatEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_encryptedChatEmpty)
	x.Int(e.id)
	return x.buf
}

func (e TL_encryptedChatWaiting) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_encryptedChatWaiting)
	x.Int(e.id)
	x.Long(e.access_hash)
	x.Int(e.date)
	x.Long(e.admin_id)
	x.Long(e.participant_id)
	return x.buf
}

func (e TL_encryptedChatRequested) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_encryptedChatRequested)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.Int(e.folder_id)
	}
	x.Int(e.id)
	x.Long(e.access_hash)
	x.Int(e.date)
	x.Long(e.admin_id)
	x.Long(e.participant_id)
	x.StringBytes(e.g_a)
	return x.buf
}

func (e TL_encryptedChat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_encryptedChat)
	x.Int(e.id)
	x.Long(e.access_hash)
	x.Int(e.date)
	x.Long(e.admin_id)
	x.Long(e.participant_id)
	x.StringBytes(e.g_a_or_b)
	x.Long(e.key_fingerprint)
	return x.buf
}

func (e TL_encryptedChatDiscarded) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_encryptedChatDiscarded)
	x.Int(e.flags)
	x.Int(e.id)
	return x.buf
}

func (e TL_inputEncryptedChat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputEncryptedChat)
	x.Int(e.chat_id)
	x.Long(e.access_hash)
	return x.buf
}

func (e TL_encryptedFileEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_encryptedFileEmpty)
	return x.buf
}

func (e TL_encryptedFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_encryptedFile)
	x.Long(e.id)
	x.Long(e.access_hash)
	x.Long(e.size)
	x.Int(e.dc_id)
	x.Int(e.key_fingerprint)
	return x.buf
}

func (e TL_inputEncryptedFileEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputEncryptedFileEmpty)
	return x.buf
}

func (e TL_inputEncryptedFileUploaded) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputEncryptedFileUploaded)
	x.Long(e.id)
	x.Int(e.parts)
	x.String(e.md5_checksum)
	x.Int(e.key_fingerprint)
	return x.buf
}

func (e TL_inputEncryptedFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputEncryptedFile)
	x.Long(e.id)
	x.Long(e.access_hash)
	return x.buf
}

func (e TL_inputEncryptedFileLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputEncryptedFileLocation)
	x.Long(e.id)
	x.Long(e.access_hash)
	return x.buf
}

func (e TL_encryptedMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_encryptedMessage)
	x.Long(e.random_id)
	x.Int(e.chat_id)
	x.Int(e.date)
	x.StringBytes(e.bytes)
	x.Bytes(e.file.encode())
	return x.buf
}

func (e TL_encryptedMessageService) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_encryptedMessageService)
	x.Long(e.random_id)
	x.Int(e.chat_id)
	x.Int(e.date)
	x.StringBytes(e.bytes)
	return x.buf
}

func (e TL_messages_dhConfigNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_dhConfigNotModified)
	x.StringBytes(e.random)
	return x.buf
}

func (e TL_messages_dhConfig) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_dhConfig)
	x.Int(e.g)
	x.StringBytes(e.p)
	x.Int(e.version)
	x.StringBytes(e.random)
	return x.buf
}

func (e TL_messages_sentEncryptedMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_sentEncryptedMessage)
	x.Int(e.date)
	return x.buf
}

func (e TL_messages_sentEncryptedFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_sentEncryptedFile)
	x.Int(e.date)
	x.Bytes(e.file.encode())
	return x.buf
}

func (e TL_inputFileBig) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputFileBig)
	x.Long(e.id)
	x.Int(e.parts)
	x.String(e.name)
	return x.buf
}

func (e TL_inputEncryptedFileBigUploaded) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputEncryptedFileBigUploaded)
	x.Long(e.id)
	x.Int(e.parts)
	x.Int(e.key_fingerprint)
	return x.buf
}

func (e TL_updateChatParticipantAdd) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateChatParticipantAdd)
	x.Long(e.chat_id)
	x.Long(e.user_id)
	x.Long(e.inviter_id)
	x.Int(e.date)
	x.Int(e.version)
	return x.buf
}

func (e TL_updateChatParticipantDelete) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateChatParticipantDelete)
	x.Long(e.chat_id)
	x.Long(e.user_id)
	x.Int(e.version)
	return x.buf
}

func (e TL_updateDcOptions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateDcOptions)
	x.Vector(e.dc_options)
	return x.buf
}

func (e TL_inputMediaUploadedDocument) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMediaUploadedDocument)
	x.Int(e.flags)
	x.Bytes(e.file.encode())
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.thumb.encode())
	}
	x.String(e.mime_type)
	x.Vector(e.attributes)
	if e.flags&(1<<0) != 0 {
		x.Vector(e.stickers)
	}
	if e.flags&(1<<1) != 0 {
		x.Int(e.ttl_seconds)
	}
	return x.buf
}

func (e TL_inputMediaDocument) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMediaDocument)
	x.Int(e.flags)
	x.Bytes(e.id.encode())
	if e.flags&(1<<0) != 0 {
		x.Int(e.ttl_seconds)
	}
	if e.flags&(1<<1) != 0 {
		x.String(e.query)
	}
	return x.buf
}

func (e TL_messageMediaDocument) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageMediaDocument)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.document.encode())
	}
	if e.flags&(1<<5) != 0 {
		x.Bytes(e.alt_document.encode())
	}
	if e.flags&(1<<2) != 0 {
		x.Int(e.ttl_seconds)
	}
	return x.buf
}

func (e TL_inputDocumentEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputDocumentEmpty)
	return x.buf
}

func (e TL_inputDocument) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputDocument)
	x.Long(e.id)
	x.Long(e.access_hash)
	x.StringBytes(e.file_reference)
	return x.buf
}

func (e TL_inputDocumentFileLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputDocumentFileLocation)
	x.Long(e.id)
	x.Long(e.access_hash)
	x.StringBytes(e.file_reference)
	x.String(e.thumb_size)
	return x.buf
}

func (e TL_documentEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_documentEmpty)
	x.Long(e.id)
	return x.buf
}

func (e TL_document) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_document)
	x.Int(e.flags)
	x.Long(e.id)
	x.Long(e.access_hash)
	x.StringBytes(e.file_reference)
	x.Int(e.date)
	x.String(e.mime_type)
	x.Long(e.size)
	if e.flags&(1<<0) != 0 {
		x.Vector(e.thumbs)
	}
	if e.flags&(1<<1) != 0 {
		x.Vector(e.video_thumbs)
	}
	x.Int(e.dc_id)
	x.Vector(e.attributes)
	return x.buf
}

func (e TL_help_support) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_support)
	x.String(e.phone_number)
	x.Bytes(e.user.encode())
	return x.buf
}

func (e TL_notifyPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_notifyPeer)
	x.Bytes(e.peer.encode())
	return x.buf
}

func (e TL_notifyUsers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_notifyUsers)
	return x.buf
}

func (e TL_notifyChats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_notifyChats)
	return x.buf
}

func (e TL_updateNotifySettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateNotifySettings)
	x.Bytes(e.peer.encode())
	x.Bytes(e.notify_settings.encode())
	return x.buf
}

func (e TL_sendMessageTypingAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_sendMessageTypingAction)
	return x.buf
}

func (e TL_sendMessageCancelAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_sendMessageCancelAction)
	return x.buf
}

func (e TL_sendMessageRecordVideoAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_sendMessageRecordVideoAction)
	return x.buf
}

func (e TL_sendMessageUploadVideoAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_sendMessageUploadVideoAction)
	x.Int(e.progress)
	return x.buf
}

func (e TL_sendMessageRecordAudioAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_sendMessageRecordAudioAction)
	return x.buf
}

func (e TL_sendMessageUploadAudioAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_sendMessageUploadAudioAction)
	x.Int(e.progress)
	return x.buf
}

func (e TL_sendMessageUploadPhotoAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_sendMessageUploadPhotoAction)
	x.Int(e.progress)
	return x.buf
}

func (e TL_sendMessageUploadDocumentAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_sendMessageUploadDocumentAction)
	x.Int(e.progress)
	return x.buf
}

func (e TL_sendMessageGeoLocationAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_sendMessageGeoLocationAction)
	return x.buf
}

func (e TL_sendMessageChooseContactAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_sendMessageChooseContactAction)
	return x.buf
}

func (e TL_contacts_found) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_contacts_found)
	x.Vector(e.my_results)
	x.Vector(e.results)
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_updateServiceNotification) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateServiceNotification)
	x.Int(e.flags)
	if e.flags&(1<<1) != 0 {
		x.Int(e.inbox_date)
	}
	x.String(e._type)
	x.String(e.message)
	x.Bytes(e.media.encode())
	x.Vector(e.entities)
	return x.buf
}

func (e TL_userStatusRecently) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_userStatusRecently)
	return x.buf
}

func (e TL_userStatusLastWeek) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_userStatusLastWeek)
	return x.buf
}

func (e TL_userStatusLastMonth) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_userStatusLastMonth)
	return x.buf
}

func (e TL_updatePrivacy) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updatePrivacy)
	x.Bytes(e.key.encode())
	x.Vector(e.rules)
	return x.buf
}

func (e TL_inputPrivacyKeyStatusTimestamp) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputPrivacyKeyStatusTimestamp)
	return x.buf
}

func (e TL_privacyKeyStatusTimestamp) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_privacyKeyStatusTimestamp)
	return x.buf
}

func (e TL_inputPrivacyValueAllowContacts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputPrivacyValueAllowContacts)
	return x.buf
}

func (e TL_inputPrivacyValueAllowAll) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputPrivacyValueAllowAll)
	return x.buf
}

func (e TL_inputPrivacyValueAllowUsers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputPrivacyValueAllowUsers)
	x.Vector(e.users)
	return x.buf
}

func (e TL_inputPrivacyValueDisallowContacts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputPrivacyValueDisallowContacts)
	return x.buf
}

func (e TL_inputPrivacyValueDisallowAll) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputPrivacyValueDisallowAll)
	return x.buf
}

func (e TL_inputPrivacyValueDisallowUsers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputPrivacyValueDisallowUsers)
	x.Vector(e.users)
	return x.buf
}

func (e TL_privacyValueAllowContacts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_privacyValueAllowContacts)
	return x.buf
}

func (e TL_privacyValueAllowAll) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_privacyValueAllowAll)
	return x.buf
}

func (e TL_privacyValueAllowUsers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_privacyValueAllowUsers)
	x.VectorLong(e.users)
	return x.buf
}

func (e TL_privacyValueDisallowContacts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_privacyValueDisallowContacts)
	return x.buf
}

func (e TL_privacyValueDisallowAll) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_privacyValueDisallowAll)
	return x.buf
}

func (e TL_privacyValueDisallowUsers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_privacyValueDisallowUsers)
	x.VectorLong(e.users)
	return x.buf
}

func (e TL_account_privacyRules) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_privacyRules)
	x.Vector(e.rules)
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_accountDaysTTL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_accountDaysTTL)
	x.Int(e.days)
	return x.buf
}

func (e TL_updateUserPhone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateUserPhone)
	x.Long(e.user_id)
	x.String(e.phone)
	return x.buf
}

func (e TL_documentAttributeImageSize) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_documentAttributeImageSize)
	x.Int(e.w)
	x.Int(e.h)
	return x.buf
}

func (e TL_documentAttributeAnimated) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_documentAttributeAnimated)
	return x.buf
}

func (e TL_documentAttributeSticker) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_documentAttributeSticker)
	x.Int(e.flags)
	x.String(e.alt)
	x.Bytes(e.stickerset.encode())
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.mask_coords.encode())
	}
	return x.buf
}

func (e TL_documentAttributeVideo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_documentAttributeVideo)
	x.Int(e.flags)
	x.Double(e.duration)
	x.Int(e.w)
	x.Int(e.h)
	if e.flags&(1<<2) != 0 {
		x.Int(e.preload_prefix_size)
	}
	return x.buf
}

func (e TL_documentAttributeAudio) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_documentAttributeAudio)
	x.Int(e.flags)
	x.Int(e.duration)
	if e.flags&(1<<0) != 0 {
		x.String(e.title)
	}
	if e.flags&(1<<1) != 0 {
		x.String(e.performer)
	}
	if e.flags&(1<<2) != 0 {
		x.StringBytes(e.waveform)
	}
	return x.buf
}

func (e TL_documentAttributeFilename) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_documentAttributeFilename)
	x.String(e.file_name)
	return x.buf
}

func (e TL_messages_stickersNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_stickersNotModified)
	return x.buf
}

func (e TL_messages_stickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_stickers)
	x.Long(e.hash)
	x.Vector(e.stickers)
	return x.buf
}

func (e TL_stickerPack) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stickerPack)
	x.String(e.emoticon)
	x.VectorLong(e.documents)
	return x.buf
}

func (e TL_messages_allStickersNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_allStickersNotModified)
	return x.buf
}

func (e TL_messages_allStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_allStickers)
	x.Long(e.hash)
	x.Vector(e.sets)
	return x.buf
}

func (e TL_updateReadHistoryInbox) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateReadHistoryInbox)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.Int(e.folder_id)
	}
	x.Bytes(e.peer.encode())
	x.Int(e.max_id)
	x.Int(e.still_unread_count)
	x.Int(e.pts)
	x.Int(e.pts_count)
	return x.buf
}

func (e TL_updateReadHistoryOutbox) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateReadHistoryOutbox)
	x.Bytes(e.peer.encode())
	x.Int(e.max_id)
	x.Int(e.pts)
	x.Int(e.pts_count)
	return x.buf
}

func (e TL_messages_affectedMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_affectedMessages)
	x.Int(e.pts)
	x.Int(e.pts_count)
	return x.buf
}

func (e TL_updateWebPage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateWebPage)
	x.Bytes(e.webpage.encode())
	x.Int(e.pts)
	x.Int(e.pts_count)
	return x.buf
}

func (e TL_webPageEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_webPageEmpty)
	x.Int(e.flags)
	x.Long(e.id)
	if e.flags&(1<<0) != 0 {
		x.String(e.url)
	}
	return x.buf
}

func (e TL_webPagePending) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_webPagePending)
	x.Int(e.flags)
	x.Long(e.id)
	if e.flags&(1<<0) != 0 {
		x.String(e.url)
	}
	x.Int(e.date)
	return x.buf
}

func (e TL_webPage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_webPage)
	x.Int(e.flags)
	x.Long(e.id)
	x.String(e.url)
	x.String(e.display_url)
	x.Int(e.hash)
	if e.flags&(1<<0) != 0 {
		x.String(e._type)
	}
	if e.flags&(1<<1) != 0 {
		x.String(e.site_name)
	}
	if e.flags&(1<<2) != 0 {
		x.String(e.title)
	}
	if e.flags&(1<<3) != 0 {
		x.String(e.description)
	}
	if e.flags&(1<<4) != 0 {
		x.Bytes(e.photo.encode())
	}
	if e.flags&(1<<5) != 0 {
		x.String(e.embed_url)
	}
	if e.flags&(1<<5) != 0 {
		x.String(e.embed_type)
	}
	if e.flags&(1<<6) != 0 {
		x.Int(e.embed_width)
	}
	if e.flags&(1<<6) != 0 {
		x.Int(e.embed_height)
	}
	if e.flags&(1<<7) != 0 {
		x.Int(e.duration)
	}
	if e.flags&(1<<8) != 0 {
		x.String(e.author)
	}
	if e.flags&(1<<9) != 0 {
		x.Bytes(e.document.encode())
	}
	if e.flags&(1<<10) != 0 {
		x.Bytes(e.cached_page.encode())
	}
	if e.flags&(1<<12) != 0 {
		x.Vector(e.attributes)
	}
	return x.buf
}

func (e TL_messageMediaWebPage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageMediaWebPage)
	x.Int(e.flags)
	x.Bytes(e.webpage.encode())
	return x.buf
}

func (e TL_authorization) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_authorization)
	x.Int(e.flags)
	x.Long(e.hash)
	x.String(e.device_model)
	x.String(e.platform)
	x.String(e.system_version)
	x.Int(e.api_id)
	x.String(e.app_name)
	x.String(e.app_version)
	x.Int(e.date_created)
	x.Int(e.date_active)
	x.String(e.ip)
	x.String(e.country)
	x.String(e.region)
	return x.buf
}

func (e TL_account_authorizations) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_authorizations)
	x.Int(e.authorization_ttl_days)
	x.Vector(e.authorizations)
	return x.buf
}

func (e TL_account_password) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_password)
	x.Int(e.flags)
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.current_algo.encode())
	}
	if e.flags&(1<<2) != 0 {
		x.StringBytes(e.srp_B)
	}
	if e.flags&(1<<2) != 0 {
		x.Long(e.srp_id)
	}
	if e.flags&(1<<3) != 0 {
		x.String(e.hint)
	}
	if e.flags&(1<<4) != 0 {
		x.String(e.email_unconfirmed_pattern)
	}
	x.Bytes(e.new_algo.encode())
	x.Bytes(e.new_secure_algo.encode())
	x.StringBytes(e.secure_random)
	if e.flags&(1<<5) != 0 {
		x.Int(e.pending_reset_date)
	}
	if e.flags&(1<<6) != 0 {
		x.String(e.login_email_pattern)
	}
	return x.buf
}

func (e TL_account_passwordSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_passwordSettings)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.String(e.email)
	}
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.secure_settings.encode())
	}
	return x.buf
}

func (e TL_account_passwordInputSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_passwordInputSettings)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.new_algo.encode())
	}
	if e.flags&(1<<0) != 0 {
		x.StringBytes(e.new_password_hash)
	}
	if e.flags&(1<<0) != 0 {
		x.String(e.hint)
	}
	if e.flags&(1<<1) != 0 {
		x.String(e.email)
	}
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.new_secure_settings.encode())
	}
	return x.buf
}

func (e TL_auth_passwordRecovery) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_passwordRecovery)
	x.String(e.email_pattern)
	return x.buf
}

func (e TL_inputMediaVenue) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMediaVenue)
	x.Bytes(e.geo_point.encode())
	x.String(e.title)
	x.String(e.address)
	x.String(e.provider)
	x.String(e.venue_id)
	x.String(e.venue_type)
	return x.buf
}

func (e TL_messageMediaVenue) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageMediaVenue)
	x.Bytes(e.geo.encode())
	x.String(e.title)
	x.String(e.address)
	x.String(e.provider)
	x.String(e.venue_id)
	x.String(e.venue_type)
	return x.buf
}

func (e TL_receivedNotifyMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_receivedNotifyMessage)
	x.Int(e.id)
	x.Int(e.flags)
	return x.buf
}

func (e TL_chatInviteExported) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chatInviteExported)
	x.Int(e.flags)
	x.String(e.link)
	x.Long(e.admin_id)
	x.Int(e.date)
	if e.flags&(1<<4) != 0 {
		x.Int(e.start_date)
	}
	if e.flags&(1<<1) != 0 {
		x.Int(e.expire_date)
	}
	if e.flags&(1<<2) != 0 {
		x.Int(e.usage_limit)
	}
	if e.flags&(1<<3) != 0 {
		x.Int(e.usage)
	}
	if e.flags&(1<<7) != 0 {
		x.Int(e.requested)
	}
	if e.flags&(1<<8) != 0 {
		x.String(e.title)
	}
	return x.buf
}

func (e TL_chatInviteAlready) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chatInviteAlready)
	x.Bytes(e.chat.encode())
	return x.buf
}

func (e TL_chatInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chatInvite)
	x.Int(e.flags)
	x.String(e.title)
	if e.flags&(1<<5) != 0 {
		x.String(e.about)
	}
	x.Bytes(e.photo.encode())
	x.Int(e.participants_count)
	if e.flags&(1<<4) != 0 {
		x.Vector(e.participants)
	}
	x.Int(e.color)
	return x.buf
}

func (e TL_messageActionChatJoinedByLink) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionChatJoinedByLink)
	x.Long(e.inviter_id)
	return x.buf
}

func (e TL_updateReadMessagesContents) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateReadMessagesContents)
	x.Int(e.flags)
	x.VectorInt(e.messages)
	x.Int(e.pts)
	x.Int(e.pts_count)
	if e.flags&(1<<0) != 0 {
		x.Int(e.date)
	}
	return x.buf
}

func (e TL_inputStickerSetEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputStickerSetEmpty)
	return x.buf
}

func (e TL_inputStickerSetID) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputStickerSetID)
	x.Long(e.id)
	x.Long(e.access_hash)
	return x.buf
}

func (e TL_inputStickerSetShortName) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputStickerSetShortName)
	x.String(e.short_name)
	return x.buf
}

func (e TL_stickerSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stickerSet)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.Int(e.installed_date)
	}
	x.Long(e.id)
	x.Long(e.access_hash)
	x.String(e.title)
	x.String(e.short_name)
	if e.flags&(1<<4) != 0 {
		x.Vector(e.thumbs)
	}
	if e.flags&(1<<4) != 0 {
		x.Int(e.thumb_dc_id)
	}
	if e.flags&(1<<4) != 0 {
		x.Int(e.thumb_version)
	}
	if e.flags&(1<<8) != 0 {
		x.Long(e.thumb_document_id)
	}
	x.Int(e.count)
	x.Int(e.hash)
	return x.buf
}

func (e TL_messages_stickerSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_stickerSet)
	x.Bytes(e.set.encode())
	x.Vector(e.packs)
	x.Vector(e.keywords)
	x.Vector(e.documents)
	return x.buf
}

func (e TL_user) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_user)
	x.Int(e.flags)
	x.Int(e.flags2)
	x.Long(e.id)
	if e.flags&(1<<0) != 0 {
		x.Long(e.access_hash)
	}
	if e.flags&(1<<1) != 0 {
		x.String(e.first_name)
	}
	if e.flags&(1<<2) != 0 {
		x.String(e.last_name)
	}
	if e.flags&(1<<3) != 0 {
		x.String(e.username)
	}
	if e.flags&(1<<4) != 0 {
		x.String(e.phone)
	}
	if e.flags&(1<<5) != 0 {
		x.Bytes(e.photo.encode())
	}
	if e.flags&(1<<6) != 0 {
		x.Bytes(e.status.encode())
	}
	if e.flags&(1<<14) != 0 {
		x.Int(e.bot_info_version)
	}
	if e.flags&(1<<18) != 0 {
		x.Vector(e.restriction_reason)
	}
	if e.flags&(1<<19) != 0 {
		x.String(e.bot_inline_placeholder)
	}
	if e.flags&(1<<22) != 0 {
		x.String(e.lang_code)
	}
	if e.flags&(1<<30) != 0 {
		x.Bytes(e.emoji_status.encode())
	}
	if e.flags2&(1<<0) != 0 {
		x.Vector(e.usernames)
	}
	if e.flags2&(1<<5) != 0 {
		x.Int(e.stories_max_id)
	}
	if e.flags2&(1<<8) != 0 {
		x.Bytes(e.color.encode())
	}
	if e.flags2&(1<<9) != 0 {
		x.Bytes(e.profile_color.encode())
	}
	return x.buf
}

func (e TL_botCommand) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_botCommand)
	x.String(e.command)
	x.String(e.description)
	return x.buf
}

func (e TL_botInfo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_botInfo)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.Long(e.user_id)
	}
	if e.flags&(1<<1) != 0 {
		x.String(e.description)
	}
	if e.flags&(1<<4) != 0 {
		x.Bytes(e.description_photo.encode())
	}
	if e.flags&(1<<5) != 0 {
		x.Bytes(e.description_document.encode())
	}
	if e.flags&(1<<2) != 0 {
		x.Vector(e.commands)
	}
	if e.flags&(1<<3) != 0 {
		x.Bytes(e.menu_button.encode())
	}
	return x.buf
}

func (e TL_keyboardButton) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_keyboardButton)
	x.String(e.text)
	return x.buf
}

func (e TL_keyboardButtonRow) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_keyboardButtonRow)
	x.Vector(e.buttons)
	return x.buf
}

func (e TL_replyKeyboardHide) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_replyKeyboardHide)
	x.Int(e.flags)
	return x.buf
}

func (e TL_replyKeyboardForceReply) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_replyKeyboardForceReply)
	x.Int(e.flags)
	if e.flags&(1<<3) != 0 {
		x.String(e.placeholder)
	}
	return x.buf
}

func (e TL_replyKeyboardMarkup) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_replyKeyboardMarkup)
	x.Int(e.flags)
	x.Vector(e.rows)
	if e.flags&(1<<3) != 0 {
		x.String(e.placeholder)
	}
	return x.buf
}

func (e TL_inputPeerUser) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputPeerUser)
	x.Long(e.user_id)
	x.Long(e.access_hash)
	return x.buf
}

func (e TL_inputUser) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputUser)
	x.Long(e.user_id)
	x.Long(e.access_hash)
	return x.buf
}

func (e TL_messageEntityUnknown) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageEntityUnknown)
	x.Int(e.offset)
	x.Int(e.length)
	return x.buf
}

func (e TL_messageEntityMention) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageEntityMention)
	x.Int(e.offset)
	x.Int(e.length)
	return x.buf
}

func (e TL_messageEntityHashtag) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageEntityHashtag)
	x.Int(e.offset)
	x.Int(e.length)
	return x.buf
}

func (e TL_messageEntityBotCommand) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageEntityBotCommand)
	x.Int(e.offset)
	x.Int(e.length)
	return x.buf
}

func (e TL_messageEntityUrl) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageEntityUrl)
	x.Int(e.offset)
	x.Int(e.length)
	return x.buf
}

func (e TL_messageEntityEmail) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageEntityEmail)
	x.Int(e.offset)
	x.Int(e.length)
	return x.buf
}

func (e TL_messageEntityBold) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageEntityBold)
	x.Int(e.offset)
	x.Int(e.length)
	return x.buf
}

func (e TL_messageEntityItalic) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageEntityItalic)
	x.Int(e.offset)
	x.Int(e.length)
	return x.buf
}

func (e TL_messageEntityCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageEntityCode)
	x.Int(e.offset)
	x.Int(e.length)
	return x.buf
}

func (e TL_messageEntityPre) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageEntityPre)
	x.Int(e.offset)
	x.Int(e.length)
	x.String(e.language)
	return x.buf
}

func (e TL_messageEntityTextUrl) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageEntityTextUrl)
	x.Int(e.offset)
	x.Int(e.length)
	x.String(e.url)
	return x.buf
}

func (e TL_updateShortSentMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateShortSentMessage)
	x.Int(e.flags)
	x.Int(e.id)
	x.Int(e.pts)
	x.Int(e.pts_count)
	x.Int(e.date)
	if e.flags&(1<<9) != 0 {
		x.Bytes(e.media.encode())
	}
	if e.flags&(1<<7) != 0 {
		x.Vector(e.entities)
	}
	if e.flags&(1<<25) != 0 {
		x.Int(e.ttl_period)
	}
	return x.buf
}

func (e TL_inputChannelEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputChannelEmpty)
	return x.buf
}

func (e TL_inputChannel) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputChannel)
	x.Long(e.channel_id)
	x.Long(e.access_hash)
	return x.buf
}

func (e TL_peerChannel) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_peerChannel)
	x.Long(e.channel_id)
	return x.buf
}

func (e TL_inputPeerChannel) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputPeerChannel)
	x.Long(e.channel_id)
	x.Long(e.access_hash)
	return x.buf
}

func (e TL_channel) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channel)
	x.Int(e.flags)
	x.Int(e.flags2)
	x.Long(e.id)
	if e.flags&(1<<13) != 0 {
		x.Long(e.access_hash)
	}
	x.String(e.title)
	if e.flags&(1<<6) != 0 {
		x.String(e.username)
	}
	x.Bytes(e.photo.encode())
	x.Int(e.date)
	if e.flags&(1<<9) != 0 {
		x.Vector(e.restriction_reason)
	}
	if e.flags&(1<<14) != 0 {
		x.Bytes(e.admin_rights.encode())
	}
	if e.flags&(1<<15) != 0 {
		x.Bytes(e.banned_rights.encode())
	}
	if e.flags&(1<<18) != 0 {
		x.Bytes(e.default_banned_rights.encode())
	}
	if e.flags&(1<<17) != 0 {
		x.Int(e.participants_count)
	}
	if e.flags2&(1<<0) != 0 {
		x.Vector(e.usernames)
	}
	if e.flags2&(1<<4) != 0 {
		x.Int(e.stories_max_id)
	}
	if e.flags2&(1<<7) != 0 {
		x.Bytes(e.color.encode())
	}
	if e.flags2&(1<<8) != 0 {
		x.Bytes(e.profile_color.encode())
	}
	if e.flags2&(1<<9) != 0 {
		x.Bytes(e.emoji_status.encode())
	}
	if e.flags2&(1<<10) != 0 {
		x.Int(e.level)
	}
	return x.buf
}

func (e TL_channelForbidden) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelForbidden)
	x.Int(e.flags)
	x.Long(e.id)
	x.Long(e.access_hash)
	x.String(e.title)
	if e.flags&(1<<16) != 0 {
		x.Int(e.until_date)
	}
	return x.buf
}

func (e TL_contacts_resolvedPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_contacts_resolvedPeer)
	x.Bytes(e.peer.encode())
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_channelFull) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelFull)
	x.Int(e.flags)
	x.Int(e.flags2)
	x.Long(e.id)
	x.String(e.about)
	if e.flags&(1<<0) != 0 {
		x.Int(e.participants_count)
	}
	if e.flags&(1<<1) != 0 {
		x.Int(e.admins_count)
	}
	if e.flags&(1<<2) != 0 {
		x.Int(e.kicked_count)
	}
	if e.flags&(1<<2) != 0 {
		x.Int(e.banned_count)
	}
	if e.flags&(1<<13) != 0 {
		x.Int(e.online_count)
	}
	x.Int(e.read_inbox_max_id)
	x.Int(e.read_outbox_max_id)
	x.Int(e.unread_count)
	x.Bytes(e.chat_photo.encode())
	x.Bytes(e.notify_settings.encode())
	if e.flags&(1<<23) != 0 {
		x.Bytes(e.exported_invite.encode())
	}
	x.Vector(e.bot_info)
	if e.flags&(1<<4) != 0 {
		x.Long(e.migrated_from_chat_id)
	}
	if e.flags&(1<<4) != 0 {
		x.Int(e.migrated_from_max_id)
	}
	if e.flags&(1<<5) != 0 {
		x.Int(e.pinned_msg_id)
	}
	if e.flags&(1<<8) != 0 {
		x.Bytes(e.stickerset.encode())
	}
	if e.flags&(1<<9) != 0 {
		x.Int(e.available_min_id)
	}
	if e.flags&(1<<11) != 0 {
		x.Int(e.folder_id)
	}
	if e.flags&(1<<14) != 0 {
		x.Long(e.linked_chat_id)
	}
	if e.flags&(1<<15) != 0 {
		x.Bytes(e.location.encode())
	}
	if e.flags&(1<<17) != 0 {
		x.Int(e.slowmode_seconds)
	}
	if e.flags&(1<<18) != 0 {
		x.Int(e.slowmode_next_send_date)
	}
	if e.flags&(1<<12) != 0 {
		x.Int(e.stats_dc)
	}
	x.Int(e.pts)
	if e.flags&(1<<21) != 0 {
		x.Bytes(e.call.encode())
	}
	if e.flags&(1<<24) != 0 {
		x.Int(e.ttl_period)
	}
	if e.flags&(1<<25) != 0 {
		x.VectorString(e.pending_suggestions)
	}
	if e.flags&(1<<26) != 0 {
		x.Bytes(e.groupcall_default_join_as.encode())
	}
	if e.flags&(1<<27) != 0 {
		x.String(e.theme_emoticon)
	}
	if e.flags&(1<<28) != 0 {
		x.Int(e.requests_pending)
	}
	if e.flags&(1<<28) != 0 {
		x.VectorLong(e.recent_requesters)
	}
	if e.flags&(1<<29) != 0 {
		x.Bytes(e.default_send_as.encode())
	}
	if e.flags&(1<<30) != 0 {
		x.Bytes(e.available_reactions.encode())
	}
	if e.flags2&(1<<4) != 0 {
		x.Bytes(e.stories.encode())
	}
	if e.flags2&(1<<7) != 0 {
		x.Bytes(e.wallpaper.encode())
	}
	return x.buf
}

func (e TL_messageRange) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageRange)
	x.Int(e.min_id)
	x.Int(e.max_id)
	return x.buf
}

func (e TL_messages_channelMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_channelMessages)
	x.Int(e.flags)
	x.Int(e.pts)
	x.Int(e.count)
	if e.flags&(1<<2) != 0 {
		x.Int(e.offset_id_offset)
	}
	x.Vector(e.messages)
	x.Vector(e.topics)
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_messageActionChannelCreate) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionChannelCreate)
	x.String(e.title)
	return x.buf
}

func (e TL_updateChannelTooLong) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateChannelTooLong)
	x.Int(e.flags)
	x.Long(e.channel_id)
	if e.flags&(1<<0) != 0 {
		x.Int(e.pts)
	}
	return x.buf
}

func (e TL_updateChannel) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateChannel)
	x.Long(e.channel_id)
	return x.buf
}

func (e TL_updateNewChannelMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateNewChannelMessage)
	x.Bytes(e.message.encode())
	x.Int(e.pts)
	x.Int(e.pts_count)
	return x.buf
}

func (e TL_updateReadChannelInbox) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateReadChannelInbox)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.Int(e.folder_id)
	}
	x.Long(e.channel_id)
	x.Int(e.max_id)
	x.Int(e.still_unread_count)
	x.Int(e.pts)
	return x.buf
}

func (e TL_updateDeleteChannelMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateDeleteChannelMessages)
	x.Long(e.channel_id)
	x.VectorInt(e.messages)
	x.Int(e.pts)
	x.Int(e.pts_count)
	return x.buf
}

func (e TL_updateChannelMessageViews) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateChannelMessageViews)
	x.Long(e.channel_id)
	x.Int(e.id)
	x.Int(e.views)
	return x.buf
}

func (e TL_updates_channelDifferenceEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updates_channelDifferenceEmpty)
	x.Int(e.flags)
	x.Int(e.pts)
	if e.flags&(1<<1) != 0 {
		x.Int(e.timeout)
	}
	return x.buf
}

func (e TL_updates_channelDifferenceTooLong) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updates_channelDifferenceTooLong)
	x.Int(e.flags)
	if e.flags&(1<<1) != 0 {
		x.Int(e.timeout)
	}
	x.Bytes(e.dialog.encode())
	x.Vector(e.messages)
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_updates_channelDifference) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updates_channelDifference)
	x.Int(e.flags)
	x.Int(e.pts)
	if e.flags&(1<<1) != 0 {
		x.Int(e.timeout)
	}
	x.Vector(e.new_messages)
	x.Vector(e.other_updates)
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_channelMessagesFilterEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelMessagesFilterEmpty)
	return x.buf
}

func (e TL_channelMessagesFilter) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelMessagesFilter)
	x.Int(e.flags)
	x.Vector(e.ranges)
	return x.buf
}

func (e TL_channelParticipant) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelParticipant)
	x.Long(e.user_id)
	x.Int(e.date)
	return x.buf
}

func (e TL_channelParticipantSelf) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelParticipantSelf)
	x.Int(e.flags)
	x.Long(e.user_id)
	x.Long(e.inviter_id)
	x.Int(e.date)
	return x.buf
}

func (e TL_channelParticipantCreator) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelParticipantCreator)
	x.Int(e.flags)
	x.Long(e.user_id)
	x.Bytes(e.admin_rights.encode())
	if e.flags&(1<<0) != 0 {
		x.String(e.rank)
	}
	return x.buf
}

func (e TL_channelParticipantsRecent) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelParticipantsRecent)
	return x.buf
}

func (e TL_channelParticipantsAdmins) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelParticipantsAdmins)
	return x.buf
}

func (e TL_channelParticipantsKicked) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelParticipantsKicked)
	x.String(e.q)
	return x.buf
}

func (e TL_channels_channelParticipants) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_channelParticipants)
	x.Int(e.count)
	x.Vector(e.participants)
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_channels_channelParticipant) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_channelParticipant)
	x.Bytes(e.participant.encode())
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_chatParticipantCreator) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chatParticipantCreator)
	x.Long(e.user_id)
	return x.buf
}

func (e TL_chatParticipantAdmin) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chatParticipantAdmin)
	x.Long(e.user_id)
	x.Long(e.inviter_id)
	x.Int(e.date)
	return x.buf
}

func (e TL_updateChatParticipantAdmin) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateChatParticipantAdmin)
	x.Long(e.chat_id)
	x.Long(e.user_id)
	x.Bytes(e.is_admin.encode())
	x.Int(e.version)
	return x.buf
}

func (e TL_messageActionChatMigrateTo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionChatMigrateTo)
	x.Long(e.channel_id)
	return x.buf
}

func (e TL_messageActionChannelMigrateFrom) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionChannelMigrateFrom)
	x.String(e.title)
	x.Long(e.chat_id)
	return x.buf
}

func (e TL_channelParticipantsBots) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelParticipantsBots)
	return x.buf
}

func (e TL_help_termsOfService) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_termsOfService)
	x.Int(e.flags)
	x.Bytes(e.id.encode())
	x.String(e.text)
	x.Vector(e.entities)
	if e.flags&(1<<1) != 0 {
		x.Int(e.min_age_confirm)
	}
	return x.buf
}

func (e TL_updateNewStickerSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateNewStickerSet)
	x.Bytes(e.stickerset.encode())
	return x.buf
}

func (e TL_updateStickerSetsOrder) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateStickerSetsOrder)
	x.Int(e.flags)
	x.VectorLong(e.order)
	return x.buf
}

func (e TL_updateStickerSets) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateStickerSets)
	x.Int(e.flags)
	return x.buf
}

func (e TL_messages_savedGifsNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_savedGifsNotModified)
	return x.buf
}

func (e TL_messages_savedGifs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_savedGifs)
	x.Long(e.hash)
	x.Vector(e.gifs)
	return x.buf
}

func (e TL_updateSavedGifs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateSavedGifs)
	return x.buf
}

func (e TL_inputBotInlineMessageMediaAuto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputBotInlineMessageMediaAuto)
	x.Int(e.flags)
	x.String(e.message)
	if e.flags&(1<<1) != 0 {
		x.Vector(e.entities)
	}
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.reply_markup.encode())
	}
	return x.buf
}

func (e TL_inputBotInlineMessageText) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputBotInlineMessageText)
	x.Int(e.flags)
	x.String(e.message)
	if e.flags&(1<<1) != 0 {
		x.Vector(e.entities)
	}
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.reply_markup.encode())
	}
	return x.buf
}

func (e TL_inputBotInlineResult) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputBotInlineResult)
	x.Int(e.flags)
	x.String(e.id)
	x.String(e._type)
	if e.flags&(1<<1) != 0 {
		x.String(e.title)
	}
	if e.flags&(1<<2) != 0 {
		x.String(e.description)
	}
	if e.flags&(1<<3) != 0 {
		x.String(e.url)
	}
	if e.flags&(1<<4) != 0 {
		x.Bytes(e.thumb.encode())
	}
	if e.flags&(1<<5) != 0 {
		x.Bytes(e.content.encode())
	}
	x.Bytes(e.send_message.encode())
	return x.buf
}

func (e TL_botInlineMessageMediaAuto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_botInlineMessageMediaAuto)
	x.Int(e.flags)
	x.String(e.message)
	if e.flags&(1<<1) != 0 {
		x.Vector(e.entities)
	}
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.reply_markup.encode())
	}
	return x.buf
}

func (e TL_botInlineMessageText) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_botInlineMessageText)
	x.Int(e.flags)
	x.String(e.message)
	if e.flags&(1<<1) != 0 {
		x.Vector(e.entities)
	}
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.reply_markup.encode())
	}
	return x.buf
}

func (e TL_botInlineResult) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_botInlineResult)
	x.Int(e.flags)
	x.String(e.id)
	x.String(e._type)
	if e.flags&(1<<1) != 0 {
		x.String(e.title)
	}
	if e.flags&(1<<2) != 0 {
		x.String(e.description)
	}
	if e.flags&(1<<3) != 0 {
		x.String(e.url)
	}
	if e.flags&(1<<4) != 0 {
		x.Bytes(e.thumb.encode())
	}
	if e.flags&(1<<5) != 0 {
		x.Bytes(e.content.encode())
	}
	x.Bytes(e.send_message.encode())
	return x.buf
}

func (e TL_messages_botResults) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_botResults)
	x.Int(e.flags)
	x.Long(e.query_id)
	if e.flags&(1<<1) != 0 {
		x.String(e.next_offset)
	}
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.switch_pm.encode())
	}
	if e.flags&(1<<3) != 0 {
		x.Bytes(e.switch_webview.encode())
	}
	x.Vector(e.results)
	x.Int(e.cache_time)
	x.Vector(e.users)
	return x.buf
}

func (e TL_updateBotInlineQuery) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateBotInlineQuery)
	x.Int(e.flags)
	x.Long(e.query_id)
	x.Long(e.user_id)
	x.String(e.query)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.geo.encode())
	}
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.peer_type.encode())
	}
	x.String(e.offset)
	return x.buf
}

func (e TL_updateBotInlineSend) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateBotInlineSend)
	x.Int(e.flags)
	x.Long(e.user_id)
	x.String(e.query)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.geo.encode())
	}
	x.String(e.id)
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.msg_id.encode())
	}
	return x.buf
}

func (e TL_inputMessagesFilterVoice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMessagesFilterVoice)
	return x.buf
}

func (e TL_inputMessagesFilterMusic) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMessagesFilterMusic)
	return x.buf
}

func (e TL_inputPrivacyKeyChatInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputPrivacyKeyChatInvite)
	return x.buf
}

func (e TL_privacyKeyChatInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_privacyKeyChatInvite)
	return x.buf
}

func (e TL_exportedMessageLink) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_exportedMessageLink)
	x.String(e.link)
	x.String(e.html)
	return x.buf
}

func (e TL_messageFwdHeader) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageFwdHeader)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.from_id.encode())
	}
	if e.flags&(1<<5) != 0 {
		x.String(e.from_name)
	}
	x.Int(e.date)
	if e.flags&(1<<2) != 0 {
		x.Int(e.channel_post)
	}
	if e.flags&(1<<3) != 0 {
		x.String(e.post_author)
	}
	if e.flags&(1<<4) != 0 {
		x.Bytes(e.saved_from_peer.encode())
	}
	if e.flags&(1<<4) != 0 {
		x.Int(e.saved_from_msg_id)
	}
	if e.flags&(1<<8) != 0 {
		x.Bytes(e.saved_from_id.encode())
	}
	if e.flags&(1<<9) != 0 {
		x.String(e.saved_from_name)
	}
	if e.flags&(1<<10) != 0 {
		x.Int(e.saved_date)
	}
	if e.flags&(1<<6) != 0 {
		x.String(e.psa_type)
	}
	return x.buf
}

func (e TL_updateEditChannelMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateEditChannelMessage)
	x.Bytes(e.message.encode())
	x.Int(e.pts)
	x.Int(e.pts_count)
	return x.buf
}

func (e TL_messageActionPinMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionPinMessage)
	return x.buf
}

func (e TL_auth_codeTypeSms) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_codeTypeSms)
	return x.buf
}

func (e TL_auth_codeTypeCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_codeTypeCall)
	return x.buf
}

func (e TL_auth_codeTypeFlashCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_codeTypeFlashCall)
	return x.buf
}

func (e TL_auth_sentCodeTypeApp) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_sentCodeTypeApp)
	x.Int(e.length)
	return x.buf
}

func (e TL_auth_sentCodeTypeSms) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_sentCodeTypeSms)
	x.Int(e.length)
	return x.buf
}

func (e TL_auth_sentCodeTypeCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_sentCodeTypeCall)
	x.Int(e.length)
	return x.buf
}

func (e TL_auth_sentCodeTypeFlashCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_sentCodeTypeFlashCall)
	x.String(e.pattern)
	return x.buf
}

func (e TL_keyboardButtonUrl) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_keyboardButtonUrl)
	x.String(e.text)
	x.String(e.url)
	return x.buf
}

func (e TL_keyboardButtonCallback) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_keyboardButtonCallback)
	x.Int(e.flags)
	x.String(e.text)
	x.StringBytes(e.data)
	return x.buf
}

func (e TL_keyboardButtonRequestPhone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_keyboardButtonRequestPhone)
	x.String(e.text)
	return x.buf
}

func (e TL_keyboardButtonRequestGeoLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_keyboardButtonRequestGeoLocation)
	x.String(e.text)
	return x.buf
}

func (e TL_keyboardButtonSwitchInline) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_keyboardButtonSwitchInline)
	x.Int(e.flags)
	x.String(e.text)
	x.String(e.query)
	if e.flags&(1<<1) != 0 {
		x.Vector(e.peer_types)
	}
	return x.buf
}

func (e TL_replyInlineMarkup) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_replyInlineMarkup)
	x.Vector(e.rows)
	return x.buf
}

func (e TL_messages_botCallbackAnswer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_botCallbackAnswer)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.String(e.message)
	}
	if e.flags&(1<<2) != 0 {
		x.String(e.url)
	}
	x.Int(e.cache_time)
	return x.buf
}

func (e TL_updateBotCallbackQuery) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateBotCallbackQuery)
	x.Int(e.flags)
	x.Long(e.query_id)
	x.Long(e.user_id)
	x.Bytes(e.peer.encode())
	x.Int(e.msg_id)
	x.Long(e.chat_instance)
	if e.flags&(1<<0) != 0 {
		x.StringBytes(e.data)
	}
	if e.flags&(1<<1) != 0 {
		x.String(e.game_short_name)
	}
	return x.buf
}

func (e TL_messages_messageEditData) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_messageEditData)
	x.Int(e.flags)
	return x.buf
}

func (e TL_updateEditMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateEditMessage)
	x.Bytes(e.message.encode())
	x.Int(e.pts)
	x.Int(e.pts_count)
	return x.buf
}

func (e TL_inputBotInlineMessageMediaGeo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputBotInlineMessageMediaGeo)
	x.Int(e.flags)
	x.Bytes(e.geo_point.encode())
	if e.flags&(1<<0) != 0 {
		x.Int(e.heading)
	}
	if e.flags&(1<<1) != 0 {
		x.Int(e.period)
	}
	if e.flags&(1<<3) != 0 {
		x.Int(e.proximity_notification_radius)
	}
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.reply_markup.encode())
	}
	return x.buf
}

func (e TL_inputBotInlineMessageMediaVenue) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputBotInlineMessageMediaVenue)
	x.Int(e.flags)
	x.Bytes(e.geo_point.encode())
	x.String(e.title)
	x.String(e.address)
	x.String(e.provider)
	x.String(e.venue_id)
	x.String(e.venue_type)
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.reply_markup.encode())
	}
	return x.buf
}

func (e TL_inputBotInlineMessageMediaContact) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputBotInlineMessageMediaContact)
	x.Int(e.flags)
	x.String(e.phone_number)
	x.String(e.first_name)
	x.String(e.last_name)
	x.String(e.vcard)
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.reply_markup.encode())
	}
	return x.buf
}

func (e TL_botInlineMessageMediaGeo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_botInlineMessageMediaGeo)
	x.Int(e.flags)
	x.Bytes(e.geo.encode())
	if e.flags&(1<<0) != 0 {
		x.Int(e.heading)
	}
	if e.flags&(1<<1) != 0 {
		x.Int(e.period)
	}
	if e.flags&(1<<3) != 0 {
		x.Int(e.proximity_notification_radius)
	}
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.reply_markup.encode())
	}
	return x.buf
}

func (e TL_botInlineMessageMediaVenue) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_botInlineMessageMediaVenue)
	x.Int(e.flags)
	x.Bytes(e.geo.encode())
	x.String(e.title)
	x.String(e.address)
	x.String(e.provider)
	x.String(e.venue_id)
	x.String(e.venue_type)
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.reply_markup.encode())
	}
	return x.buf
}

func (e TL_botInlineMessageMediaContact) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_botInlineMessageMediaContact)
	x.Int(e.flags)
	x.String(e.phone_number)
	x.String(e.first_name)
	x.String(e.last_name)
	x.String(e.vcard)
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.reply_markup.encode())
	}
	return x.buf
}

func (e TL_inputBotInlineResultPhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputBotInlineResultPhoto)
	x.String(e.id)
	x.String(e._type)
	x.Bytes(e.photo.encode())
	x.Bytes(e.send_message.encode())
	return x.buf
}

func (e TL_inputBotInlineResultDocument) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputBotInlineResultDocument)
	x.Int(e.flags)
	x.String(e.id)
	x.String(e._type)
	if e.flags&(1<<1) != 0 {
		x.String(e.title)
	}
	if e.flags&(1<<2) != 0 {
		x.String(e.description)
	}
	x.Bytes(e.document.encode())
	x.Bytes(e.send_message.encode())
	return x.buf
}

func (e TL_botInlineMediaResult) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_botInlineMediaResult)
	x.Int(e.flags)
	x.String(e.id)
	x.String(e._type)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.photo.encode())
	}
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.document.encode())
	}
	if e.flags&(1<<2) != 0 {
		x.String(e.title)
	}
	if e.flags&(1<<3) != 0 {
		x.String(e.description)
	}
	x.Bytes(e.send_message.encode())
	return x.buf
}

func (e TL_inputBotInlineMessageID) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputBotInlineMessageID)
	x.Int(e.dc_id)
	x.Long(e.id)
	x.Long(e.access_hash)
	return x.buf
}

func (e TL_updateInlineBotCallbackQuery) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateInlineBotCallbackQuery)
	x.Int(e.flags)
	x.Long(e.query_id)
	x.Long(e.user_id)
	x.Bytes(e.msg_id.encode())
	x.Long(e.chat_instance)
	if e.flags&(1<<0) != 0 {
		x.StringBytes(e.data)
	}
	if e.flags&(1<<1) != 0 {
		x.String(e.game_short_name)
	}
	return x.buf
}

func (e TL_inlineBotSwitchPM) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inlineBotSwitchPM)
	x.String(e.text)
	x.String(e.start_param)
	return x.buf
}

func (e TL_messages_peerDialogs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_peerDialogs)
	x.Vector(e.dialogs)
	x.Vector(e.messages)
	x.Vector(e.chats)
	x.Vector(e.users)
	x.Bytes(e.state.encode())
	return x.buf
}

func (e TL_topPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_topPeer)
	x.Bytes(e.peer.encode())
	x.Double(e.rating)
	return x.buf
}

func (e TL_topPeerCategoryBotsPM) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_topPeerCategoryBotsPM)
	return x.buf
}

func (e TL_topPeerCategoryBotsInline) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_topPeerCategoryBotsInline)
	return x.buf
}

func (e TL_topPeerCategoryCorrespondents) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_topPeerCategoryCorrespondents)
	return x.buf
}

func (e TL_topPeerCategoryGroups) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_topPeerCategoryGroups)
	return x.buf
}

func (e TL_topPeerCategoryChannels) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_topPeerCategoryChannels)
	return x.buf
}

func (e TL_topPeerCategoryPeers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_topPeerCategoryPeers)
	x.Bytes(e.category.encode())
	x.Int(e.count)
	x.Vector(e.peers)
	return x.buf
}

func (e TL_contacts_topPeersNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_contacts_topPeersNotModified)
	return x.buf
}

func (e TL_contacts_topPeers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_contacts_topPeers)
	x.Vector(e.categories)
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_messageEntityMentionName) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageEntityMentionName)
	x.Int(e.offset)
	x.Int(e.length)
	x.Long(e.user_id)
	return x.buf
}

func (e TL_inputMessageEntityMentionName) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMessageEntityMentionName)
	x.Int(e.offset)
	x.Int(e.length)
	x.Bytes(e.user_id.encode())
	return x.buf
}

func (e TL_inputMessagesFilterChatPhotos) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMessagesFilterChatPhotos)
	return x.buf
}

func (e TL_updateReadChannelOutbox) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateReadChannelOutbox)
	x.Long(e.channel_id)
	x.Int(e.max_id)
	return x.buf
}

func (e TL_updateDraftMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateDraftMessage)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	if e.flags&(1<<0) != 0 {
		x.Int(e.top_msg_id)
	}
	x.Bytes(e.draft.encode())
	return x.buf
}

func (e TL_draftMessageEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_draftMessageEmpty)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.Int(e.date)
	}
	return x.buf
}

func (e TL_draftMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_draftMessage)
	x.Int(e.flags)
	if e.flags&(1<<4) != 0 {
		x.Bytes(e.reply_to.encode())
	}
	x.String(e.message)
	if e.flags&(1<<3) != 0 {
		x.Vector(e.entities)
	}
	if e.flags&(1<<5) != 0 {
		x.Bytes(e.media.encode())
	}
	x.Int(e.date)
	return x.buf
}

func (e TL_messageActionHistoryClear) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionHistoryClear)
	return x.buf
}

func (e TL_messages_featuredStickersNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_featuredStickersNotModified)
	x.Int(e.count)
	return x.buf
}

func (e TL_messages_featuredStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_featuredStickers)
	x.Int(e.flags)
	x.Long(e.hash)
	x.Int(e.count)
	x.Vector(e.sets)
	x.VectorLong(e.unread)
	return x.buf
}

func (e TL_updateReadFeaturedStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateReadFeaturedStickers)
	return x.buf
}

func (e TL_messages_recentStickersNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_recentStickersNotModified)
	return x.buf
}

func (e TL_messages_recentStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_recentStickers)
	x.Long(e.hash)
	x.Vector(e.packs)
	x.Vector(e.stickers)
	x.VectorInt(e.dates)
	return x.buf
}

func (e TL_updateRecentStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateRecentStickers)
	return x.buf
}

func (e TL_messages_archivedStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_archivedStickers)
	x.Int(e.count)
	x.Vector(e.sets)
	return x.buf
}

func (e TL_messages_stickerSetInstallResultSuccess) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_stickerSetInstallResultSuccess)
	return x.buf
}

func (e TL_messages_stickerSetInstallResultArchive) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_stickerSetInstallResultArchive)
	x.Vector(e.sets)
	return x.buf
}

func (e TL_stickerSetCovered) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stickerSetCovered)
	x.Bytes(e.set.encode())
	x.Bytes(e.cover.encode())
	return x.buf
}

func (e TL_updateConfig) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateConfig)
	return x.buf
}

func (e TL_updatePtsChanged) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updatePtsChanged)
	return x.buf
}

func (e TL_inputMediaPhotoExternal) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMediaPhotoExternal)
	x.Int(e.flags)
	x.String(e.url)
	if e.flags&(1<<0) != 0 {
		x.Int(e.ttl_seconds)
	}
	return x.buf
}

func (e TL_inputMediaDocumentExternal) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMediaDocumentExternal)
	x.Int(e.flags)
	x.String(e.url)
	if e.flags&(1<<0) != 0 {
		x.Int(e.ttl_seconds)
	}
	return x.buf
}

func (e TL_stickerSetMultiCovered) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stickerSetMultiCovered)
	x.Bytes(e.set.encode())
	x.Vector(e.covers)
	return x.buf
}

func (e TL_maskCoords) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_maskCoords)
	x.Int(e.n)
	x.Double(e.x)
	x.Double(e.y)
	x.Double(e.zoom)
	return x.buf
}

func (e TL_documentAttributeHasStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_documentAttributeHasStickers)
	return x.buf
}

func (e TL_inputStickeredMediaPhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputStickeredMediaPhoto)
	x.Bytes(e.id.encode())
	return x.buf
}

func (e TL_inputStickeredMediaDocument) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputStickeredMediaDocument)
	x.Bytes(e.id.encode())
	return x.buf
}

func (e TL_game) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_game)
	x.Int(e.flags)
	x.Long(e.id)
	x.Long(e.access_hash)
	x.String(e.short_name)
	x.String(e.title)
	x.String(e.description)
	x.Bytes(e.photo.encode())
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.document.encode())
	}
	return x.buf
}

func (e TL_inputBotInlineResultGame) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputBotInlineResultGame)
	x.String(e.id)
	x.String(e.short_name)
	x.Bytes(e.send_message.encode())
	return x.buf
}

func (e TL_inputBotInlineMessageGame) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputBotInlineMessageGame)
	x.Int(e.flags)
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.reply_markup.encode())
	}
	return x.buf
}

func (e TL_messageMediaGame) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageMediaGame)
	x.Bytes(e.game.encode())
	return x.buf
}

func (e TL_inputMediaGame) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMediaGame)
	x.Bytes(e.id.encode())
	return x.buf
}

func (e TL_inputGameID) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputGameID)
	x.Long(e.id)
	x.Long(e.access_hash)
	return x.buf
}

func (e TL_inputGameShortName) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputGameShortName)
	x.Bytes(e.bot_id.encode())
	x.String(e.short_name)
	return x.buf
}

func (e TL_keyboardButtonGame) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_keyboardButtonGame)
	x.String(e.text)
	return x.buf
}

func (e TL_messageActionGameScore) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionGameScore)
	x.Long(e.game_id)
	x.Int(e.score)
	return x.buf
}

func (e TL_highScore) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_highScore)
	x.Int(e.pos)
	x.Long(e.user_id)
	x.Int(e.score)
	return x.buf
}

func (e TL_messages_highScores) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_highScores)
	x.Vector(e.scores)
	x.Vector(e.users)
	return x.buf
}

func (e TL_updates_differenceTooLong) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updates_differenceTooLong)
	x.Int(e.pts)
	return x.buf
}

func (e TL_updateChannelWebPage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateChannelWebPage)
	x.Long(e.channel_id)
	x.Bytes(e.webpage.encode())
	x.Int(e.pts)
	x.Int(e.pts_count)
	return x.buf
}

func (e TL_messages_chatsSlice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_chatsSlice)
	x.Int(e.count)
	x.Vector(e.chats)
	return x.buf
}

func (e TL_textEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_textEmpty)
	return x.buf
}

func (e TL_textPlain) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_textPlain)
	x.String(e.text)
	return x.buf
}

func (e TL_textBold) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_textBold)
	x.Bytes(e.text.encode())
	return x.buf
}

func (e TL_textItalic) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_textItalic)
	x.Bytes(e.text.encode())
	return x.buf
}

func (e TL_textUnderline) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_textUnderline)
	x.Bytes(e.text.encode())
	return x.buf
}

func (e TL_textStrike) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_textStrike)
	x.Bytes(e.text.encode())
	return x.buf
}

func (e TL_textFixed) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_textFixed)
	x.Bytes(e.text.encode())
	return x.buf
}

func (e TL_textUrl) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_textUrl)
	x.Bytes(e.text.encode())
	x.String(e.url)
	x.Long(e.webpage_id)
	return x.buf
}

func (e TL_textEmail) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_textEmail)
	x.Bytes(e.text.encode())
	x.String(e.email)
	return x.buf
}

func (e TL_textConcat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_textConcat)
	x.Vector(e.texts)
	return x.buf
}

func (e TL_pageBlockUnsupported) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pageBlockUnsupported)
	return x.buf
}

func (e TL_pageBlockTitle) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pageBlockTitle)
	x.Bytes(e.text.encode())
	return x.buf
}

func (e TL_pageBlockSubtitle) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pageBlockSubtitle)
	x.Bytes(e.text.encode())
	return x.buf
}

func (e TL_pageBlockAuthorDate) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pageBlockAuthorDate)
	x.Bytes(e.author.encode())
	x.Int(e.published_date)
	return x.buf
}

func (e TL_pageBlockHeader) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pageBlockHeader)
	x.Bytes(e.text.encode())
	return x.buf
}

func (e TL_pageBlockSubheader) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pageBlockSubheader)
	x.Bytes(e.text.encode())
	return x.buf
}

func (e TL_pageBlockParagraph) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pageBlockParagraph)
	x.Bytes(e.text.encode())
	return x.buf
}

func (e TL_pageBlockPreformatted) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pageBlockPreformatted)
	x.Bytes(e.text.encode())
	x.String(e.language)
	return x.buf
}

func (e TL_pageBlockFooter) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pageBlockFooter)
	x.Bytes(e.text.encode())
	return x.buf
}

func (e TL_pageBlockDivider) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pageBlockDivider)
	return x.buf
}

func (e TL_pageBlockAnchor) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pageBlockAnchor)
	x.String(e.name)
	return x.buf
}

func (e TL_pageBlockList) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pageBlockList)
	x.Vector(e.items)
	return x.buf
}

func (e TL_pageBlockBlockquote) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pageBlockBlockquote)
	x.Bytes(e.text.encode())
	x.Bytes(e.caption.encode())
	return x.buf
}

func (e TL_pageBlockPullquote) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pageBlockPullquote)
	x.Bytes(e.text.encode())
	x.Bytes(e.caption.encode())
	return x.buf
}

func (e TL_pageBlockPhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pageBlockPhoto)
	x.Int(e.flags)
	x.Long(e.photo_id)
	x.Bytes(e.caption.encode())
	if e.flags&(1<<0) != 0 {
		x.String(e.url)
	}
	if e.flags&(1<<0) != 0 {
		x.Long(e.webpage_id)
	}
	return x.buf
}

func (e TL_pageBlockVideo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pageBlockVideo)
	x.Int(e.flags)
	x.Long(e.video_id)
	x.Bytes(e.caption.encode())
	return x.buf
}

func (e TL_pageBlockCover) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pageBlockCover)
	x.Bytes(e.cover.encode())
	return x.buf
}

func (e TL_pageBlockEmbed) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pageBlockEmbed)
	x.Int(e.flags)
	if e.flags&(1<<1) != 0 {
		x.String(e.url)
	}
	if e.flags&(1<<2) != 0 {
		x.String(e.html)
	}
	if e.flags&(1<<4) != 0 {
		x.Long(e.poster_photo_id)
	}
	if e.flags&(1<<5) != 0 {
		x.Int(e.w)
	}
	if e.flags&(1<<5) != 0 {
		x.Int(e.h)
	}
	x.Bytes(e.caption.encode())
	return x.buf
}

func (e TL_pageBlockEmbedPost) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pageBlockEmbedPost)
	x.String(e.url)
	x.Long(e.webpage_id)
	x.Long(e.author_photo_id)
	x.String(e.author)
	x.Int(e.date)
	x.Vector(e.blocks)
	x.Bytes(e.caption.encode())
	return x.buf
}

func (e TL_pageBlockCollage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pageBlockCollage)
	x.Vector(e.items)
	x.Bytes(e.caption.encode())
	return x.buf
}

func (e TL_pageBlockSlideshow) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pageBlockSlideshow)
	x.Vector(e.items)
	x.Bytes(e.caption.encode())
	return x.buf
}

func (e TL_webPageNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_webPageNotModified)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.Int(e.cached_page_views)
	}
	return x.buf
}

func (e TL_inputPrivacyKeyPhoneCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputPrivacyKeyPhoneCall)
	return x.buf
}

func (e TL_privacyKeyPhoneCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_privacyKeyPhoneCall)
	return x.buf
}

func (e TL_sendMessageGamePlayAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_sendMessageGamePlayAction)
	return x.buf
}

func (e TL_phoneCallDiscardReasonMissed) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phoneCallDiscardReasonMissed)
	return x.buf
}

func (e TL_phoneCallDiscardReasonDisconnect) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phoneCallDiscardReasonDisconnect)
	return x.buf
}

func (e TL_phoneCallDiscardReasonHangup) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phoneCallDiscardReasonHangup)
	return x.buf
}

func (e TL_phoneCallDiscardReasonBusy) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phoneCallDiscardReasonBusy)
	return x.buf
}

func (e TL_updateDialogPinned) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateDialogPinned)
	x.Int(e.flags)
	if e.flags&(1<<1) != 0 {
		x.Int(e.folder_id)
	}
	x.Bytes(e.peer.encode())
	return x.buf
}

func (e TL_updatePinnedDialogs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updatePinnedDialogs)
	x.Int(e.flags)
	if e.flags&(1<<1) != 0 {
		x.Int(e.folder_id)
	}
	if e.flags&(1<<0) != 0 {
		x.Vector(e.order)
	}
	return x.buf
}

func (e TL_dataJSON) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_dataJSON)
	x.String(e.data)
	return x.buf
}

func (e TL_updateBotWebhookJSON) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateBotWebhookJSON)
	x.Bytes(e.data.encode())
	return x.buf
}

func (e TL_updateBotWebhookJSONQuery) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateBotWebhookJSONQuery)
	x.Long(e.query_id)
	x.Bytes(e.data.encode())
	x.Int(e.timeout)
	return x.buf
}

func (e TL_labeledPrice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_labeledPrice)
	x.String(e.label)
	x.Long(e.amount)
	return x.buf
}

func (e TL_invoice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_invoice)
	x.Int(e.flags)
	x.String(e.currency)
	x.Vector(e.prices)
	if e.flags&(1<<8) != 0 {
		x.Long(e.max_tip_amount)
	}
	if e.flags&(1<<8) != 0 {
		x.VectorLong(e.suggested_tip_amounts)
	}
	if e.flags&(1<<10) != 0 {
		x.String(e.terms_url)
	}
	return x.buf
}

func (e TL_inputMediaInvoice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMediaInvoice)
	x.Int(e.flags)
	x.String(e.title)
	x.String(e.description)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.photo.encode())
	}
	x.Bytes(e.invoice.encode())
	x.StringBytes(e.payload)
	x.String(e.provider)
	x.Bytes(e.provider_data.encode())
	if e.flags&(1<<1) != 0 {
		x.String(e.start_param)
	}
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.extended_media.encode())
	}
	return x.buf
}

func (e TL_paymentCharge) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_paymentCharge)
	x.String(e.id)
	x.String(e.provider_charge_id)
	return x.buf
}

func (e TL_messageActionPaymentSentMe) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionPaymentSentMe)
	x.Int(e.flags)
	x.String(e.currency)
	x.Long(e.total_amount)
	x.StringBytes(e.payload)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.info.encode())
	}
	if e.flags&(1<<1) != 0 {
		x.String(e.shipping_option_id)
	}
	x.Bytes(e.charge.encode())
	return x.buf
}

func (e TL_messageMediaInvoice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageMediaInvoice)
	x.Int(e.flags)
	x.String(e.title)
	x.String(e.description)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.photo.encode())
	}
	if e.flags&(1<<2) != 0 {
		x.Int(e.receipt_msg_id)
	}
	x.String(e.currency)
	x.Long(e.total_amount)
	x.String(e.start_param)
	if e.flags&(1<<4) != 0 {
		x.Bytes(e.extended_media.encode())
	}
	return x.buf
}

func (e TL_postAddress) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_postAddress)
	x.String(e.street_line1)
	x.String(e.street_line2)
	x.String(e.city)
	x.String(e.state)
	x.String(e.country_iso2)
	x.String(e.post_code)
	return x.buf
}

func (e TL_paymentRequestedInfo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_paymentRequestedInfo)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.String(e.name)
	}
	if e.flags&(1<<1) != 0 {
		x.String(e.phone)
	}
	if e.flags&(1<<2) != 0 {
		x.String(e.email)
	}
	if e.flags&(1<<3) != 0 {
		x.Bytes(e.shipping_address.encode())
	}
	return x.buf
}

func (e TL_keyboardButtonBuy) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_keyboardButtonBuy)
	x.String(e.text)
	return x.buf
}

func (e TL_messageActionPaymentSent) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionPaymentSent)
	x.Int(e.flags)
	x.String(e.currency)
	x.Long(e.total_amount)
	if e.flags&(1<<0) != 0 {
		x.String(e.invoice_slug)
	}
	return x.buf
}

func (e TL_paymentSavedCredentialsCard) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_paymentSavedCredentialsCard)
	x.String(e.id)
	x.String(e.title)
	return x.buf
}

func (e TL_webDocument) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_webDocument)
	x.String(e.url)
	x.Long(e.access_hash)
	x.Int(e.size)
	x.String(e.mime_type)
	x.Vector(e.attributes)
	return x.buf
}

func (e TL_inputWebDocument) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputWebDocument)
	x.String(e.url)
	x.Int(e.size)
	x.String(e.mime_type)
	x.Vector(e.attributes)
	return x.buf
}

func (e TL_inputWebFileLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputWebFileLocation)
	x.String(e.url)
	x.Long(e.access_hash)
	return x.buf
}

func (e TL_upload_webFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_upload_webFile)
	x.Int(e.size)
	x.String(e.mime_type)
	x.Bytes(e.file_type.encode())
	x.Int(e.mtime)
	x.StringBytes(e.bytes)
	return x.buf
}

func (e TL_payments_paymentForm) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_payments_paymentForm)
	x.Int(e.flags)
	x.Long(e.form_id)
	x.Long(e.bot_id)
	x.String(e.title)
	x.String(e.description)
	if e.flags&(1<<5) != 0 {
		x.Bytes(e.photo.encode())
	}
	x.Bytes(e.invoice.encode())
	x.Long(e.provider_id)
	x.String(e.url)
	if e.flags&(1<<4) != 0 {
		x.String(e.native_provider)
	}
	if e.flags&(1<<4) != 0 {
		x.Bytes(e.native_params.encode())
	}
	if e.flags&(1<<6) != 0 {
		x.Vector(e.additional_methods)
	}
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.saved_info.encode())
	}
	if e.flags&(1<<1) != 0 {
		x.Vector(e.saved_credentials)
	}
	x.Vector(e.users)
	return x.buf
}

func (e TL_payments_validatedRequestedInfo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_payments_validatedRequestedInfo)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.String(e.id)
	}
	if e.flags&(1<<1) != 0 {
		x.Vector(e.shipping_options)
	}
	return x.buf
}

func (e TL_payments_paymentResult) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_payments_paymentResult)
	x.Bytes(e.updates.encode())
	return x.buf
}

func (e TL_payments_paymentReceipt) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_payments_paymentReceipt)
	x.Int(e.flags)
	x.Int(e.date)
	x.Long(e.bot_id)
	x.Long(e.provider_id)
	x.String(e.title)
	x.String(e.description)
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.photo.encode())
	}
	x.Bytes(e.invoice.encode())
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.info.encode())
	}
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.shipping.encode())
	}
	if e.flags&(1<<3) != 0 {
		x.Long(e.tip_amount)
	}
	x.String(e.currency)
	x.Long(e.total_amount)
	x.String(e.credentials_title)
	x.Vector(e.users)
	return x.buf
}

func (e TL_payments_savedInfo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_payments_savedInfo)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.saved_info.encode())
	}
	return x.buf
}

func (e TL_inputPaymentCredentialsSaved) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputPaymentCredentialsSaved)
	x.String(e.id)
	x.StringBytes(e.tmp_password)
	return x.buf
}

func (e TL_inputPaymentCredentials) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputPaymentCredentials)
	x.Int(e.flags)
	x.Bytes(e.data.encode())
	return x.buf
}

func (e TL_account_tmpPassword) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_tmpPassword)
	x.StringBytes(e.tmp_password)
	x.Int(e.valid_until)
	return x.buf
}

func (e TL_shippingOption) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_shippingOption)
	x.String(e.id)
	x.String(e.title)
	x.Vector(e.prices)
	return x.buf
}

func (e TL_updateBotShippingQuery) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateBotShippingQuery)
	x.Long(e.query_id)
	x.Long(e.user_id)
	x.StringBytes(e.payload)
	x.Bytes(e.shipping_address.encode())
	return x.buf
}

func (e TL_updateBotPrecheckoutQuery) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateBotPrecheckoutQuery)
	x.Int(e.flags)
	x.Long(e.query_id)
	x.Long(e.user_id)
	x.StringBytes(e.payload)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.info.encode())
	}
	if e.flags&(1<<1) != 0 {
		x.String(e.shipping_option_id)
	}
	x.String(e.currency)
	x.Long(e.total_amount)
	return x.buf
}

func (e TL_inputStickerSetItem) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputStickerSetItem)
	x.Int(e.flags)
	x.Bytes(e.document.encode())
	x.String(e.emoji)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.mask_coords.encode())
	}
	if e.flags&(1<<1) != 0 {
		x.String(e.keywords)
	}
	return x.buf
}

func (e TL_updatePhoneCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updatePhoneCall)
	x.Bytes(e.phone_call.encode())
	return x.buf
}

func (e TL_inputPhoneCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputPhoneCall)
	x.Long(e.id)
	x.Long(e.access_hash)
	return x.buf
}

func (e TL_phoneCallEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phoneCallEmpty)
	x.Long(e.id)
	return x.buf
}

func (e TL_phoneCallWaiting) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phoneCallWaiting)
	x.Int(e.flags)
	x.Long(e.id)
	x.Long(e.access_hash)
	x.Int(e.date)
	x.Long(e.admin_id)
	x.Long(e.participant_id)
	x.Bytes(e.protocol.encode())
	if e.flags&(1<<0) != 0 {
		x.Int(e.receive_date)
	}
	return x.buf
}

func (e TL_phoneCallRequested) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phoneCallRequested)
	x.Int(e.flags)
	x.Long(e.id)
	x.Long(e.access_hash)
	x.Int(e.date)
	x.Long(e.admin_id)
	x.Long(e.participant_id)
	x.StringBytes(e.g_a_hash)
	x.Bytes(e.protocol.encode())
	return x.buf
}

func (e TL_phoneCallAccepted) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phoneCallAccepted)
	x.Int(e.flags)
	x.Long(e.id)
	x.Long(e.access_hash)
	x.Int(e.date)
	x.Long(e.admin_id)
	x.Long(e.participant_id)
	x.StringBytes(e.g_b)
	x.Bytes(e.protocol.encode())
	return x.buf
}

func (e TL_phoneCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phoneCall)
	x.Int(e.flags)
	x.Long(e.id)
	x.Long(e.access_hash)
	x.Int(e.date)
	x.Long(e.admin_id)
	x.Long(e.participant_id)
	x.StringBytes(e.g_a_or_b)
	x.Long(e.key_fingerprint)
	x.Bytes(e.protocol.encode())
	x.Vector(e.connections)
	x.Int(e.start_date)
	return x.buf
}

func (e TL_phoneCallDiscarded) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phoneCallDiscarded)
	x.Int(e.flags)
	x.Long(e.id)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.reason.encode())
	}
	if e.flags&(1<<1) != 0 {
		x.Int(e.duration)
	}
	return x.buf
}

func (e TL_phoneConnection) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phoneConnection)
	x.Int(e.flags)
	x.Long(e.id)
	x.String(e.ip)
	x.String(e.ipv6)
	x.Int(e.port)
	x.StringBytes(e.peer_tag)
	return x.buf
}

func (e TL_phoneCallProtocol) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phoneCallProtocol)
	x.Int(e.flags)
	x.Int(e.min_layer)
	x.Int(e.max_layer)
	x.VectorString(e.library_versions)
	return x.buf
}

func (e TL_phone_phoneCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phone_phoneCall)
	x.Bytes(e.phone_call.encode())
	x.Vector(e.users)
	return x.buf
}

func (e TL_inputMessagesFilterPhoneCalls) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMessagesFilterPhoneCalls)
	x.Int(e.flags)
	return x.buf
}

func (e TL_messageActionPhoneCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionPhoneCall)
	x.Int(e.flags)
	x.Long(e.call_id)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.reason.encode())
	}
	if e.flags&(1<<1) != 0 {
		x.Int(e.duration)
	}
	return x.buf
}

func (e TL_inputMessagesFilterRoundVoice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMessagesFilterRoundVoice)
	return x.buf
}

func (e TL_inputMessagesFilterRoundVideo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMessagesFilterRoundVideo)
	return x.buf
}

func (e TL_sendMessageRecordRoundAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_sendMessageRecordRoundAction)
	return x.buf
}

func (e TL_sendMessageUploadRoundAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_sendMessageUploadRoundAction)
	x.Int(e.progress)
	return x.buf
}

func (e TL_upload_fileCdnRedirect) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_upload_fileCdnRedirect)
	x.Int(e.dc_id)
	x.StringBytes(e.file_token)
	x.StringBytes(e.encryption_key)
	x.StringBytes(e.encryption_iv)
	x.Vector(e.file_hashes)
	return x.buf
}

func (e TL_upload_cdnFileReuploadNeeded) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_upload_cdnFileReuploadNeeded)
	x.StringBytes(e.request_token)
	return x.buf
}

func (e TL_upload_cdnFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_upload_cdnFile)
	x.StringBytes(e.bytes)
	return x.buf
}

func (e TL_cdnPublicKey) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_cdnPublicKey)
	x.Int(e.dc_id)
	x.String(e.public_key)
	return x.buf
}

func (e TL_cdnConfig) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_cdnConfig)
	x.Vector(e.public_keys)
	return x.buf
}

func (e TL_pageBlockChannel) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pageBlockChannel)
	x.Bytes(e.channel.encode())
	return x.buf
}

func (e TL_langPackString) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_langPackString)
	x.String(e.key)
	x.String(e.value)
	return x.buf
}

func (e TL_langPackStringPluralized) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_langPackStringPluralized)
	x.Int(e.flags)
	x.String(e.key)
	if e.flags&(1<<0) != 0 {
		x.String(e.zero_value)
	}
	if e.flags&(1<<1) != 0 {
		x.String(e.one_value)
	}
	if e.flags&(1<<2) != 0 {
		x.String(e.two_value)
	}
	if e.flags&(1<<3) != 0 {
		x.String(e.few_value)
	}
	if e.flags&(1<<4) != 0 {
		x.String(e.many_value)
	}
	x.String(e.other_value)
	return x.buf
}

func (e TL_langPackStringDeleted) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_langPackStringDeleted)
	x.String(e.key)
	return x.buf
}

func (e TL_langPackDifference) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_langPackDifference)
	x.String(e.lang_code)
	x.Int(e.from_version)
	x.Int(e.version)
	x.Vector(e.strings)
	return x.buf
}

func (e TL_langPackLanguage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_langPackLanguage)
	x.Int(e.flags)
	x.String(e.name)
	x.String(e.native_name)
	x.String(e.lang_code)
	if e.flags&(1<<1) != 0 {
		x.String(e.base_lang_code)
	}
	x.String(e.plural_code)
	x.Int(e.strings_count)
	x.Int(e.translated_count)
	x.String(e.translations_url)
	return x.buf
}

func (e TL_updateLangPackTooLong) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateLangPackTooLong)
	x.String(e.lang_code)
	return x.buf
}

func (e TL_updateLangPack) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateLangPack)
	x.Bytes(e.difference.encode())
	return x.buf
}

func (e TL_channelParticipantAdmin) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelParticipantAdmin)
	x.Int(e.flags)
	x.Long(e.user_id)
	if e.flags&(1<<1) != 0 {
		x.Long(e.inviter_id)
	}
	x.Long(e.promoted_by)
	x.Int(e.date)
	x.Bytes(e.admin_rights.encode())
	if e.flags&(1<<2) != 0 {
		x.String(e.rank)
	}
	return x.buf
}

func (e TL_channelParticipantBanned) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelParticipantBanned)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	x.Long(e.kicked_by)
	x.Int(e.date)
	x.Bytes(e.banned_rights.encode())
	return x.buf
}

func (e TL_channelParticipantsBanned) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelParticipantsBanned)
	x.String(e.q)
	return x.buf
}

func (e TL_channelParticipantsSearch) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelParticipantsSearch)
	x.String(e.q)
	return x.buf
}

func (e TL_channelAdminLogEventActionChangeTitle) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionChangeTitle)
	x.String(e.prev_value)
	x.String(e.new_value)
	return x.buf
}

func (e TL_channelAdminLogEventActionChangeAbout) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionChangeAbout)
	x.String(e.prev_value)
	x.String(e.new_value)
	return x.buf
}

func (e TL_channelAdminLogEventActionChangeUsername) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionChangeUsername)
	x.String(e.prev_value)
	x.String(e.new_value)
	return x.buf
}

func (e TL_channelAdminLogEventActionChangePhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionChangePhoto)
	x.Bytes(e.prev_photo.encode())
	x.Bytes(e.new_photo.encode())
	return x.buf
}

func (e TL_channelAdminLogEventActionToggleInvites) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionToggleInvites)
	x.Bytes(e.new_value.encode())
	return x.buf
}

func (e TL_channelAdminLogEventActionToggleSignatures) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionToggleSignatures)
	x.Bytes(e.new_value.encode())
	return x.buf
}

func (e TL_channelAdminLogEventActionUpdatePinned) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionUpdatePinned)
	x.Bytes(e.message.encode())
	return x.buf
}

func (e TL_channelAdminLogEventActionEditMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionEditMessage)
	x.Bytes(e.prev_message.encode())
	x.Bytes(e.new_message.encode())
	return x.buf
}

func (e TL_channelAdminLogEventActionDeleteMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionDeleteMessage)
	x.Bytes(e.message.encode())
	return x.buf
}

func (e TL_channelAdminLogEventActionParticipantJoin) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionParticipantJoin)
	return x.buf
}

func (e TL_channelAdminLogEventActionParticipantLeave) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionParticipantLeave)
	return x.buf
}

func (e TL_channelAdminLogEventActionParticipantInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionParticipantInvite)
	x.Bytes(e.participant.encode())
	return x.buf
}

func (e TL_channelAdminLogEventActionParticipantToggleBan) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionParticipantToggleBan)
	x.Bytes(e.prev_participant.encode())
	x.Bytes(e.new_participant.encode())
	return x.buf
}

func (e TL_channelAdminLogEventActionParticipantToggleAdmin) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionParticipantToggleAdmin)
	x.Bytes(e.prev_participant.encode())
	x.Bytes(e.new_participant.encode())
	return x.buf
}

func (e TL_channelAdminLogEvent) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEvent)
	x.Long(e.id)
	x.Int(e.date)
	x.Long(e.user_id)
	x.Bytes(e.action.encode())
	return x.buf
}

func (e TL_channels_adminLogResults) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_adminLogResults)
	x.Vector(e.events)
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_channelAdminLogEventsFilter) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventsFilter)
	x.Int(e.flags)
	return x.buf
}

func (e TL_topPeerCategoryPhoneCalls) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_topPeerCategoryPhoneCalls)
	return x.buf
}

func (e TL_pageBlockAudio) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pageBlockAudio)
	x.Long(e.audio_id)
	x.Bytes(e.caption.encode())
	return x.buf
}

func (e TL_popularContact) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_popularContact)
	x.Long(e.client_id)
	x.Int(e.importers)
	return x.buf
}

func (e TL_messageActionScreenshotTaken) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionScreenshotTaken)
	return x.buf
}

func (e TL_messages_favedStickersNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_favedStickersNotModified)
	return x.buf
}

func (e TL_messages_favedStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_favedStickers)
	x.Long(e.hash)
	x.Vector(e.packs)
	x.Vector(e.stickers)
	return x.buf
}

func (e TL_updateFavedStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateFavedStickers)
	return x.buf
}

func (e TL_updateChannelReadMessagesContents) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateChannelReadMessagesContents)
	x.Int(e.flags)
	x.Long(e.channel_id)
	if e.flags&(1<<0) != 0 {
		x.Int(e.top_msg_id)
	}
	x.VectorInt(e.messages)
	return x.buf
}

func (e TL_inputMessagesFilterMyMentions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMessagesFilterMyMentions)
	return x.buf
}

func (e TL_updateContactsReset) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateContactsReset)
	return x.buf
}

func (e TL_channelAdminLogEventActionChangeStickerSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionChangeStickerSet)
	x.Bytes(e.prev_stickerset.encode())
	x.Bytes(e.new_stickerset.encode())
	return x.buf
}

func (e TL_messageActionCustomAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionCustomAction)
	x.String(e.message)
	return x.buf
}

func (e TL_inputPaymentCredentialsApplePay) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputPaymentCredentialsApplePay)
	x.Bytes(e.payment_data.encode())
	return x.buf
}

func (e TL_inputMessagesFilterGeo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMessagesFilterGeo)
	return x.buf
}

func (e TL_inputMessagesFilterContacts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMessagesFilterContacts)
	return x.buf
}

func (e TL_updateChannelAvailableMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateChannelAvailableMessages)
	x.Long(e.channel_id)
	x.Int(e.available_min_id)
	return x.buf
}

func (e TL_channelAdminLogEventActionTogglePreHistoryHidden) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionTogglePreHistoryHidden)
	x.Bytes(e.new_value.encode())
	return x.buf
}

func (e TL_inputMediaGeoLive) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMediaGeoLive)
	x.Int(e.flags)
	x.Bytes(e.geo_point.encode())
	if e.flags&(1<<2) != 0 {
		x.Int(e.heading)
	}
	if e.flags&(1<<1) != 0 {
		x.Int(e.period)
	}
	if e.flags&(1<<3) != 0 {
		x.Int(e.proximity_notification_radius)
	}
	return x.buf
}

func (e TL_messageMediaGeoLive) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageMediaGeoLive)
	x.Int(e.flags)
	x.Bytes(e.geo.encode())
	if e.flags&(1<<0) != 0 {
		x.Int(e.heading)
	}
	x.Int(e.period)
	if e.flags&(1<<1) != 0 {
		x.Int(e.proximity_notification_radius)
	}
	return x.buf
}

func (e TL_recentMeUrlUnknown) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_recentMeUrlUnknown)
	x.String(e.url)
	return x.buf
}

func (e TL_recentMeUrlUser) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_recentMeUrlUser)
	x.String(e.url)
	x.Long(e.user_id)
	return x.buf
}

func (e TL_recentMeUrlChat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_recentMeUrlChat)
	x.String(e.url)
	x.Long(e.chat_id)
	return x.buf
}

func (e TL_recentMeUrlChatInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_recentMeUrlChatInvite)
	x.String(e.url)
	x.Bytes(e.chat_invite.encode())
	return x.buf
}

func (e TL_recentMeUrlStickerSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_recentMeUrlStickerSet)
	x.String(e.url)
	x.Bytes(e.set.encode())
	return x.buf
}

func (e TL_help_recentMeUrls) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_recentMeUrls)
	x.Vector(e.urls)
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_channels_channelParticipantsNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_channelParticipantsNotModified)
	return x.buf
}

func (e TL_messages_messagesNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_messagesNotModified)
	x.Int(e.count)
	return x.buf
}

func (e TL_inputSingleMedia) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputSingleMedia)
	x.Int(e.flags)
	x.Bytes(e.media.encode())
	x.Long(e.random_id)
	x.String(e.message)
	if e.flags&(1<<0) != 0 {
		x.Vector(e.entities)
	}
	return x.buf
}

func (e TL_webAuthorization) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_webAuthorization)
	x.Long(e.hash)
	x.Long(e.bot_id)
	x.String(e.domain)
	x.String(e.browser)
	x.String(e.platform)
	x.Int(e.date_created)
	x.Int(e.date_active)
	x.String(e.ip)
	x.String(e.region)
	return x.buf
}

func (e TL_account_webAuthorizations) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_webAuthorizations)
	x.Vector(e.authorizations)
	x.Vector(e.users)
	return x.buf
}

func (e TL_inputMessageID) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMessageID)
	x.Int(e.id)
	return x.buf
}

func (e TL_inputMessageReplyTo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMessageReplyTo)
	x.Int(e.id)
	return x.buf
}

func (e TL_inputMessagePinned) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMessagePinned)
	return x.buf
}

func (e TL_messageEntityPhone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageEntityPhone)
	x.Int(e.offset)
	x.Int(e.length)
	return x.buf
}

func (e TL_messageEntityCashtag) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageEntityCashtag)
	x.Int(e.offset)
	x.Int(e.length)
	return x.buf
}

func (e TL_messageActionBotAllowed) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionBotAllowed)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.String(e.domain)
	}
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.app.encode())
	}
	return x.buf
}

func (e TL_inputDialogPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputDialogPeer)
	x.Bytes(e.peer.encode())
	return x.buf
}

func (e TL_dialogPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_dialogPeer)
	x.Bytes(e.peer.encode())
	return x.buf
}

func (e TL_messages_foundStickerSetsNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_foundStickerSetsNotModified)
	return x.buf
}

func (e TL_messages_foundStickerSets) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_foundStickerSets)
	x.Long(e.hash)
	x.Vector(e.sets)
	return x.buf
}

func (e TL_fileHash) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_fileHash)
	x.Long(e.offset)
	x.Int(e.limit)
	x.StringBytes(e.hash)
	return x.buf
}

func (e TL_webDocumentNoProxy) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_webDocumentNoProxy)
	x.String(e.url)
	x.Int(e.size)
	x.String(e.mime_type)
	x.Vector(e.attributes)
	return x.buf
}

func (e TL_inputClientProxy) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputClientProxy)
	x.String(e.address)
	x.Int(e.port)
	return x.buf
}

func (e TL_help_termsOfServiceUpdateEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_termsOfServiceUpdateEmpty)
	x.Int(e.expires)
	return x.buf
}

func (e TL_help_termsOfServiceUpdate) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_termsOfServiceUpdate)
	x.Int(e.expires)
	x.Bytes(e.terms_of_service.encode())
	return x.buf
}

func (e TL_inputSecureFileUploaded) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputSecureFileUploaded)
	x.Long(e.id)
	x.Int(e.parts)
	x.String(e.md5_checksum)
	x.StringBytes(e.file_hash)
	x.StringBytes(e.secret)
	return x.buf
}

func (e TL_inputSecureFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputSecureFile)
	x.Long(e.id)
	x.Long(e.access_hash)
	return x.buf
}

func (e TL_inputSecureFileLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputSecureFileLocation)
	x.Long(e.id)
	x.Long(e.access_hash)
	return x.buf
}

func (e TL_secureFileEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_secureFileEmpty)
	return x.buf
}

func (e TL_secureFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_secureFile)
	x.Long(e.id)
	x.Long(e.access_hash)
	x.Long(e.size)
	x.Int(e.dc_id)
	x.Int(e.date)
	x.StringBytes(e.file_hash)
	x.StringBytes(e.secret)
	return x.buf
}

func (e TL_secureData) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_secureData)
	x.StringBytes(e.data)
	x.StringBytes(e.data_hash)
	x.StringBytes(e.secret)
	return x.buf
}

func (e TL_securePlainPhone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_securePlainPhone)
	x.String(e.phone)
	return x.buf
}

func (e TL_securePlainEmail) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_securePlainEmail)
	x.String(e.email)
	return x.buf
}

func (e TL_secureValueTypePersonalDetails) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_secureValueTypePersonalDetails)
	return x.buf
}

func (e TL_secureValueTypePassport) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_secureValueTypePassport)
	return x.buf
}

func (e TL_secureValueTypeDriverLicense) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_secureValueTypeDriverLicense)
	return x.buf
}

func (e TL_secureValueTypeIdentityCard) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_secureValueTypeIdentityCard)
	return x.buf
}

func (e TL_secureValueTypeInternalPassport) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_secureValueTypeInternalPassport)
	return x.buf
}

func (e TL_secureValueTypeAddress) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_secureValueTypeAddress)
	return x.buf
}

func (e TL_secureValueTypeUtilityBill) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_secureValueTypeUtilityBill)
	return x.buf
}

func (e TL_secureValueTypeBankStatement) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_secureValueTypeBankStatement)
	return x.buf
}

func (e TL_secureValueTypeRentalAgreement) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_secureValueTypeRentalAgreement)
	return x.buf
}

func (e TL_secureValueTypePassportRegistration) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_secureValueTypePassportRegistration)
	return x.buf
}

func (e TL_secureValueTypeTemporaryRegistration) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_secureValueTypeTemporaryRegistration)
	return x.buf
}

func (e TL_secureValueTypePhone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_secureValueTypePhone)
	return x.buf
}

func (e TL_secureValueTypeEmail) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_secureValueTypeEmail)
	return x.buf
}

func (e TL_secureValue) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_secureValue)
	x.Int(e.flags)
	x.Bytes(e._type.encode())
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.data.encode())
	}
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.front_side.encode())
	}
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.reverse_side.encode())
	}
	if e.flags&(1<<3) != 0 {
		x.Bytes(e.selfie.encode())
	}
	if e.flags&(1<<6) != 0 {
		x.Vector(e.translation)
	}
	if e.flags&(1<<4) != 0 {
		x.Vector(e.files)
	}
	if e.flags&(1<<5) != 0 {
		x.Bytes(e.plain_data.encode())
	}
	x.StringBytes(e.hash)
	return x.buf
}

func (e TL_inputSecureValue) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputSecureValue)
	x.Int(e.flags)
	x.Bytes(e._type.encode())
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.data.encode())
	}
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.front_side.encode())
	}
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.reverse_side.encode())
	}
	if e.flags&(1<<3) != 0 {
		x.Bytes(e.selfie.encode())
	}
	if e.flags&(1<<6) != 0 {
		x.Vector(e.translation)
	}
	if e.flags&(1<<4) != 0 {
		x.Vector(e.files)
	}
	if e.flags&(1<<5) != 0 {
		x.Bytes(e.plain_data.encode())
	}
	return x.buf
}

func (e TL_secureValueHash) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_secureValueHash)
	x.Bytes(e._type.encode())
	x.StringBytes(e.hash)
	return x.buf
}

func (e TL_secureValueErrorData) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_secureValueErrorData)
	x.Bytes(e._type.encode())
	x.StringBytes(e.data_hash)
	x.String(e.field)
	x.String(e.text)
	return x.buf
}

func (e TL_secureValueErrorFrontSide) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_secureValueErrorFrontSide)
	x.Bytes(e._type.encode())
	x.StringBytes(e.file_hash)
	x.String(e.text)
	return x.buf
}

func (e TL_secureValueErrorReverseSide) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_secureValueErrorReverseSide)
	x.Bytes(e._type.encode())
	x.StringBytes(e.file_hash)
	x.String(e.text)
	return x.buf
}

func (e TL_secureValueErrorSelfie) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_secureValueErrorSelfie)
	x.Bytes(e._type.encode())
	x.StringBytes(e.file_hash)
	x.String(e.text)
	return x.buf
}

func (e TL_secureValueErrorFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_secureValueErrorFile)
	x.Bytes(e._type.encode())
	x.StringBytes(e.file_hash)
	x.String(e.text)
	return x.buf
}

func (e TL_secureValueErrorFiles) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_secureValueErrorFiles)
	x.Bytes(e._type.encode())
	x.Vector(e.file_hash)
	x.String(e.text)
	return x.buf
}

func (e TL_secureCredentialsEncrypted) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_secureCredentialsEncrypted)
	x.StringBytes(e.data)
	x.StringBytes(e.hash)
	x.StringBytes(e.secret)
	return x.buf
}

func (e TL_account_authorizationForm) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_authorizationForm)
	x.Int(e.flags)
	x.Vector(e.required_types)
	x.Vector(e.values)
	x.Vector(e.errors)
	x.Vector(e.users)
	if e.flags&(1<<0) != 0 {
		x.String(e.privacy_policy_url)
	}
	return x.buf
}

func (e TL_account_sentEmailCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_sentEmailCode)
	x.String(e.email_pattern)
	x.Int(e.length)
	return x.buf
}

func (e TL_messageActionSecureValuesSentMe) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionSecureValuesSentMe)
	x.Vector(e.values)
	x.Bytes(e.credentials.encode())
	return x.buf
}

func (e TL_messageActionSecureValuesSent) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionSecureValuesSent)
	x.Vector(e.types)
	return x.buf
}

func (e TL_help_deepLinkInfoEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_deepLinkInfoEmpty)
	return x.buf
}

func (e TL_help_deepLinkInfo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_deepLinkInfo)
	x.Int(e.flags)
	x.String(e.message)
	if e.flags&(1<<1) != 0 {
		x.Vector(e.entities)
	}
	return x.buf
}

func (e TL_savedPhoneContact) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_savedPhoneContact)
	x.String(e.phone)
	x.String(e.first_name)
	x.String(e.last_name)
	x.Int(e.date)
	return x.buf
}

func (e TL_account_takeout) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_takeout)
	x.Long(e.id)
	return x.buf
}

func (e TL_inputTakeoutFileLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputTakeoutFileLocation)
	return x.buf
}

func (e TL_updateDialogUnreadMark) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateDialogUnreadMark)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	return x.buf
}

func (e TL_messages_dialogsNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_dialogsNotModified)
	x.Int(e.count)
	return x.buf
}

func (e TL_inputWebFileGeoPointLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputWebFileGeoPointLocation)
	x.Bytes(e.geo_point.encode())
	x.Long(e.access_hash)
	x.Int(e.w)
	x.Int(e.h)
	x.Int(e.zoom)
	x.Int(e.scale)
	return x.buf
}

func (e TL_contacts_topPeersDisabled) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_contacts_topPeersDisabled)
	return x.buf
}

func (e TL_inputReportReasonCopyright) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputReportReasonCopyright)
	return x.buf
}

func (e TL_passwordKdfAlgoUnknown) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_passwordKdfAlgoUnknown)
	return x.buf
}

func (e TL_securePasswordKdfAlgoUnknown) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_securePasswordKdfAlgoUnknown)
	return x.buf
}

func (e TL_securePasswordKdfAlgoPBKDF2HMACSHA512iter100000) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_securePasswordKdfAlgoPBKDF2HMACSHA512iter100000)
	x.StringBytes(e.salt)
	return x.buf
}

func (e TL_securePasswordKdfAlgoSHA512) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_securePasswordKdfAlgoSHA512)
	x.StringBytes(e.salt)
	return x.buf
}

func (e TL_secureSecretSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_secureSecretSettings)
	x.Bytes(e.secure_algo.encode())
	x.StringBytes(e.secure_secret)
	x.Long(e.secure_secret_id)
	return x.buf
}

func (e TL_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow)
	x.StringBytes(e.salt1)
	x.StringBytes(e.salt2)
	x.Int(e.g)
	x.StringBytes(e.p)
	return x.buf
}

func (e TL_inputCheckPasswordEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputCheckPasswordEmpty)
	return x.buf
}

func (e TL_inputCheckPasswordSRP) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputCheckPasswordSRP)
	x.Long(e.srp_id)
	x.StringBytes(e.A)
	x.StringBytes(e.M1)
	return x.buf
}

func (e TL_secureValueError) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_secureValueError)
	x.Bytes(e._type.encode())
	x.StringBytes(e.hash)
	x.String(e.text)
	return x.buf
}

func (e TL_secureValueErrorTranslationFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_secureValueErrorTranslationFile)
	x.Bytes(e._type.encode())
	x.StringBytes(e.file_hash)
	x.String(e.text)
	return x.buf
}

func (e TL_secureValueErrorTranslationFiles) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_secureValueErrorTranslationFiles)
	x.Bytes(e._type.encode())
	x.Vector(e.file_hash)
	x.String(e.text)
	return x.buf
}

func (e TL_secureRequiredType) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_secureRequiredType)
	x.Int(e.flags)
	x.Bytes(e._type.encode())
	return x.buf
}

func (e TL_secureRequiredTypeOneOf) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_secureRequiredTypeOneOf)
	x.Vector(e.types)
	return x.buf
}

func (e TL_help_passportConfigNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_passportConfigNotModified)
	return x.buf
}

func (e TL_help_passportConfig) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_passportConfig)
	x.Int(e.hash)
	x.Bytes(e.countries_langs.encode())
	return x.buf
}

func (e TL_inputAppEvent) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputAppEvent)
	x.Double(e.time)
	x.String(e._type)
	x.Long(e.peer)
	x.Bytes(e.data.encode())
	return x.buf
}

func (e TL_jsonObjectValue) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_jsonObjectValue)
	x.String(e.key)
	x.Bytes(e.value.encode())
	return x.buf
}

func (e TL_jsonNull) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_jsonNull)
	return x.buf
}

func (e TL_jsonBool) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_jsonBool)
	x.Bytes(e.value.encode())
	return x.buf
}

func (e TL_jsonNumber) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_jsonNumber)
	x.Double(e.value)
	return x.buf
}

func (e TL_jsonString) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_jsonString)
	x.String(e.value)
	return x.buf
}

func (e TL_jsonArray) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_jsonArray)
	x.Vector(e.value)
	return x.buf
}

func (e TL_jsonObject) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_jsonObject)
	x.Vector(e.value)
	return x.buf
}

func (e TL_inputNotifyBroadcasts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputNotifyBroadcasts)
	return x.buf
}

func (e TL_notifyBroadcasts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_notifyBroadcasts)
	return x.buf
}

func (e TL_textSubscript) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_textSubscript)
	x.Bytes(e.text.encode())
	return x.buf
}

func (e TL_textSuperscript) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_textSuperscript)
	x.Bytes(e.text.encode())
	return x.buf
}

func (e TL_textMarked) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_textMarked)
	x.Bytes(e.text.encode())
	return x.buf
}

func (e TL_textPhone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_textPhone)
	x.Bytes(e.text.encode())
	x.String(e.phone)
	return x.buf
}

func (e TL_textImage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_textImage)
	x.Long(e.document_id)
	x.Int(e.w)
	x.Int(e.h)
	return x.buf
}

func (e TL_pageBlockKicker) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pageBlockKicker)
	x.Bytes(e.text.encode())
	return x.buf
}

func (e TL_pageTableCell) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pageTableCell)
	x.Int(e.flags)
	if e.flags&(1<<7) != 0 {
		x.Bytes(e.text.encode())
	}
	if e.flags&(1<<1) != 0 {
		x.Int(e.colspan)
	}
	if e.flags&(1<<2) != 0 {
		x.Int(e.rowspan)
	}
	return x.buf
}

func (e TL_pageTableRow) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pageTableRow)
	x.Vector(e.cells)
	return x.buf
}

func (e TL_pageBlockTable) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pageBlockTable)
	x.Int(e.flags)
	x.Bytes(e.title.encode())
	x.Vector(e.rows)
	return x.buf
}

func (e TL_pageCaption) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pageCaption)
	x.Bytes(e.text.encode())
	x.Bytes(e.credit.encode())
	return x.buf
}

func (e TL_pageListItemText) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pageListItemText)
	x.Bytes(e.text.encode())
	return x.buf
}

func (e TL_pageListItemBlocks) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pageListItemBlocks)
	x.Vector(e.blocks)
	return x.buf
}

func (e TL_pageListOrderedItemText) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pageListOrderedItemText)
	x.String(e.num)
	x.Bytes(e.text.encode())
	return x.buf
}

func (e TL_pageListOrderedItemBlocks) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pageListOrderedItemBlocks)
	x.String(e.num)
	x.Vector(e.blocks)
	return x.buf
}

func (e TL_pageBlockOrderedList) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pageBlockOrderedList)
	x.Vector(e.items)
	return x.buf
}

func (e TL_pageBlockDetails) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pageBlockDetails)
	x.Int(e.flags)
	x.Vector(e.blocks)
	x.Bytes(e.title.encode())
	return x.buf
}

func (e TL_pageRelatedArticle) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pageRelatedArticle)
	x.Int(e.flags)
	x.String(e.url)
	x.Long(e.webpage_id)
	if e.flags&(1<<0) != 0 {
		x.String(e.title)
	}
	if e.flags&(1<<1) != 0 {
		x.String(e.description)
	}
	if e.flags&(1<<2) != 0 {
		x.Long(e.photo_id)
	}
	if e.flags&(1<<3) != 0 {
		x.String(e.author)
	}
	if e.flags&(1<<4) != 0 {
		x.Int(e.published_date)
	}
	return x.buf
}

func (e TL_pageBlockRelatedArticles) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pageBlockRelatedArticles)
	x.Bytes(e.title.encode())
	x.Vector(e.articles)
	return x.buf
}

func (e TL_pageBlockMap) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pageBlockMap)
	x.Bytes(e.geo.encode())
	x.Int(e.zoom)
	x.Int(e.w)
	x.Int(e.h)
	x.Bytes(e.caption.encode())
	return x.buf
}

func (e TL_page) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_page)
	x.Int(e.flags)
	x.String(e.url)
	x.Vector(e.blocks)
	x.Vector(e.photos)
	x.Vector(e.documents)
	if e.flags&(1<<3) != 0 {
		x.Int(e.views)
	}
	return x.buf
}

func (e TL_inputPrivacyKeyPhoneP2P) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputPrivacyKeyPhoneP2P)
	return x.buf
}

func (e TL_privacyKeyPhoneP2P) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_privacyKeyPhoneP2P)
	return x.buf
}

func (e TL_textAnchor) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_textAnchor)
	x.Bytes(e.text.encode())
	x.String(e.name)
	return x.buf
}

func (e TL_help_supportName) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_supportName)
	x.String(e.name)
	return x.buf
}

func (e TL_help_userInfoEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_userInfoEmpty)
	return x.buf
}

func (e TL_help_userInfo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_userInfo)
	x.String(e.message)
	x.Vector(e.entities)
	x.String(e.author)
	x.Int(e.date)
	return x.buf
}

func (e TL_messageActionContactSignUp) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionContactSignUp)
	return x.buf
}

func (e TL_updateMessagePoll) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateMessagePoll)
	x.Int(e.flags)
	x.Long(e.poll_id)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.poll.encode())
	}
	x.Bytes(e.results.encode())
	return x.buf
}

func (e TL_pollAnswer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pollAnswer)
	x.String(e.text)
	x.StringBytes(e.option)
	return x.buf
}

func (e TL_poll) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_poll)
	x.Long(e.id)
	x.Int(e.flags)
	x.String(e.question)
	x.Vector(e.answers)
	if e.flags&(1<<4) != 0 {
		x.Int(e.close_period)
	}
	if e.flags&(1<<5) != 0 {
		x.Int(e.close_date)
	}
	return x.buf
}

func (e TL_pollAnswerVoters) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pollAnswerVoters)
	x.Int(e.flags)
	x.StringBytes(e.option)
	x.Int(e.voters)
	return x.buf
}

func (e TL_pollResults) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_pollResults)
	x.Int(e.flags)
	if e.flags&(1<<1) != 0 {
		x.Vector(e.results)
	}
	if e.flags&(1<<2) != 0 {
		x.Int(e.total_voters)
	}
	if e.flags&(1<<3) != 0 {
		x.Vector(e.recent_voters)
	}
	if e.flags&(1<<4) != 0 {
		x.String(e.solution)
	}
	if e.flags&(1<<4) != 0 {
		x.Vector(e.solution_entities)
	}
	return x.buf
}

func (e TL_inputMediaPoll) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMediaPoll)
	x.Int(e.flags)
	x.Bytes(e.poll.encode())
	if e.flags&(1<<0) != 0 {
		x.Vector(e.correct_answers)
	}
	if e.flags&(1<<1) != 0 {
		x.String(e.solution)
	}
	if e.flags&(1<<1) != 0 {
		x.Vector(e.solution_entities)
	}
	return x.buf
}

func (e TL_messageMediaPoll) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageMediaPoll)
	x.Bytes(e.poll.encode())
	x.Bytes(e.results.encode())
	return x.buf
}

func (e TL_chatOnlines) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chatOnlines)
	x.Int(e.onlines)
	return x.buf
}

func (e TL_statsURL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_statsURL)
	x.String(e.url)
	return x.buf
}

func (e TL_photoStrippedSize) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_photoStrippedSize)
	x.String(e._type)
	x.StringBytes(e.bytes)
	return x.buf
}

func (e TL_chatAdminRights) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chatAdminRights)
	x.Int(e.flags)
	return x.buf
}

func (e TL_chatBannedRights) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chatBannedRights)
	x.Int(e.flags)
	x.Int(e.until_date)
	return x.buf
}

func (e TL_updateChatDefaultBannedRights) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateChatDefaultBannedRights)
	x.Bytes(e.peer.encode())
	x.Bytes(e.default_banned_rights.encode())
	x.Int(e.version)
	return x.buf
}

func (e TL_inputWallPaper) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputWallPaper)
	x.Long(e.id)
	x.Long(e.access_hash)
	return x.buf
}

func (e TL_inputWallPaperSlug) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputWallPaperSlug)
	x.String(e.slug)
	return x.buf
}

func (e TL_channelParticipantsContacts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelParticipantsContacts)
	x.String(e.q)
	return x.buf
}

func (e TL_channelAdminLogEventActionDefaultBannedRights) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionDefaultBannedRights)
	x.Bytes(e.prev_banned_rights.encode())
	x.Bytes(e.new_banned_rights.encode())
	return x.buf
}

func (e TL_channelAdminLogEventActionStopPoll) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionStopPoll)
	x.Bytes(e.message.encode())
	return x.buf
}

func (e TL_account_wallPapersNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_wallPapersNotModified)
	return x.buf
}

func (e TL_account_wallPapers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_wallPapers)
	x.Long(e.hash)
	x.Vector(e.wallpapers)
	return x.buf
}

func (e TL_codeSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_codeSettings)
	x.Int(e.flags)
	if e.flags&(1<<6) != 0 {
		x.Vector(e.logout_tokens)
	}
	if e.flags&(1<<8) != 0 {
		x.String(e.token)
	}
	if e.flags&(1<<8) != 0 {
		x.Bytes(e.app_sandbox.encode())
	}
	return x.buf
}

func (e TL_wallPaperSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_wallPaperSettings)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.Int(e.background_color)
	}
	if e.flags&(1<<4) != 0 {
		x.Int(e.second_background_color)
	}
	if e.flags&(1<<5) != 0 {
		x.Int(e.third_background_color)
	}
	if e.flags&(1<<6) != 0 {
		x.Int(e.fourth_background_color)
	}
	if e.flags&(1<<3) != 0 {
		x.Int(e.intensity)
	}
	if e.flags&(1<<4) != 0 {
		x.Int(e.rotation)
	}
	if e.flags&(1<<7) != 0 {
		x.String(e.emoticon)
	}
	return x.buf
}

func (e TL_autoDownloadSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_autoDownloadSettings)
	x.Int(e.flags)
	x.Int(e.photo_size_max)
	x.Long(e.video_size_max)
	x.Long(e.file_size_max)
	x.Int(e.video_upload_maxbitrate)
	x.Int(e.small_queue_active_operations_max)
	x.Int(e.large_queue_active_operations_max)
	return x.buf
}

func (e TL_account_autoDownloadSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_autoDownloadSettings)
	x.Bytes(e.low.encode())
	x.Bytes(e.medium.encode())
	x.Bytes(e.high.encode())
	return x.buf
}

func (e TL_emojiKeyword) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_emojiKeyword)
	x.String(e.keyword)
	x.VectorString(e.emoticons)
	return x.buf
}

func (e TL_emojiKeywordDeleted) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_emojiKeywordDeleted)
	x.String(e.keyword)
	x.VectorString(e.emoticons)
	return x.buf
}

func (e TL_emojiKeywordsDifference) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_emojiKeywordsDifference)
	x.String(e.lang_code)
	x.Int(e.from_version)
	x.Int(e.version)
	x.Vector(e.keywords)
	return x.buf
}

func (e TL_emojiURL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_emojiURL)
	x.String(e.url)
	return x.buf
}

func (e TL_emojiLanguage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_emojiLanguage)
	x.String(e.lang_code)
	return x.buf
}

func (e TL_inputPrivacyKeyForwards) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputPrivacyKeyForwards)
	return x.buf
}

func (e TL_privacyKeyForwards) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_privacyKeyForwards)
	return x.buf
}

func (e TL_inputPrivacyKeyProfilePhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputPrivacyKeyProfilePhoto)
	return x.buf
}

func (e TL_privacyKeyProfilePhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_privacyKeyProfilePhoto)
	return x.buf
}

func (e TL_inputPhotoFileLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputPhotoFileLocation)
	x.Long(e.id)
	x.Long(e.access_hash)
	x.StringBytes(e.file_reference)
	x.String(e.thumb_size)
	return x.buf
}

func (e TL_inputPhotoLegacyFileLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputPhotoLegacyFileLocation)
	x.Long(e.id)
	x.Long(e.access_hash)
	x.StringBytes(e.file_reference)
	x.Long(e.volume_id)
	x.Int(e.local_id)
	x.Long(e.secret)
	return x.buf
}

func (e TL_inputPeerPhotoFileLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputPeerPhotoFileLocation)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	x.Long(e.photo_id)
	return x.buf
}

func (e TL_inputStickerSetThumb) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputStickerSetThumb)
	x.Bytes(e.stickerset.encode())
	x.Int(e.thumb_version)
	return x.buf
}

func (e TL_folder) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_folder)
	x.Int(e.flags)
	x.Int(e.id)
	x.String(e.title)
	if e.flags&(1<<3) != 0 {
		x.Bytes(e.photo.encode())
	}
	return x.buf
}

func (e TL_dialogFolder) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_dialogFolder)
	x.Int(e.flags)
	x.Bytes(e.folder.encode())
	x.Bytes(e.peer.encode())
	x.Int(e.top_message)
	x.Int(e.unread_muted_peers_count)
	x.Int(e.unread_unmuted_peers_count)
	x.Int(e.unread_muted_messages_count)
	x.Int(e.unread_unmuted_messages_count)
	return x.buf
}

func (e TL_inputDialogPeerFolder) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputDialogPeerFolder)
	x.Int(e.folder_id)
	return x.buf
}

func (e TL_dialogPeerFolder) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_dialogPeerFolder)
	x.Int(e.folder_id)
	return x.buf
}

func (e TL_inputFolderPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputFolderPeer)
	x.Bytes(e.peer.encode())
	x.Int(e.folder_id)
	return x.buf
}

func (e TL_folderPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_folderPeer)
	x.Bytes(e.peer.encode())
	x.Int(e.folder_id)
	return x.buf
}

func (e TL_updateFolderPeers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateFolderPeers)
	x.Vector(e.folder_peers)
	x.Int(e.pts)
	x.Int(e.pts_count)
	return x.buf
}

func (e TL_inputUserFromMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputUserFromMessage)
	x.Bytes(e.peer.encode())
	x.Int(e.msg_id)
	x.Long(e.user_id)
	return x.buf
}

func (e TL_inputChannelFromMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputChannelFromMessage)
	x.Bytes(e.peer.encode())
	x.Int(e.msg_id)
	x.Long(e.channel_id)
	return x.buf
}

func (e TL_inputPeerUserFromMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputPeerUserFromMessage)
	x.Bytes(e.peer.encode())
	x.Int(e.msg_id)
	x.Long(e.user_id)
	return x.buf
}

func (e TL_inputPeerChannelFromMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputPeerChannelFromMessage)
	x.Bytes(e.peer.encode())
	x.Int(e.msg_id)
	x.Long(e.channel_id)
	return x.buf
}

func (e TL_inputPrivacyKeyPhoneNumber) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputPrivacyKeyPhoneNumber)
	return x.buf
}

func (e TL_privacyKeyPhoneNumber) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_privacyKeyPhoneNumber)
	return x.buf
}

func (e TL_topPeerCategoryForwardUsers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_topPeerCategoryForwardUsers)
	return x.buf
}

func (e TL_topPeerCategoryForwardChats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_topPeerCategoryForwardChats)
	return x.buf
}

func (e TL_channelAdminLogEventActionChangeLinkedChat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionChangeLinkedChat)
	x.Long(e.prev_value)
	x.Long(e.new_value)
	return x.buf
}

func (e TL_messages_searchCounter) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_searchCounter)
	x.Int(e.flags)
	x.Bytes(e.filter.encode())
	x.Int(e.count)
	return x.buf
}

func (e TL_keyboardButtonUrlAuth) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_keyboardButtonUrlAuth)
	x.Int(e.flags)
	x.String(e.text)
	if e.flags&(1<<0) != 0 {
		x.String(e.fwd_text)
	}
	x.String(e.url)
	x.Int(e.button_id)
	return x.buf
}

func (e TL_inputKeyboardButtonUrlAuth) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputKeyboardButtonUrlAuth)
	x.Int(e.flags)
	x.String(e.text)
	if e.flags&(1<<1) != 0 {
		x.String(e.fwd_text)
	}
	x.String(e.url)
	x.Bytes(e.bot.encode())
	return x.buf
}

func (e TL_urlAuthResultRequest) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_urlAuthResultRequest)
	x.Int(e.flags)
	x.Bytes(e.bot.encode())
	x.String(e.domain)
	return x.buf
}

func (e TL_urlAuthResultAccepted) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_urlAuthResultAccepted)
	x.String(e.url)
	return x.buf
}

func (e TL_urlAuthResultDefault) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_urlAuthResultDefault)
	return x.buf
}

func (e TL_inputPrivacyValueAllowChatParticipants) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputPrivacyValueAllowChatParticipants)
	x.VectorLong(e.chats)
	return x.buf
}

func (e TL_inputPrivacyValueDisallowChatParticipants) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputPrivacyValueDisallowChatParticipants)
	x.VectorLong(e.chats)
	return x.buf
}

func (e TL_privacyValueAllowChatParticipants) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_privacyValueAllowChatParticipants)
	x.VectorLong(e.chats)
	return x.buf
}

func (e TL_privacyValueDisallowChatParticipants) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_privacyValueDisallowChatParticipants)
	x.VectorLong(e.chats)
	return x.buf
}

func (e TL_messageEntityUnderline) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageEntityUnderline)
	x.Int(e.offset)
	x.Int(e.length)
	return x.buf
}

func (e TL_messageEntityStrike) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageEntityStrike)
	x.Int(e.offset)
	x.Int(e.length)
	return x.buf
}

func (e TL_updatePeerSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updatePeerSettings)
	x.Bytes(e.peer.encode())
	x.Bytes(e.settings.encode())
	return x.buf
}

func (e TL_channelLocationEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelLocationEmpty)
	return x.buf
}

func (e TL_channelLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelLocation)
	x.Bytes(e.geo_point.encode())
	x.String(e.address)
	return x.buf
}

func (e TL_peerLocated) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_peerLocated)
	x.Bytes(e.peer.encode())
	x.Int(e.expires)
	x.Int(e.distance)
	return x.buf
}

func (e TL_updatePeerLocated) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updatePeerLocated)
	x.Vector(e.peers)
	return x.buf
}

func (e TL_channelAdminLogEventActionChangeLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionChangeLocation)
	x.Bytes(e.prev_value.encode())
	x.Bytes(e.new_value.encode())
	return x.buf
}

func (e TL_inputReportReasonGeoIrrelevant) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputReportReasonGeoIrrelevant)
	return x.buf
}

func (e TL_channelAdminLogEventActionToggleSlowMode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionToggleSlowMode)
	x.Int(e.prev_value)
	x.Int(e.new_value)
	return x.buf
}

func (e TL_auth_authorizationSignUpRequired) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_authorizationSignUpRequired)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.terms_of_service.encode())
	}
	return x.buf
}

func (e TL_payments_paymentVerificationNeeded) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_payments_paymentVerificationNeeded)
	x.String(e.url)
	return x.buf
}

func (e TL_inputStickerSetAnimatedEmoji) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputStickerSetAnimatedEmoji)
	return x.buf
}

func (e TL_updateNewScheduledMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateNewScheduledMessage)
	x.Bytes(e.message.encode())
	return x.buf
}

func (e TL_updateDeleteScheduledMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateDeleteScheduledMessages)
	x.Bytes(e.peer.encode())
	x.VectorInt(e.messages)
	return x.buf
}

func (e TL_restrictionReason) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_restrictionReason)
	x.String(e.platform)
	x.String(e.reason)
	x.String(e.text)
	return x.buf
}

func (e TL_inputTheme) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputTheme)
	x.Long(e.id)
	x.Long(e.access_hash)
	return x.buf
}

func (e TL_inputThemeSlug) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputThemeSlug)
	x.String(e.slug)
	return x.buf
}

func (e TL_theme) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_theme)
	x.Int(e.flags)
	x.Long(e.id)
	x.Long(e.access_hash)
	x.String(e.slug)
	x.String(e.title)
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.document.encode())
	}
	if e.flags&(1<<3) != 0 {
		x.Vector(e.settings)
	}
	if e.flags&(1<<6) != 0 {
		x.String(e.emoticon)
	}
	if e.flags&(1<<4) != 0 {
		x.Int(e.installs_count)
	}
	return x.buf
}

func (e TL_account_themesNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_themesNotModified)
	return x.buf
}

func (e TL_account_themes) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_themes)
	x.Long(e.hash)
	x.Vector(e.themes)
	return x.buf
}

func (e TL_updateTheme) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateTheme)
	x.Bytes(e.theme.encode())
	return x.buf
}

func (e TL_inputPrivacyKeyAddedByPhone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputPrivacyKeyAddedByPhone)
	return x.buf
}

func (e TL_privacyKeyAddedByPhone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_privacyKeyAddedByPhone)
	return x.buf
}

func (e TL_updateGeoLiveViewed) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateGeoLiveViewed)
	x.Bytes(e.peer.encode())
	x.Int(e.msg_id)
	return x.buf
}

func (e TL_updateLoginToken) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateLoginToken)
	return x.buf
}

func (e TL_auth_loginToken) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_loginToken)
	x.Int(e.expires)
	x.StringBytes(e.token)
	return x.buf
}

func (e TL_auth_loginTokenMigrateTo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_loginTokenMigrateTo)
	x.Int(e.dc_id)
	x.StringBytes(e.token)
	return x.buf
}

func (e TL_auth_loginTokenSuccess) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_loginTokenSuccess)
	x.Bytes(e.authorization.encode())
	return x.buf
}

func (e TL_account_contentSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_contentSettings)
	x.Int(e.flags)
	return x.buf
}

func (e TL_messages_inactiveChats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_inactiveChats)
	x.VectorInt(e.dates)
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_baseThemeClassic) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_baseThemeClassic)
	return x.buf
}

func (e TL_baseThemeDay) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_baseThemeDay)
	return x.buf
}

func (e TL_baseThemeNight) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_baseThemeNight)
	return x.buf
}

func (e TL_baseThemeTinted) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_baseThemeTinted)
	return x.buf
}

func (e TL_baseThemeArctic) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_baseThemeArctic)
	return x.buf
}

func (e TL_inputWallPaperNoFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputWallPaperNoFile)
	x.Long(e.id)
	return x.buf
}

func (e TL_wallPaperNoFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_wallPaperNoFile)
	x.Long(e.id)
	x.Int(e.flags)
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.settings.encode())
	}
	return x.buf
}

func (e TL_inputThemeSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputThemeSettings)
	x.Int(e.flags)
	x.Bytes(e.base_theme.encode())
	x.Int(e.accent_color)
	if e.flags&(1<<3) != 0 {
		x.Int(e.outbox_accent_color)
	}
	if e.flags&(1<<0) != 0 {
		x.VectorInt(e.message_colors)
	}
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.wallpaper.encode())
	}
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.wallpaper_settings.encode())
	}
	return x.buf
}

func (e TL_themeSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_themeSettings)
	x.Int(e.flags)
	x.Bytes(e.base_theme.encode())
	x.Int(e.accent_color)
	if e.flags&(1<<3) != 0 {
		x.Int(e.outbox_accent_color)
	}
	if e.flags&(1<<0) != 0 {
		x.VectorInt(e.message_colors)
	}
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.wallpaper.encode())
	}
	return x.buf
}

func (e TL_webPageAttributeTheme) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_webPageAttributeTheme)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.Vector(e.documents)
	}
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.settings.encode())
	}
	return x.buf
}

func (e TL_updateMessagePollVote) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateMessagePollVote)
	x.Long(e.poll_id)
	x.Bytes(e.peer.encode())
	x.Vector(e.options)
	x.Int(e.qts)
	return x.buf
}

func (e TL_messages_votesList) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_votesList)
	x.Int(e.flags)
	x.Int(e.count)
	x.Vector(e.votes)
	x.Vector(e.chats)
	x.Vector(e.users)
	if e.flags&(1<<0) != 0 {
		x.String(e.next_offset)
	}
	return x.buf
}

func (e TL_keyboardButtonRequestPoll) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_keyboardButtonRequestPoll)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.quiz.encode())
	}
	x.String(e.text)
	return x.buf
}

func (e TL_messageEntityBankCard) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageEntityBankCard)
	x.Int(e.offset)
	x.Int(e.length)
	return x.buf
}

func (e TL_bankCardOpenUrl) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_bankCardOpenUrl)
	x.String(e.url)
	x.String(e.name)
	return x.buf
}

func (e TL_payments_bankCardData) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_payments_bankCardData)
	x.String(e.title)
	x.Vector(e.open_urls)
	return x.buf
}

func (e TL_peerSelfLocated) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_peerSelfLocated)
	x.Int(e.expires)
	return x.buf
}

func (e TL_dialogFilter) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_dialogFilter)
	x.Int(e.flags)
	x.Int(e.id)
	x.String(e.title)
	if e.flags&(1<<25) != 0 {
		x.String(e.emoticon)
	}
	x.Vector(e.pinned_peers)
	x.Vector(e.include_peers)
	x.Vector(e.exclude_peers)
	return x.buf
}

func (e TL_dialogFilterSuggested) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_dialogFilterSuggested)
	x.Bytes(e.filter.encode())
	x.String(e.description)
	return x.buf
}

func (e TL_updateDialogFilter) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateDialogFilter)
	x.Int(e.flags)
	x.Int(e.id)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.filter.encode())
	}
	return x.buf
}

func (e TL_updateDialogFilterOrder) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateDialogFilterOrder)
	x.VectorInt(e.order)
	return x.buf
}

func (e TL_updateDialogFilters) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateDialogFilters)
	return x.buf
}

func (e TL_statsDateRangeDays) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_statsDateRangeDays)
	x.Int(e.min_date)
	x.Int(e.max_date)
	return x.buf
}

func (e TL_statsAbsValueAndPrev) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_statsAbsValueAndPrev)
	x.Double(e.current)
	x.Double(e.previous)
	return x.buf
}

func (e TL_statsPercentValue) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_statsPercentValue)
	x.Double(e.part)
	x.Double(e.total)
	return x.buf
}

func (e TL_statsGraphAsync) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_statsGraphAsync)
	x.String(e.token)
	return x.buf
}

func (e TL_statsGraphError) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_statsGraphError)
	x.String(e.error)
	return x.buf
}

func (e TL_statsGraph) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_statsGraph)
	x.Int(e.flags)
	x.Bytes(e.json.encode())
	if e.flags&(1<<0) != 0 {
		x.String(e.zoom_token)
	}
	return x.buf
}

func (e TL_stats_broadcastStats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stats_broadcastStats)
	x.Bytes(e.period.encode())
	x.Bytes(e.followers.encode())
	x.Bytes(e.views_per_post.encode())
	x.Bytes(e.shares_per_post.encode())
	x.Bytes(e.reactions_per_post.encode())
	x.Bytes(e.views_per_story.encode())
	x.Bytes(e.shares_per_story.encode())
	x.Bytes(e.reactions_per_story.encode())
	x.Bytes(e.enabled_notifications.encode())
	x.Bytes(e.growth_graph.encode())
	x.Bytes(e.followers_graph.encode())
	x.Bytes(e.mute_graph.encode())
	x.Bytes(e.top_hours_graph.encode())
	x.Bytes(e.interactions_graph.encode())
	x.Bytes(e.iv_interactions_graph.encode())
	x.Bytes(e.views_by_source_graph.encode())
	x.Bytes(e.new_followers_by_source_graph.encode())
	x.Bytes(e.languages_graph.encode())
	x.Bytes(e.reactions_by_emotion_graph.encode())
	x.Bytes(e.story_interactions_graph.encode())
	x.Bytes(e.story_reactions_by_emotion_graph.encode())
	x.Vector(e.recent_posts_interactions)
	return x.buf
}

func (e TL_inputMediaDice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMediaDice)
	x.String(e.emoticon)
	return x.buf
}

func (e TL_messageMediaDice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageMediaDice)
	x.Int(e.value)
	x.String(e.emoticon)
	return x.buf
}

func (e TL_inputStickerSetDice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputStickerSetDice)
	x.String(e.emoticon)
	return x.buf
}

func (e TL_help_promoDataEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_promoDataEmpty)
	x.Int(e.expires)
	return x.buf
}

func (e TL_help_promoData) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_promoData)
	x.Int(e.flags)
	x.Int(e.expires)
	x.Bytes(e.peer.encode())
	x.Vector(e.chats)
	x.Vector(e.users)
	if e.flags&(1<<1) != 0 {
		x.String(e.psa_type)
	}
	if e.flags&(1<<2) != 0 {
		x.String(e.psa_message)
	}
	return x.buf
}

func (e TL_videoSize) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_videoSize)
	x.Int(e.flags)
	x.String(e._type)
	x.Int(e.w)
	x.Int(e.h)
	x.Int(e.size)
	if e.flags&(1<<0) != 0 {
		x.Double(e.video_start_ts)
	}
	return x.buf
}

func (e TL_updatePhoneCallSignalingData) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updatePhoneCallSignalingData)
	x.Long(e.phone_call_id)
	x.StringBytes(e.data)
	return x.buf
}

func (e TL_chatInvitePeek) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chatInvitePeek)
	x.Bytes(e.chat.encode())
	x.Int(e.expires)
	return x.buf
}

func (e TL_statsGroupTopPoster) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_statsGroupTopPoster)
	x.Long(e.user_id)
	x.Int(e.messages)
	x.Int(e.avg_chars)
	return x.buf
}

func (e TL_statsGroupTopAdmin) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_statsGroupTopAdmin)
	x.Long(e.user_id)
	x.Int(e.deleted)
	x.Int(e.kicked)
	x.Int(e.banned)
	return x.buf
}

func (e TL_statsGroupTopInviter) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_statsGroupTopInviter)
	x.Long(e.user_id)
	x.Int(e.invitations)
	return x.buf
}

func (e TL_stats_megagroupStats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stats_megagroupStats)
	x.Bytes(e.period.encode())
	x.Bytes(e.members.encode())
	x.Bytes(e.messages.encode())
	x.Bytes(e.viewers.encode())
	x.Bytes(e.posters.encode())
	x.Bytes(e.growth_graph.encode())
	x.Bytes(e.members_graph.encode())
	x.Bytes(e.new_members_by_source_graph.encode())
	x.Bytes(e.languages_graph.encode())
	x.Bytes(e.messages_graph.encode())
	x.Bytes(e.actions_graph.encode())
	x.Bytes(e.top_hours_graph.encode())
	x.Bytes(e.weekdays_graph.encode())
	x.Vector(e.top_posters)
	x.Vector(e.top_admins)
	x.Vector(e.top_inviters)
	x.Vector(e.users)
	return x.buf
}

func (e TL_globalPrivacySettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_globalPrivacySettings)
	x.Int(e.flags)
	return x.buf
}

func (e TL_phoneConnectionWebrtc) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phoneConnectionWebrtc)
	x.Int(e.flags)
	x.Long(e.id)
	x.String(e.ip)
	x.String(e.ipv6)
	x.Int(e.port)
	x.String(e.username)
	x.String(e.password)
	return x.buf
}

func (e TL_help_countryCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_countryCode)
	x.Int(e.flags)
	x.String(e.country_code)
	if e.flags&(1<<0) != 0 {
		x.VectorString(e.prefixes)
	}
	if e.flags&(1<<1) != 0 {
		x.VectorString(e.patterns)
	}
	return x.buf
}

func (e TL_help_country) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_country)
	x.Int(e.flags)
	x.String(e.iso2)
	x.String(e.default_name)
	if e.flags&(1<<1) != 0 {
		x.String(e.name)
	}
	x.Vector(e.country_codes)
	return x.buf
}

func (e TL_help_countriesListNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_countriesListNotModified)
	return x.buf
}

func (e TL_help_countriesList) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_countriesList)
	x.Vector(e.countries)
	x.Int(e.hash)
	return x.buf
}

func (e TL_messageViews) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageViews)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.Int(e.views)
	}
	if e.flags&(1<<1) != 0 {
		x.Int(e.forwards)
	}
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.replies.encode())
	}
	return x.buf
}

func (e TL_updateChannelMessageForwards) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateChannelMessageForwards)
	x.Long(e.channel_id)
	x.Int(e.id)
	x.Int(e.forwards)
	return x.buf
}

func (e TL_photoSizeProgressive) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_photoSizeProgressive)
	x.String(e._type)
	x.Int(e.w)
	x.Int(e.h)
	x.VectorInt(e.sizes)
	return x.buf
}

func (e TL_messages_messageViews) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_messageViews)
	x.Vector(e.views)
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_updateReadChannelDiscussionInbox) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateReadChannelDiscussionInbox)
	x.Int(e.flags)
	x.Long(e.channel_id)
	x.Int(e.top_msg_id)
	x.Int(e.read_max_id)
	if e.flags&(1<<0) != 0 {
		x.Long(e.broadcast_id)
	}
	if e.flags&(1<<0) != 0 {
		x.Int(e.broadcast_post)
	}
	return x.buf
}

func (e TL_updateReadChannelDiscussionOutbox) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateReadChannelDiscussionOutbox)
	x.Long(e.channel_id)
	x.Int(e.top_msg_id)
	x.Int(e.read_max_id)
	return x.buf
}

func (e TL_messages_discussionMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_discussionMessage)
	x.Int(e.flags)
	x.Vector(e.messages)
	if e.flags&(1<<0) != 0 {
		x.Int(e.max_id)
	}
	if e.flags&(1<<1) != 0 {
		x.Int(e.read_inbox_max_id)
	}
	if e.flags&(1<<2) != 0 {
		x.Int(e.read_outbox_max_id)
	}
	x.Int(e.unread_count)
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_messageReplyHeader) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageReplyHeader)
	x.Int(e.flags)
	if e.flags&(1<<4) != 0 {
		x.Int(e.reply_to_msg_id)
	}
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.reply_to_peer_id.encode())
	}
	if e.flags&(1<<5) != 0 {
		x.Bytes(e.reply_from.encode())
	}
	if e.flags&(1<<8) != 0 {
		x.Bytes(e.reply_media.encode())
	}
	if e.flags&(1<<1) != 0 {
		x.Int(e.reply_to_top_id)
	}
	if e.flags&(1<<6) != 0 {
		x.String(e.quote_text)
	}
	if e.flags&(1<<7) != 0 {
		x.Vector(e.quote_entities)
	}
	if e.flags&(1<<10) != 0 {
		x.Int(e.quote_offset)
	}
	return x.buf
}

func (e TL_messageReplies) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageReplies)
	x.Int(e.flags)
	x.Int(e.replies)
	x.Int(e.replies_pts)
	if e.flags&(1<<1) != 0 {
		x.Vector(e.recent_repliers)
	}
	if e.flags&(1<<0) != 0 {
		x.Long(e.channel_id)
	}
	if e.flags&(1<<2) != 0 {
		x.Int(e.max_id)
	}
	if e.flags&(1<<3) != 0 {
		x.Int(e.read_max_id)
	}
	return x.buf
}

func (e TL_updatePeerBlocked) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updatePeerBlocked)
	x.Int(e.flags)
	x.Bytes(e.peer_id.encode())
	return x.buf
}

func (e TL_peerBlocked) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_peerBlocked)
	x.Bytes(e.peer_id.encode())
	x.Int(e.date)
	return x.buf
}

func (e TL_updateChannelUserTyping) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateChannelUserTyping)
	x.Int(e.flags)
	x.Long(e.channel_id)
	if e.flags&(1<<0) != 0 {
		x.Int(e.top_msg_id)
	}
	x.Bytes(e.from_id.encode())
	x.Bytes(e.action.encode())
	return x.buf
}

func (e TL_inputMessageCallbackQuery) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMessageCallbackQuery)
	x.Int(e.id)
	x.Long(e.query_id)
	return x.buf
}

func (e TL_channelParticipantLeft) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelParticipantLeft)
	x.Bytes(e.peer.encode())
	return x.buf
}

func (e TL_channelParticipantsMentions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelParticipantsMentions)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.String(e.q)
	}
	if e.flags&(1<<1) != 0 {
		x.Int(e.top_msg_id)
	}
	return x.buf
}

func (e TL_updatePinnedMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updatePinnedMessages)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	x.VectorInt(e.messages)
	x.Int(e.pts)
	x.Int(e.pts_count)
	return x.buf
}

func (e TL_updatePinnedChannelMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updatePinnedChannelMessages)
	x.Int(e.flags)
	x.Long(e.channel_id)
	x.VectorInt(e.messages)
	x.Int(e.pts)
	x.Int(e.pts_count)
	return x.buf
}

func (e TL_inputMessagesFilterPinned) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMessagesFilterPinned)
	return x.buf
}

func (e TL_stats_messageStats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stats_messageStats)
	x.Bytes(e.views_graph.encode())
	x.Bytes(e.reactions_by_emotion_graph.encode())
	return x.buf
}

func (e TL_messageActionGeoProximityReached) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionGeoProximityReached)
	x.Bytes(e.from_id.encode())
	x.Bytes(e.to_id.encode())
	x.Int(e.distance)
	return x.buf
}

func (e TL_photoPathSize) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_photoPathSize)
	x.String(e._type)
	x.StringBytes(e.bytes)
	return x.buf
}

func (e TL_speakingInGroupCallAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_speakingInGroupCallAction)
	return x.buf
}

func (e TL_groupCallDiscarded) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_groupCallDiscarded)
	x.Long(e.id)
	x.Long(e.access_hash)
	x.Int(e.duration)
	return x.buf
}

func (e TL_groupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_groupCall)
	x.Int(e.flags)
	x.Long(e.id)
	x.Long(e.access_hash)
	x.Int(e.participants_count)
	if e.flags&(1<<3) != 0 {
		x.String(e.title)
	}
	if e.flags&(1<<4) != 0 {
		x.Int(e.stream_dc_id)
	}
	if e.flags&(1<<5) != 0 {
		x.Int(e.record_start_date)
	}
	if e.flags&(1<<7) != 0 {
		x.Int(e.schedule_date)
	}
	if e.flags&(1<<10) != 0 {
		x.Int(e.unmuted_video_count)
	}
	x.Int(e.unmuted_video_limit)
	x.Int(e.version)
	return x.buf
}

func (e TL_inputGroupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputGroupCall)
	x.Long(e.id)
	x.Long(e.access_hash)
	return x.buf
}

func (e TL_messageActionGroupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionGroupCall)
	x.Int(e.flags)
	x.Bytes(e.call.encode())
	if e.flags&(1<<0) != 0 {
		x.Int(e.duration)
	}
	return x.buf
}

func (e TL_messageActionInviteToGroupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionInviteToGroupCall)
	x.Bytes(e.call.encode())
	x.VectorLong(e.users)
	return x.buf
}

func (e TL_groupCallParticipant) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_groupCallParticipant)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	x.Int(e.date)
	if e.flags&(1<<3) != 0 {
		x.Int(e.active_date)
	}
	x.Int(e.source)
	if e.flags&(1<<7) != 0 {
		x.Int(e.volume)
	}
	if e.flags&(1<<11) != 0 {
		x.String(e.about)
	}
	if e.flags&(1<<13) != 0 {
		x.Long(e.raise_hand_rating)
	}
	if e.flags&(1<<6) != 0 {
		x.Bytes(e.video.encode())
	}
	if e.flags&(1<<14) != 0 {
		x.Bytes(e.presentation.encode())
	}
	return x.buf
}

func (e TL_updateChat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateChat)
	x.Long(e.chat_id)
	return x.buf
}

func (e TL_updateGroupCallParticipants) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateGroupCallParticipants)
	x.Bytes(e.call.encode())
	x.Vector(e.participants)
	x.Int(e.version)
	return x.buf
}

func (e TL_updateGroupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateGroupCall)
	x.Long(e.chat_id)
	x.Bytes(e.call.encode())
	return x.buf
}

func (e TL_phone_groupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phone_groupCall)
	x.Bytes(e.call.encode())
	x.Vector(e.participants)
	x.String(e.participants_next_offset)
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_phone_groupParticipants) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phone_groupParticipants)
	x.Int(e.count)
	x.Vector(e.participants)
	x.String(e.next_offset)
	x.Vector(e.chats)
	x.Vector(e.users)
	x.Int(e.version)
	return x.buf
}

func (e TL_inlineQueryPeerTypeSameBotPM) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inlineQueryPeerTypeSameBotPM)
	return x.buf
}

func (e TL_inlineQueryPeerTypePM) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inlineQueryPeerTypePM)
	return x.buf
}

func (e TL_inlineQueryPeerTypeChat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inlineQueryPeerTypeChat)
	return x.buf
}

func (e TL_inlineQueryPeerTypeMegagroup) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inlineQueryPeerTypeMegagroup)
	return x.buf
}

func (e TL_inlineQueryPeerTypeBroadcast) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inlineQueryPeerTypeBroadcast)
	return x.buf
}

func (e TL_channelAdminLogEventActionStartGroupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionStartGroupCall)
	x.Bytes(e.call.encode())
	return x.buf
}

func (e TL_channelAdminLogEventActionDiscardGroupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionDiscardGroupCall)
	x.Bytes(e.call.encode())
	return x.buf
}

func (e TL_channelAdminLogEventActionParticipantMute) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionParticipantMute)
	x.Bytes(e.participant.encode())
	return x.buf
}

func (e TL_channelAdminLogEventActionParticipantUnmute) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionParticipantUnmute)
	x.Bytes(e.participant.encode())
	return x.buf
}

func (e TL_channelAdminLogEventActionToggleGroupCallSetting) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionToggleGroupCallSetting)
	x.Bytes(e.join_muted.encode())
	return x.buf
}

func (e TL_inputPaymentCredentialsGooglePay) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputPaymentCredentialsGooglePay)
	x.Bytes(e.payment_token.encode())
	return x.buf
}

func (e TL_messages_historyImport) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_historyImport)
	x.Long(e.id)
	return x.buf
}

func (e TL_sendMessageHistoryImportAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_sendMessageHistoryImportAction)
	x.Int(e.progress)
	return x.buf
}

func (e TL_messages_historyImportParsed) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_historyImportParsed)
	x.Int(e.flags)
	if e.flags&(1<<2) != 0 {
		x.String(e.title)
	}
	return x.buf
}

func (e TL_inputReportReasonFake) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputReportReasonFake)
	return x.buf
}

func (e TL_messages_affectedFoundMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_affectedFoundMessages)
	x.Int(e.pts)
	x.Int(e.pts_count)
	x.Int(e.offset)
	x.VectorInt(e.messages)
	return x.buf
}

func (e TL_messageActionSetMessagesTTL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionSetMessagesTTL)
	x.Int(e.flags)
	x.Int(e.period)
	if e.flags&(1<<0) != 0 {
		x.Long(e.auto_setting_from)
	}
	return x.buf
}

func (e TL_updatePeerHistoryTTL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updatePeerHistoryTTL)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	if e.flags&(1<<0) != 0 {
		x.Int(e.ttl_period)
	}
	return x.buf
}

func (e TL_updateChatParticipant) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateChatParticipant)
	x.Int(e.flags)
	x.Long(e.chat_id)
	x.Int(e.date)
	x.Long(e.actor_id)
	x.Long(e.user_id)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.prev_participant.encode())
	}
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.new_participant.encode())
	}
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.invite.encode())
	}
	x.Int(e.qts)
	return x.buf
}

func (e TL_updateChannelParticipant) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateChannelParticipant)
	x.Int(e.flags)
	x.Long(e.channel_id)
	x.Int(e.date)
	x.Long(e.actor_id)
	x.Long(e.user_id)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.prev_participant.encode())
	}
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.new_participant.encode())
	}
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.invite.encode())
	}
	x.Int(e.qts)
	return x.buf
}

func (e TL_updateBotStopped) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateBotStopped)
	x.Long(e.user_id)
	x.Int(e.date)
	x.Bytes(e.stopped.encode())
	x.Int(e.qts)
	return x.buf
}

func (e TL_chatInviteImporter) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chatInviteImporter)
	x.Int(e.flags)
	x.Long(e.user_id)
	x.Int(e.date)
	if e.flags&(1<<2) != 0 {
		x.String(e.about)
	}
	if e.flags&(1<<1) != 0 {
		x.Long(e.approved_by)
	}
	return x.buf
}

func (e TL_messages_exportedChatInvites) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_exportedChatInvites)
	x.Int(e.count)
	x.Vector(e.invites)
	x.Vector(e.users)
	return x.buf
}

func (e TL_messages_exportedChatInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_exportedChatInvite)
	x.Bytes(e.invite.encode())
	x.Vector(e.users)
	return x.buf
}

func (e TL_messages_exportedChatInviteReplaced) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_exportedChatInviteReplaced)
	x.Bytes(e.invite.encode())
	x.Bytes(e.new_invite.encode())
	x.Vector(e.users)
	return x.buf
}

func (e TL_messages_chatInviteImporters) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_chatInviteImporters)
	x.Int(e.count)
	x.Vector(e.importers)
	x.Vector(e.users)
	return x.buf
}

func (e TL_chatAdminWithInvites) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chatAdminWithInvites)
	x.Long(e.admin_id)
	x.Int(e.invites_count)
	x.Int(e.revoked_invites_count)
	return x.buf
}

func (e TL_messages_chatAdminsWithInvites) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_chatAdminsWithInvites)
	x.Vector(e.admins)
	x.Vector(e.users)
	return x.buf
}

func (e TL_channelAdminLogEventActionParticipantJoinByInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionParticipantJoinByInvite)
	x.Int(e.flags)
	x.Bytes(e.invite.encode())
	return x.buf
}

func (e TL_channelAdminLogEventActionExportedInviteDelete) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionExportedInviteDelete)
	x.Bytes(e.invite.encode())
	return x.buf
}

func (e TL_channelAdminLogEventActionExportedInviteRevoke) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionExportedInviteRevoke)
	x.Bytes(e.invite.encode())
	return x.buf
}

func (e TL_channelAdminLogEventActionExportedInviteEdit) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionExportedInviteEdit)
	x.Bytes(e.prev_invite.encode())
	x.Bytes(e.new_invite.encode())
	return x.buf
}

func (e TL_channelAdminLogEventActionParticipantVolume) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionParticipantVolume)
	x.Bytes(e.participant.encode())
	return x.buf
}

func (e TL_channelAdminLogEventActionChangeHistoryTTL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionChangeHistoryTTL)
	x.Int(e.prev_value)
	x.Int(e.new_value)
	return x.buf
}

func (e TL_messages_checkedHistoryImportPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_checkedHistoryImportPeer)
	x.String(e.confirm_text)
	return x.buf
}

func (e TL_inputGroupCallStream) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputGroupCallStream)
	x.Int(e.flags)
	x.Bytes(e.call.encode())
	x.Long(e.time_ms)
	x.Int(e.scale)
	if e.flags&(1<<0) != 0 {
		x.Int(e.video_channel)
	}
	if e.flags&(1<<0) != 0 {
		x.Int(e.video_quality)
	}
	return x.buf
}

func (e TL_phone_joinAsPeers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phone_joinAsPeers)
	x.Vector(e.peers)
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_phone_exportedGroupCallInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phone_exportedGroupCallInvite)
	x.String(e.link)
	return x.buf
}

func (e TL_inputBotInlineMessageMediaInvoice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputBotInlineMessageMediaInvoice)
	x.Int(e.flags)
	x.String(e.title)
	x.String(e.description)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.photo.encode())
	}
	x.Bytes(e.invoice.encode())
	x.StringBytes(e.payload)
	x.String(e.provider)
	x.Bytes(e.provider_data.encode())
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.reply_markup.encode())
	}
	return x.buf
}

func (e TL_botInlineMessageMediaInvoice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_botInlineMessageMediaInvoice)
	x.Int(e.flags)
	x.String(e.title)
	x.String(e.description)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.photo.encode())
	}
	x.String(e.currency)
	x.Long(e.total_amount)
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.reply_markup.encode())
	}
	return x.buf
}

func (e TL_messageActionGroupCallScheduled) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionGroupCallScheduled)
	x.Bytes(e.call.encode())
	x.Int(e.schedule_date)
	return x.buf
}

func (e TL_groupCallParticipantVideoSourceGroup) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_groupCallParticipantVideoSourceGroup)
	x.String(e.semantics)
	x.VectorInt(e.sources)
	return x.buf
}

func (e TL_groupCallParticipantVideo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_groupCallParticipantVideo)
	x.Int(e.flags)
	x.String(e.endpoint)
	x.Vector(e.source_groups)
	if e.flags&(1<<1) != 0 {
		x.Int(e.audio_source)
	}
	return x.buf
}

func (e TL_updateGroupCallConnection) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateGroupCallConnection)
	x.Int(e.flags)
	x.Bytes(e.params.encode())
	return x.buf
}

func (e TL_stickers_suggestedShortName) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stickers_suggestedShortName)
	x.String(e.short_name)
	return x.buf
}

func (e TL_botCommandScopeDefault) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_botCommandScopeDefault)
	return x.buf
}

func (e TL_botCommandScopeUsers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_botCommandScopeUsers)
	return x.buf
}

func (e TL_botCommandScopeChats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_botCommandScopeChats)
	return x.buf
}

func (e TL_botCommandScopeChatAdmins) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_botCommandScopeChatAdmins)
	return x.buf
}

func (e TL_botCommandScopePeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_botCommandScopePeer)
	x.Bytes(e.peer.encode())
	return x.buf
}

func (e TL_botCommandScopePeerAdmins) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_botCommandScopePeerAdmins)
	x.Bytes(e.peer.encode())
	return x.buf
}

func (e TL_botCommandScopePeerUser) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_botCommandScopePeerUser)
	x.Bytes(e.peer.encode())
	x.Bytes(e.user_id.encode())
	return x.buf
}

func (e TL_account_resetPasswordFailedWait) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_resetPasswordFailedWait)
	x.Int(e.retry_date)
	return x.buf
}

func (e TL_account_resetPasswordRequestedWait) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_resetPasswordRequestedWait)
	x.Int(e.until_date)
	return x.buf
}

func (e TL_account_resetPasswordOk) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_resetPasswordOk)
	return x.buf
}

func (e TL_updateBotCommands) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateBotCommands)
	x.Bytes(e.peer.encode())
	x.Long(e.bot_id)
	x.Vector(e.commands)
	return x.buf
}

func (e TL_messageActionSetChatTheme) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionSetChatTheme)
	x.String(e.emoticon)
	return x.buf
}

func (e TL_sendMessageChooseStickerAction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_sendMessageChooseStickerAction)
	return x.buf
}

func (e TL_sponsoredMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_sponsoredMessage)
	x.Int(e.flags)
	x.StringBytes(e.random_id)
	if e.flags&(1<<3) != 0 {
		x.Bytes(e.from_id.encode())
	}
	if e.flags&(1<<4) != 0 {
		x.Bytes(e.chat_invite.encode())
	}
	if e.flags&(1<<4) != 0 {
		x.String(e.chat_invite_hash)
	}
	if e.flags&(1<<2) != 0 {
		x.Int(e.channel_post)
	}
	if e.flags&(1<<0) != 0 {
		x.String(e.start_param)
	}
	if e.flags&(1<<9) != 0 {
		x.Bytes(e.webpage.encode())
	}
	if e.flags&(1<<10) != 0 {
		x.Bytes(e.app.encode())
	}
	x.String(e.message)
	if e.flags&(1<<1) != 0 {
		x.Vector(e.entities)
	}
	if e.flags&(1<<11) != 0 {
		x.String(e.button_text)
	}
	if e.flags&(1<<7) != 0 {
		x.String(e.sponsor_info)
	}
	if e.flags&(1<<8) != 0 {
		x.String(e.additional_info)
	}
	return x.buf
}

func (e TL_messages_sponsoredMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_sponsoredMessages)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.Int(e.posts_between)
	}
	x.Vector(e.messages)
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_inputStickerSetAnimatedEmojiAnimations) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputStickerSetAnimatedEmojiAnimations)
	return x.buf
}

func (e TL_sendMessageEmojiInteraction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_sendMessageEmojiInteraction)
	x.String(e.emoticon)
	x.Int(e.msg_id)
	x.Bytes(e.interaction.encode())
	return x.buf
}

func (e TL_sendMessageEmojiInteractionSeen) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_sendMessageEmojiInteractionSeen)
	x.String(e.emoticon)
	return x.buf
}

func (e TL_inputBotInlineMessageID64) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputBotInlineMessageID64)
	x.Int(e.dc_id)
	x.Long(e.owner_id)
	x.Int(e.id)
	x.Long(e.access_hash)
	return x.buf
}

func (e TL_searchResultsCalendarPeriod) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_searchResultsCalendarPeriod)
	x.Int(e.date)
	x.Int(e.min_msg_id)
	x.Int(e.max_msg_id)
	x.Int(e.count)
	return x.buf
}

func (e TL_messages_searchResultsCalendar) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_searchResultsCalendar)
	x.Int(e.flags)
	x.Int(e.count)
	x.Int(e.min_date)
	x.Int(e.min_msg_id)
	if e.flags&(1<<1) != 0 {
		x.Int(e.offset_id_offset)
	}
	x.Vector(e.periods)
	x.Vector(e.messages)
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_searchResultPosition) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_searchResultPosition)
	x.Int(e.msg_id)
	x.Int(e.date)
	x.Int(e.offset)
	return x.buf
}

func (e TL_messages_searchResultsPositions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_searchResultsPositions)
	x.Int(e.count)
	x.Vector(e.positions)
	return x.buf
}

func (e TL_messageActionChatJoinedByRequest) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionChatJoinedByRequest)
	return x.buf
}

func (e TL_updatePendingJoinRequests) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updatePendingJoinRequests)
	x.Bytes(e.peer.encode())
	x.Int(e.requests_pending)
	x.VectorLong(e.recent_requesters)
	return x.buf
}

func (e TL_updateBotChatInviteRequester) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateBotChatInviteRequester)
	x.Bytes(e.peer.encode())
	x.Int(e.date)
	x.Long(e.user_id)
	x.String(e.about)
	x.Bytes(e.invite.encode())
	x.Int(e.qts)
	return x.buf
}

func (e TL_channelAdminLogEventActionParticipantJoinByRequest) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionParticipantJoinByRequest)
	x.Bytes(e.invite.encode())
	x.Long(e.approved_by)
	return x.buf
}

func (e TL_inputKeyboardButtonUserProfile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputKeyboardButtonUserProfile)
	x.String(e.text)
	x.Bytes(e.user_id.encode())
	return x.buf
}

func (e TL_keyboardButtonUserProfile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_keyboardButtonUserProfile)
	x.String(e.text)
	x.Long(e.user_id)
	return x.buf
}

func (e TL_channels_sendAsPeers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_sendAsPeers)
	x.Vector(e.peers)
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_channelAdminLogEventActionToggleNoForwards) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionToggleNoForwards)
	x.Bytes(e.new_value.encode())
	return x.buf
}

func (e TL_messages_stickerSetNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_stickerSetNotModified)
	return x.buf
}

func (e TL_users_userFull) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_users_userFull)
	x.Bytes(e.full_user.encode())
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_messages_peerSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_peerSettings)
	x.Bytes(e.settings.encode())
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_channelAdminLogEventActionSendMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionSendMessage)
	x.Bytes(e.message.encode())
	return x.buf
}

func (e TL_auth_codeTypeMissedCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_codeTypeMissedCall)
	return x.buf
}

func (e TL_auth_sentCodeTypeMissedCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_sentCodeTypeMissedCall)
	x.String(e.prefix)
	x.Int(e.length)
	return x.buf
}

func (e TL_auth_loggedOut) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_loggedOut)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.StringBytes(e.future_auth_token)
	}
	return x.buf
}

func (e TL_updateMessageReactions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateMessageReactions)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	x.Int(e.msg_id)
	if e.flags&(1<<0) != 0 {
		x.Int(e.top_msg_id)
	}
	x.Bytes(e.reactions.encode())
	return x.buf
}

func (e TL_reactionCount) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_reactionCount)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.Int(e.chosen_order)
	}
	x.Bytes(e.reaction.encode())
	x.Int(e.count)
	return x.buf
}

func (e TL_messageReactions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageReactions)
	x.Int(e.flags)
	x.Vector(e.results)
	if e.flags&(1<<1) != 0 {
		x.Vector(e.recent_reactions)
	}
	return x.buf
}

func (e TL_messages_messageReactionsList) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_messageReactionsList)
	x.Int(e.flags)
	x.Int(e.count)
	x.Vector(e.reactions)
	x.Vector(e.chats)
	x.Vector(e.users)
	if e.flags&(1<<0) != 0 {
		x.String(e.next_offset)
	}
	return x.buf
}

func (e TL_availableReaction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_availableReaction)
	x.Int(e.flags)
	x.String(e.reaction)
	x.String(e.title)
	x.Bytes(e.static_icon.encode())
	x.Bytes(e.appear_animation.encode())
	x.Bytes(e.select_animation.encode())
	x.Bytes(e.activate_animation.encode())
	x.Bytes(e.effect_animation.encode())
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.around_animation.encode())
	}
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.center_icon.encode())
	}
	return x.buf
}

func (e TL_messages_availableReactionsNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_availableReactionsNotModified)
	return x.buf
}

func (e TL_messages_availableReactions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_availableReactions)
	x.Int(e.hash)
	x.Vector(e.reactions)
	return x.buf
}

func (e TL_messageEntitySpoiler) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageEntitySpoiler)
	x.Int(e.offset)
	x.Int(e.length)
	return x.buf
}

func (e TL_channelAdminLogEventActionChangeAvailableReactions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionChangeAvailableReactions)
	x.Bytes(e.prev_value.encode())
	x.Bytes(e.new_value.encode())
	return x.buf
}

func (e TL_messagePeerReaction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messagePeerReaction)
	x.Int(e.flags)
	x.Bytes(e.peer_id.encode())
	x.Int(e.date)
	x.Bytes(e.reaction.encode())
	return x.buf
}

func (e TL_groupCallStreamChannel) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_groupCallStreamChannel)
	x.Int(e.channel)
	x.Int(e.scale)
	x.Long(e.last_timestamp_ms)
	return x.buf
}

func (e TL_phone_groupCallStreamChannels) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phone_groupCallStreamChannels)
	x.Vector(e.channels)
	return x.buf
}

func (e TL_inputReportReasonIllegalDrugs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputReportReasonIllegalDrugs)
	return x.buf
}

func (e TL_inputReportReasonPersonalDetails) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputReportReasonPersonalDetails)
	return x.buf
}

func (e TL_phone_groupCallStreamRtmpUrl) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phone_groupCallStreamRtmpUrl)
	x.String(e.url)
	x.String(e.key)
	return x.buf
}

func (e TL_attachMenuBotIconColor) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_attachMenuBotIconColor)
	x.String(e.name)
	x.Int(e.color)
	return x.buf
}

func (e TL_attachMenuBotIcon) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_attachMenuBotIcon)
	x.Int(e.flags)
	x.String(e.name)
	x.Bytes(e.icon.encode())
	if e.flags&(1<<0) != 0 {
		x.Vector(e.colors)
	}
	return x.buf
}

func (e TL_attachMenuBot) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_attachMenuBot)
	x.Int(e.flags)
	x.Long(e.bot_id)
	x.String(e.short_name)
	if e.flags&(1<<3) != 0 {
		x.Vector(e.peer_types)
	}
	x.Vector(e.icons)
	return x.buf
}

func (e TL_attachMenuBotsNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_attachMenuBotsNotModified)
	return x.buf
}

func (e TL_attachMenuBots) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_attachMenuBots)
	x.Long(e.hash)
	x.Vector(e.bots)
	x.Vector(e.users)
	return x.buf
}

func (e TL_attachMenuBotsBot) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_attachMenuBotsBot)
	x.Bytes(e.bot.encode())
	x.Vector(e.users)
	return x.buf
}

func (e TL_updateAttachMenuBots) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateAttachMenuBots)
	return x.buf
}

func (e TL_webViewResultUrl) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_webViewResultUrl)
	x.Long(e.query_id)
	x.String(e.url)
	return x.buf
}

func (e TL_simpleWebViewResultUrl) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_simpleWebViewResultUrl)
	x.String(e.url)
	return x.buf
}

func (e TL_webViewMessageSent) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_webViewMessageSent)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.msg_id.encode())
	}
	return x.buf
}

func (e TL_updateWebViewResultSent) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateWebViewResultSent)
	x.Long(e.query_id)
	return x.buf
}

func (e TL_keyboardButtonWebView) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_keyboardButtonWebView)
	x.String(e.text)
	x.String(e.url)
	return x.buf
}

func (e TL_keyboardButtonSimpleWebView) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_keyboardButtonSimpleWebView)
	x.String(e.text)
	x.String(e.url)
	return x.buf
}

func (e TL_messageActionWebViewDataSentMe) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionWebViewDataSentMe)
	x.String(e.text)
	x.String(e.data)
	return x.buf
}

func (e TL_messageActionWebViewDataSent) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionWebViewDataSent)
	x.String(e.text)
	return x.buf
}

func (e TL_updateBotMenuButton) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateBotMenuButton)
	x.Long(e.bot_id)
	x.Bytes(e.button.encode())
	return x.buf
}

func (e TL_botMenuButtonDefault) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_botMenuButtonDefault)
	return x.buf
}

func (e TL_botMenuButtonCommands) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_botMenuButtonCommands)
	return x.buf
}

func (e TL_botMenuButton) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_botMenuButton)
	x.String(e.text)
	x.String(e.url)
	return x.buf
}

func (e TL_account_savedRingtonesNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_savedRingtonesNotModified)
	return x.buf
}

func (e TL_account_savedRingtones) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_savedRingtones)
	x.Long(e.hash)
	x.Vector(e.ringtones)
	return x.buf
}

func (e TL_updateSavedRingtones) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateSavedRingtones)
	return x.buf
}

func (e TL_notificationSoundDefault) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_notificationSoundDefault)
	return x.buf
}

func (e TL_notificationSoundNone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_notificationSoundNone)
	return x.buf
}

func (e TL_notificationSoundLocal) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_notificationSoundLocal)
	x.String(e.title)
	x.String(e.data)
	return x.buf
}

func (e TL_notificationSoundRingtone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_notificationSoundRingtone)
	x.Long(e.id)
	return x.buf
}

func (e TL_account_savedRingtone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_savedRingtone)
	return x.buf
}

func (e TL_account_savedRingtoneConverted) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_savedRingtoneConverted)
	x.Bytes(e.document.encode())
	return x.buf
}

func (e TL_attachMenuPeerTypeSameBotPM) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_attachMenuPeerTypeSameBotPM)
	return x.buf
}

func (e TL_attachMenuPeerTypeBotPM) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_attachMenuPeerTypeBotPM)
	return x.buf
}

func (e TL_attachMenuPeerTypePM) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_attachMenuPeerTypePM)
	return x.buf
}

func (e TL_attachMenuPeerTypeChat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_attachMenuPeerTypeChat)
	return x.buf
}

func (e TL_attachMenuPeerTypeBroadcast) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_attachMenuPeerTypeBroadcast)
	return x.buf
}

func (e TL_chatInvitePublicJoinRequests) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chatInvitePublicJoinRequests)
	return x.buf
}

func (e TL_inputInvoiceMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputInvoiceMessage)
	x.Bytes(e.peer.encode())
	x.Int(e.msg_id)
	return x.buf
}

func (e TL_inputInvoiceSlug) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputInvoiceSlug)
	x.String(e.slug)
	return x.buf
}

func (e TL_payments_exportedInvoice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_payments_exportedInvoice)
	x.String(e.url)
	return x.buf
}

func (e TL_updateTranscribedAudio) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateTranscribedAudio)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	x.Int(e.msg_id)
	x.Long(e.transcription_id)
	x.String(e.text)
	return x.buf
}

func (e TL_messages_transcribedAudio) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_transcribedAudio)
	x.Int(e.flags)
	x.Long(e.transcription_id)
	x.String(e.text)
	if e.flags&(1<<1) != 0 {
		x.Int(e.trial_remains_num)
	}
	if e.flags&(1<<1) != 0 {
		x.Int(e.trial_remains_until_date)
	}
	return x.buf
}

func (e TL_dialogFilterDefault) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_dialogFilterDefault)
	return x.buf
}

func (e TL_help_premiumPromo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_premiumPromo)
	x.String(e.status_text)
	x.Vector(e.status_entities)
	x.VectorString(e.video_sections)
	x.Vector(e.videos)
	x.Vector(e.period_options)
	x.Vector(e.users)
	return x.buf
}

func (e TL_messageEntityCustomEmoji) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageEntityCustomEmoji)
	x.Int(e.offset)
	x.Int(e.length)
	x.Long(e.document_id)
	return x.buf
}

func (e TL_documentAttributeCustomEmoji) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_documentAttributeCustomEmoji)
	x.Int(e.flags)
	x.String(e.alt)
	x.Bytes(e.stickerset.encode())
	return x.buf
}

func (e TL_stickerSetFullCovered) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stickerSetFullCovered)
	x.Bytes(e.set.encode())
	x.Vector(e.packs)
	x.Vector(e.keywords)
	x.Vector(e.documents)
	return x.buf
}

func (e TL_inputStorePaymentPremiumSubscription) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputStorePaymentPremiumSubscription)
	x.Int(e.flags)
	return x.buf
}

func (e TL_inputStorePaymentGiftPremium) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputStorePaymentGiftPremium)
	x.Bytes(e.user_id.encode())
	x.String(e.currency)
	x.Long(e.amount)
	return x.buf
}

func (e TL_messageActionGiftPremium) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionGiftPremium)
	x.Int(e.flags)
	x.String(e.currency)
	x.Long(e.amount)
	x.Int(e.months)
	if e.flags&(1<<0) != 0 {
		x.String(e.crypto_currency)
	}
	if e.flags&(1<<0) != 0 {
		x.Long(e.crypto_amount)
	}
	return x.buf
}

func (e TL_premiumGiftOption) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_premiumGiftOption)
	x.Int(e.flags)
	x.Int(e.months)
	x.String(e.currency)
	x.Long(e.amount)
	x.String(e.bot_url)
	if e.flags&(1<<0) != 0 {
		x.String(e.store_product)
	}
	return x.buf
}

func (e TL_inputStickerSetPremiumGifts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputStickerSetPremiumGifts)
	return x.buf
}

func (e TL_updateReadFeaturedEmojiStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateReadFeaturedEmojiStickers)
	return x.buf
}

func (e TL_inputPrivacyKeyVoiceMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputPrivacyKeyVoiceMessages)
	return x.buf
}

func (e TL_privacyKeyVoiceMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_privacyKeyVoiceMessages)
	return x.buf
}

func (e TL_paymentFormMethod) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_paymentFormMethod)
	x.String(e.url)
	x.String(e.title)
	return x.buf
}

func (e TL_inputWebFileAudioAlbumThumbLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputWebFileAudioAlbumThumbLocation)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.document.encode())
	}
	if e.flags&(1<<1) != 0 {
		x.String(e.title)
	}
	if e.flags&(1<<1) != 0 {
		x.String(e.performer)
	}
	return x.buf
}

func (e TL_emojiStatusEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_emojiStatusEmpty)
	return x.buf
}

func (e TL_emojiStatus) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_emojiStatus)
	x.Long(e.document_id)
	return x.buf
}

func (e TL_emojiStatusUntil) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_emojiStatusUntil)
	x.Long(e.document_id)
	x.Int(e.until)
	return x.buf
}

func (e TL_updateUserEmojiStatus) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateUserEmojiStatus)
	x.Long(e.user_id)
	x.Bytes(e.emoji_status.encode())
	return x.buf
}

func (e TL_updateRecentEmojiStatuses) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateRecentEmojiStatuses)
	return x.buf
}

func (e TL_account_emojiStatusesNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_emojiStatusesNotModified)
	return x.buf
}

func (e TL_account_emojiStatuses) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_emojiStatuses)
	x.Long(e.hash)
	x.Vector(e.statuses)
	return x.buf
}

func (e TL_reactionEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_reactionEmpty)
	return x.buf
}

func (e TL_reactionEmoji) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_reactionEmoji)
	x.String(e.emoticon)
	return x.buf
}

func (e TL_reactionCustomEmoji) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_reactionCustomEmoji)
	x.Long(e.document_id)
	return x.buf
}

func (e TL_chatReactionsNone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chatReactionsNone)
	return x.buf
}

func (e TL_chatReactionsAll) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chatReactionsAll)
	x.Int(e.flags)
	return x.buf
}

func (e TL_chatReactionsSome) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chatReactionsSome)
	x.Vector(e.reactions)
	return x.buf
}

func (e TL_messages_reactionsNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_reactionsNotModified)
	return x.buf
}

func (e TL_messages_reactions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_reactions)
	x.Long(e.hash)
	x.Vector(e.reactions)
	return x.buf
}

func (e TL_updateRecentReactions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateRecentReactions)
	return x.buf
}

func (e TL_updateMoveStickerSetToTop) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateMoveStickerSetToTop)
	x.Int(e.flags)
	x.Long(e.stickerset)
	return x.buf
}

func (e TL_auth_sentCodeTypeEmailCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_sentCodeTypeEmailCode)
	x.Int(e.flags)
	x.String(e.email_pattern)
	x.Int(e.length)
	if e.flags&(1<<3) != 0 {
		x.Int(e.reset_available_period)
	}
	if e.flags&(1<<4) != 0 {
		x.Int(e.reset_pending_date)
	}
	return x.buf
}

func (e TL_auth_sentCodeTypeSetUpEmailRequired) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_sentCodeTypeSetUpEmailRequired)
	x.Int(e.flags)
	return x.buf
}

func (e TL_emailVerifyPurposeLoginSetup) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_emailVerifyPurposeLoginSetup)
	x.String(e.phone_number)
	x.String(e.phone_code_hash)
	return x.buf
}

func (e TL_emailVerifyPurposeLoginChange) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_emailVerifyPurposeLoginChange)
	return x.buf
}

func (e TL_emailVerifyPurposePassport) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_emailVerifyPurposePassport)
	return x.buf
}

func (e TL_emailVerificationCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_emailVerificationCode)
	x.String(e.code)
	return x.buf
}

func (e TL_emailVerificationGoogle) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_emailVerificationGoogle)
	x.String(e.token)
	return x.buf
}

func (e TL_emailVerificationApple) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_emailVerificationApple)
	x.String(e.token)
	return x.buf
}

func (e TL_account_emailVerified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_emailVerified)
	x.String(e.email)
	return x.buf
}

func (e TL_account_emailVerifiedLogin) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_emailVerifiedLogin)
	x.String(e.email)
	x.Bytes(e.sent_code.encode())
	return x.buf
}

func (e TL_premiumSubscriptionOption) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_premiumSubscriptionOption)
	x.Int(e.flags)
	if e.flags&(1<<3) != 0 {
		x.String(e.transaction)
	}
	x.Int(e.months)
	x.String(e.currency)
	x.Long(e.amount)
	x.String(e.bot_url)
	if e.flags&(1<<0) != 0 {
		x.String(e.store_product)
	}
	return x.buf
}

func (e TL_inputStickerSetEmojiGenericAnimations) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputStickerSetEmojiGenericAnimations)
	return x.buf
}

func (e TL_inputStickerSetEmojiDefaultStatuses) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputStickerSetEmojiDefaultStatuses)
	return x.buf
}

func (e TL_sendAsPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_sendAsPeer)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	return x.buf
}

func (e TL_messageExtendedMediaPreview) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageExtendedMediaPreview)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.Int(e.w)
	}
	if e.flags&(1<<0) != 0 {
		x.Int(e.h)
	}
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.thumb.encode())
	}
	if e.flags&(1<<2) != 0 {
		x.Int(e.video_duration)
	}
	return x.buf
}

func (e TL_messageExtendedMedia) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageExtendedMedia)
	x.Bytes(e.media.encode())
	return x.buf
}

func (e TL_updateMessageExtendedMedia) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateMessageExtendedMedia)
	x.Bytes(e.peer.encode())
	x.Int(e.msg_id)
	x.Bytes(e.extended_media.encode())
	return x.buf
}

func (e TL_stickerKeyword) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stickerKeyword)
	x.Long(e.document_id)
	x.VectorString(e.keyword)
	return x.buf
}

func (e TL_username) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_username)
	x.Int(e.flags)
	x.String(e.username)
	return x.buf
}

func (e TL_channelAdminLogEventActionChangeUsernames) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionChangeUsernames)
	x.VectorString(e.prev_value)
	x.VectorString(e.new_value)
	return x.buf
}

func (e TL_channelAdminLogEventActionToggleForum) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionToggleForum)
	x.Bytes(e.new_value.encode())
	return x.buf
}

func (e TL_channelAdminLogEventActionCreateTopic) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionCreateTopic)
	x.Bytes(e.topic.encode())
	return x.buf
}

func (e TL_channelAdminLogEventActionEditTopic) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionEditTopic)
	x.Bytes(e.prev_topic.encode())
	x.Bytes(e.new_topic.encode())
	return x.buf
}

func (e TL_channelAdminLogEventActionDeleteTopic) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionDeleteTopic)
	x.Bytes(e.topic.encode())
	return x.buf
}

func (e TL_channelAdminLogEventActionPinTopic) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionPinTopic)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.prev_topic.encode())
	}
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.new_topic.encode())
	}
	return x.buf
}

func (e TL_forumTopicDeleted) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_forumTopicDeleted)
	x.Int(e.id)
	return x.buf
}

func (e TL_forumTopic) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_forumTopic)
	x.Int(e.flags)
	x.Int(e.id)
	x.Int(e.date)
	x.String(e.title)
	x.Int(e.icon_color)
	if e.flags&(1<<0) != 0 {
		x.Long(e.icon_emoji_id)
	}
	x.Int(e.top_message)
	x.Int(e.read_inbox_max_id)
	x.Int(e.read_outbox_max_id)
	x.Int(e.unread_count)
	x.Int(e.unread_mentions_count)
	x.Int(e.unread_reactions_count)
	x.Bytes(e.from_id.encode())
	x.Bytes(e.notify_settings.encode())
	if e.flags&(1<<4) != 0 {
		x.Bytes(e.draft.encode())
	}
	return x.buf
}

func (e TL_messages_forumTopics) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_forumTopics)
	x.Int(e.flags)
	x.Int(e.count)
	x.Vector(e.topics)
	x.Vector(e.messages)
	x.Vector(e.chats)
	x.Vector(e.users)
	x.Int(e.pts)
	return x.buf
}

func (e TL_messageActionTopicCreate) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionTopicCreate)
	x.Int(e.flags)
	x.String(e.title)
	x.Int(e.icon_color)
	if e.flags&(1<<0) != 0 {
		x.Long(e.icon_emoji_id)
	}
	return x.buf
}

func (e TL_messageActionTopicEdit) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionTopicEdit)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.String(e.title)
	}
	if e.flags&(1<<1) != 0 {
		x.Long(e.icon_emoji_id)
	}
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.closed.encode())
	}
	if e.flags&(1<<3) != 0 {
		x.Bytes(e.hidden.encode())
	}
	return x.buf
}

func (e TL_updateChannelPinnedTopic) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateChannelPinnedTopic)
	x.Int(e.flags)
	x.Long(e.channel_id)
	x.Int(e.topic_id)
	return x.buf
}

func (e TL_inputNotifyForumTopic) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputNotifyForumTopic)
	x.Bytes(e.peer.encode())
	x.Int(e.top_msg_id)
	return x.buf
}

func (e TL_notifyForumTopic) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_notifyForumTopic)
	x.Bytes(e.peer.encode())
	x.Int(e.top_msg_id)
	return x.buf
}

func (e TL_inputStickerSetEmojiDefaultTopicIcons) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputStickerSetEmojiDefaultTopicIcons)
	return x.buf
}

func (e TL_messages_sponsoredMessagesEmpty) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_sponsoredMessagesEmpty)
	return x.buf
}

func (e TL_updateChannelPinnedTopics) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateChannelPinnedTopics)
	x.Int(e.flags)
	x.Long(e.channel_id)
	if e.flags&(1<<0) != 0 {
		x.VectorInt(e.order)
	}
	return x.buf
}

func (e TL_defaultHistoryTTL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_defaultHistoryTTL)
	x.Int(e.period)
	return x.buf
}

func (e TL_auth_codeTypeFragmentSms) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_codeTypeFragmentSms)
	return x.buf
}

func (e TL_auth_sentCodeTypeFragmentSms) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_sentCodeTypeFragmentSms)
	x.String(e.url)
	x.Int(e.length)
	return x.buf
}

func (e TL_exportedContactToken) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_exportedContactToken)
	x.String(e.url)
	x.Int(e.expires)
	return x.buf
}

func (e TL_channelAdminLogEventActionToggleAntiSpam) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionToggleAntiSpam)
	x.Bytes(e.new_value.encode())
	return x.buf
}

func (e TL_messageActionSuggestProfilePhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionSuggestProfilePhoto)
	x.Bytes(e.photo.encode())
	return x.buf
}

func (e TL_stickerSetNoCovered) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stickerSetNoCovered)
	x.Bytes(e.set.encode())
	return x.buf
}

func (e TL_updateUser) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateUser)
	x.Long(e.user_id)
	return x.buf
}

func (e TL_auth_sentCodeSuccess) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_sentCodeSuccess)
	x.Bytes(e.authorization.encode())
	return x.buf
}

func (e TL_messageActionRequestedPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionRequestedPeer)
	x.Int(e.button_id)
	x.Vector(e.peers)
	return x.buf
}

func (e TL_requestPeerTypeUser) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_requestPeerTypeUser)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.bot.encode())
	}
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.premium.encode())
	}
	return x.buf
}

func (e TL_requestPeerTypeChat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_requestPeerTypeChat)
	x.Int(e.flags)
	if e.flags&(1<<3) != 0 {
		x.Bytes(e.has_username.encode())
	}
	if e.flags&(1<<4) != 0 {
		x.Bytes(e.forum.encode())
	}
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.user_admin_rights.encode())
	}
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.bot_admin_rights.encode())
	}
	return x.buf
}

func (e TL_requestPeerTypeBroadcast) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_requestPeerTypeBroadcast)
	x.Int(e.flags)
	if e.flags&(1<<3) != 0 {
		x.Bytes(e.has_username.encode())
	}
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.user_admin_rights.encode())
	}
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.bot_admin_rights.encode())
	}
	return x.buf
}

func (e TL_keyboardButtonRequestPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_keyboardButtonRequestPeer)
	x.String(e.text)
	x.Int(e.button_id)
	x.Bytes(e.peer_type.encode())
	x.Int(e.max_quantity)
	return x.buf
}

func (e TL_emojiListNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_emojiListNotModified)
	return x.buf
}

func (e TL_emojiList) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_emojiList)
	x.Long(e.hash)
	x.VectorLong(e.document_id)
	return x.buf
}

func (e TL_auth_sentCodeTypeFirebaseSms) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_sentCodeTypeFirebaseSms)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.StringBytes(e.nonce)
	}
	if e.flags&(1<<1) != 0 {
		x.String(e.receipt)
	}
	if e.flags&(1<<1) != 0 {
		x.Int(e.push_timeout)
	}
	x.Int(e.length)
	return x.buf
}

func (e TL_emojiGroup) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_emojiGroup)
	x.String(e.title)
	x.Long(e.icon_emoji_id)
	x.VectorString(e.emoticons)
	return x.buf
}

func (e TL_messages_emojiGroupsNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_emojiGroupsNotModified)
	return x.buf
}

func (e TL_messages_emojiGroups) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_emojiGroups)
	x.Int(e.hash)
	x.Vector(e.groups)
	return x.buf
}

func (e TL_videoSizeEmojiMarkup) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_videoSizeEmojiMarkup)
	x.Long(e.emoji_id)
	x.VectorInt(e.background_colors)
	return x.buf
}

func (e TL_videoSizeStickerMarkup) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_videoSizeStickerMarkup)
	x.Bytes(e.stickerset.encode())
	x.Long(e.sticker_id)
	x.VectorInt(e.background_colors)
	return x.buf
}

func (e TL_textWithEntities) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_textWithEntities)
	x.String(e.text)
	x.Vector(e.entities)
	return x.buf
}

func (e TL_messages_translateResult) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_translateResult)
	x.Vector(e.result)
	return x.buf
}

func (e TL_autoSaveSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_autoSaveSettings)
	x.Int(e.flags)
	if e.flags&(1<<2) != 0 {
		x.Long(e.video_max_size)
	}
	return x.buf
}

func (e TL_autoSaveException) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_autoSaveException)
	x.Bytes(e.peer.encode())
	x.Bytes(e.settings.encode())
	return x.buf
}

func (e TL_account_autoSaveSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_autoSaveSettings)
	x.Bytes(e.users_settings.encode())
	x.Bytes(e.chats_settings.encode())
	x.Bytes(e.broadcasts_settings.encode())
	x.Vector(e.exceptions)
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_updateAutoSaveSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateAutoSaveSettings)
	return x.buf
}

func (e TL_help_appConfigNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_appConfigNotModified)
	return x.buf
}

func (e TL_help_appConfig) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_appConfig)
	x.Int(e.hash)
	x.Bytes(e.config.encode())
	return x.buf
}

func (e TL_inputBotAppID) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputBotAppID)
	x.Long(e.id)
	x.Long(e.access_hash)
	return x.buf
}

func (e TL_inputBotAppShortName) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputBotAppShortName)
	x.Bytes(e.bot_id.encode())
	x.String(e.short_name)
	return x.buf
}

func (e TL_botAppNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_botAppNotModified)
	return x.buf
}

func (e TL_botApp) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_botApp)
	x.Int(e.flags)
	x.Long(e.id)
	x.Long(e.access_hash)
	x.String(e.short_name)
	x.String(e.title)
	x.String(e.description)
	x.Bytes(e.photo.encode())
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.document.encode())
	}
	x.Long(e.hash)
	return x.buf
}

func (e TL_messages_botApp) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_botApp)
	x.Int(e.flags)
	x.Bytes(e.app.encode())
	return x.buf
}

func (e TL_appWebViewResultUrl) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_appWebViewResultUrl)
	x.String(e.url)
	return x.buf
}

func (e TL_inlineBotWebView) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inlineBotWebView)
	x.String(e.text)
	x.String(e.url)
	return x.buf
}

func (e TL_readParticipantDate) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_readParticipantDate)
	x.Long(e.user_id)
	x.Int(e.date)
	return x.buf
}

func (e TL_updateGroupInvitePrivacyForbidden) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateGroupInvitePrivacyForbidden)
	x.Long(e.user_id)
	return x.buf
}

func (e TL_dialogFilterChatlist) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_dialogFilterChatlist)
	x.Int(e.flags)
	x.Int(e.id)
	x.String(e.title)
	if e.flags&(1<<25) != 0 {
		x.String(e.emoticon)
	}
	x.Vector(e.pinned_peers)
	x.Vector(e.include_peers)
	return x.buf
}

func (e TL_inputChatlistDialogFilter) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputChatlistDialogFilter)
	x.Int(e.filter_id)
	return x.buf
}

func (e TL_exportedChatlistInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_exportedChatlistInvite)
	x.Int(e.flags)
	x.String(e.title)
	x.String(e.url)
	x.Vector(e.peers)
	return x.buf
}

func (e TL_chatlists_exportedChatlistInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chatlists_exportedChatlistInvite)
	x.Bytes(e.filter.encode())
	x.Bytes(e.invite.encode())
	return x.buf
}

func (e TL_chatlists_exportedInvites) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chatlists_exportedInvites)
	x.Vector(e.invites)
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_chatlists_chatlistInviteAlready) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chatlists_chatlistInviteAlready)
	x.Int(e.filter_id)
	x.Vector(e.missing_peers)
	x.Vector(e.already_peers)
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_chatlists_chatlistInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chatlists_chatlistInvite)
	x.Int(e.flags)
	x.String(e.title)
	if e.flags&(1<<0) != 0 {
		x.String(e.emoticon)
	}
	x.Vector(e.peers)
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_chatlists_chatlistUpdates) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chatlists_chatlistUpdates)
	x.Vector(e.missing_peers)
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_messageActionSetChatWallPaper) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionSetChatWallPaper)
	x.Int(e.flags)
	x.Bytes(e.wallpaper.encode())
	return x.buf
}

func (e TL_bots_botInfo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_bots_botInfo)
	x.String(e.name)
	x.String(e.about)
	x.String(e.description)
	return x.buf
}

func (e TL_inlineQueryPeerTypeBotPM) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inlineQueryPeerTypeBotPM)
	return x.buf
}

func (e TL_messagePeerVote) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messagePeerVote)
	x.Bytes(e.peer.encode())
	x.StringBytes(e.option)
	x.Int(e.date)
	return x.buf
}

func (e TL_messagePeerVoteInputOption) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messagePeerVoteInputOption)
	x.Bytes(e.peer.encode())
	x.Int(e.date)
	return x.buf
}

func (e TL_messagePeerVoteMultiple) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messagePeerVoteMultiple)
	x.Bytes(e.peer.encode())
	x.Vector(e.options)
	x.Int(e.date)
	return x.buf
}

func (e TL_inputPrivacyKeyAbout) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputPrivacyKeyAbout)
	return x.buf
}

func (e TL_privacyKeyAbout) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_privacyKeyAbout)
	return x.buf
}

func (e TL_sponsoredWebPage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_sponsoredWebPage)
	x.Int(e.flags)
	x.String(e.url)
	x.String(e.site_name)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.photo.encode())
	}
	return x.buf
}

func (e TL_storyViews) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_storyViews)
	x.Int(e.flags)
	x.Int(e.views_count)
	if e.flags&(1<<2) != 0 {
		x.Int(e.forwards_count)
	}
	if e.flags&(1<<3) != 0 {
		x.Vector(e.reactions)
	}
	if e.flags&(1<<4) != 0 {
		x.Int(e.reactions_count)
	}
	if e.flags&(1<<0) != 0 {
		x.VectorLong(e.recent_viewers)
	}
	return x.buf
}

func (e TL_storyItemDeleted) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_storyItemDeleted)
	x.Int(e.id)
	return x.buf
}

func (e TL_storyItemSkipped) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_storyItemSkipped)
	x.Int(e.flags)
	x.Int(e.id)
	x.Int(e.date)
	x.Int(e.expire_date)
	return x.buf
}

func (e TL_storyItem) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_storyItem)
	x.Int(e.flags)
	x.Int(e.id)
	x.Int(e.date)
	if e.flags&(1<<17) != 0 {
		x.Bytes(e.fwd_from.encode())
	}
	x.Int(e.expire_date)
	if e.flags&(1<<0) != 0 {
		x.String(e.caption)
	}
	if e.flags&(1<<1) != 0 {
		x.Vector(e.entities)
	}
	x.Bytes(e.media.encode())
	if e.flags&(1<<14) != 0 {
		x.Vector(e.media_areas)
	}
	if e.flags&(1<<2) != 0 {
		x.Vector(e.privacy)
	}
	if e.flags&(1<<3) != 0 {
		x.Bytes(e.views.encode())
	}
	if e.flags&(1<<15) != 0 {
		x.Bytes(e.sent_reaction.encode())
	}
	return x.buf
}

func (e TL_updateStory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateStory)
	x.Bytes(e.peer.encode())
	x.Bytes(e.story.encode())
	return x.buf
}

func (e TL_updateReadStories) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateReadStories)
	x.Bytes(e.peer.encode())
	x.Int(e.max_id)
	return x.buf
}

func (e TL_stories_allStoriesNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stories_allStoriesNotModified)
	x.Int(e.flags)
	x.String(e.state)
	x.Bytes(e.stealth_mode.encode())
	return x.buf
}

func (e TL_stories_allStories) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stories_allStories)
	x.Int(e.flags)
	x.Int(e.count)
	x.String(e.state)
	x.Vector(e.peer_stories)
	x.Vector(e.chats)
	x.Vector(e.users)
	x.Bytes(e.stealth_mode.encode())
	return x.buf
}

func (e TL_stories_stories) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stories_stories)
	x.Int(e.count)
	x.Vector(e.stories)
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_inputPrivacyValueAllowCloseFriends) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputPrivacyValueAllowCloseFriends)
	return x.buf
}

func (e TL_privacyValueAllowCloseFriends) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_privacyValueAllowCloseFriends)
	return x.buf
}

func (e TL_storyView) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_storyView)
	x.Int(e.flags)
	x.Long(e.user_id)
	x.Int(e.date)
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.reaction.encode())
	}
	return x.buf
}

func (e TL_stories_storyViewsList) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stories_storyViewsList)
	x.Int(e.flags)
	x.Int(e.count)
	x.Int(e.views_count)
	x.Int(e.forwards_count)
	x.Int(e.reactions_count)
	x.Vector(e.views)
	x.Vector(e.chats)
	x.Vector(e.users)
	if e.flags&(1<<0) != 0 {
		x.String(e.next_offset)
	}
	return x.buf
}

func (e TL_stories_storyViews) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stories_storyViews)
	x.Vector(e.views)
	x.Vector(e.users)
	return x.buf
}

func (e TL_inputReplyToMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputReplyToMessage)
	x.Int(e.flags)
	x.Int(e.reply_to_msg_id)
	if e.flags&(1<<0) != 0 {
		x.Int(e.top_msg_id)
	}
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.reply_to_peer_id.encode())
	}
	if e.flags&(1<<2) != 0 {
		x.String(e.quote_text)
	}
	if e.flags&(1<<3) != 0 {
		x.Vector(e.quote_entities)
	}
	if e.flags&(1<<4) != 0 {
		x.Int(e.quote_offset)
	}
	return x.buf
}

func (e TL_inputReplyToStory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputReplyToStory)
	x.Bytes(e.user_id.encode())
	x.Int(e.story_id)
	return x.buf
}

func (e TL_messageReplyStoryHeader) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageReplyStoryHeader)
	x.Long(e.user_id)
	x.Int(e.story_id)
	return x.buf
}

func (e TL_updateStoryID) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateStoryID)
	x.Int(e.id)
	x.Long(e.random_id)
	return x.buf
}

func (e TL_exportedStoryLink) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_exportedStoryLink)
	x.String(e.link)
	return x.buf
}

func (e TL_inputMediaStory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMediaStory)
	x.Bytes(e.peer.encode())
	x.Int(e.id)
	return x.buf
}

func (e TL_messageMediaStory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageMediaStory)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	x.Int(e.id)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.story.encode())
	}
	return x.buf
}

func (e TL_webPageAttributeStory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_webPageAttributeStory)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	x.Int(e.id)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.story.encode())
	}
	return x.buf
}

func (e TL_storiesStealthMode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_storiesStealthMode)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.Int(e.active_until_date)
	}
	if e.flags&(1<<1) != 0 {
		x.Int(e.cooldown_until_date)
	}
	return x.buf
}

func (e TL_updateStoriesStealthMode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateStoriesStealthMode)
	x.Bytes(e.stealth_mode.encode())
	return x.buf
}

func (e TL_mediaAreaCoordinates) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_mediaAreaCoordinates)
	x.Double(e.x)
	x.Double(e.y)
	x.Double(e.w)
	x.Double(e.h)
	x.Double(e.rotation)
	return x.buf
}

func (e TL_mediaAreaVenue) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_mediaAreaVenue)
	x.Bytes(e.coordinates.encode())
	x.Bytes(e.geo.encode())
	x.String(e.title)
	x.String(e.address)
	x.String(e.provider)
	x.String(e.venue_id)
	x.String(e.venue_type)
	return x.buf
}

func (e TL_inputMediaAreaVenue) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMediaAreaVenue)
	x.Bytes(e.coordinates.encode())
	x.Long(e.query_id)
	x.String(e.result_id)
	return x.buf
}

func (e TL_mediaAreaGeoPoint) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_mediaAreaGeoPoint)
	x.Bytes(e.coordinates.encode())
	x.Bytes(e.geo.encode())
	return x.buf
}

func (e TL_updateSentStoryReaction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateSentStoryReaction)
	x.Bytes(e.peer.encode())
	x.Int(e.story_id)
	x.Bytes(e.reaction.encode())
	return x.buf
}

func (e TL_mediaAreaSuggestedReaction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_mediaAreaSuggestedReaction)
	x.Int(e.flags)
	x.Bytes(e.coordinates.encode())
	x.Bytes(e.reaction.encode())
	return x.buf
}

func (e TL_peerStories) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_peerStories)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	if e.flags&(1<<0) != 0 {
		x.Int(e.max_read_id)
	}
	x.Vector(e.stories)
	return x.buf
}

func (e TL_stories_peerStories) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stories_peerStories)
	x.Bytes(e.stories.encode())
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_messages_webPage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_webPage)
	x.Bytes(e.webpage.encode())
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_inputStorePaymentPremiumGiftCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputStorePaymentPremiumGiftCode)
	x.Int(e.flags)
	x.Vector(e.users)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.boost_peer.encode())
	}
	x.String(e.currency)
	x.Long(e.amount)
	return x.buf
}

func (e TL_inputStorePaymentPremiumGiveaway) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputStorePaymentPremiumGiveaway)
	x.Int(e.flags)
	x.Bytes(e.boost_peer.encode())
	if e.flags&(1<<1) != 0 {
		x.Vector(e.additional_peers)
	}
	if e.flags&(1<<2) != 0 {
		x.VectorString(e.countries_iso2)
	}
	if e.flags&(1<<4) != 0 {
		x.String(e.prize_description)
	}
	x.Long(e.random_id)
	x.Int(e.until_date)
	x.String(e.currency)
	x.Long(e.amount)
	return x.buf
}

func (e TL_inputInvoicePremiumGiftCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputInvoicePremiumGiftCode)
	x.Bytes(e.purpose.encode())
	x.Bytes(e.option.encode())
	return x.buf
}

func (e TL_premiumGiftCodeOption) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_premiumGiftCodeOption)
	x.Int(e.flags)
	x.Int(e.users)
	x.Int(e.months)
	if e.flags&(1<<0) != 0 {
		x.String(e.store_product)
	}
	if e.flags&(1<<1) != 0 {
		x.Int(e.store_quantity)
	}
	x.String(e.currency)
	x.Long(e.amount)
	return x.buf
}

func (e TL_payments_checkedGiftCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_payments_checkedGiftCode)
	x.Int(e.flags)
	if e.flags&(1<<4) != 0 {
		x.Bytes(e.from_id.encode())
	}
	if e.flags&(1<<3) != 0 {
		x.Int(e.giveaway_msg_id)
	}
	if e.flags&(1<<0) != 0 {
		x.Long(e.to_id)
	}
	x.Int(e.date)
	x.Int(e.months)
	if e.flags&(1<<1) != 0 {
		x.Int(e.used_date)
	}
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_messageMediaGiveaway) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageMediaGiveaway)
	x.Int(e.flags)
	x.VectorLong(e.channels)
	if e.flags&(1<<1) != 0 {
		x.VectorString(e.countries_iso2)
	}
	if e.flags&(1<<3) != 0 {
		x.String(e.prize_description)
	}
	x.Int(e.quantity)
	x.Int(e.months)
	x.Int(e.until_date)
	return x.buf
}

func (e TL_messageActionGiftCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionGiftCode)
	x.Int(e.flags)
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.boost_peer.encode())
	}
	x.Int(e.months)
	x.String(e.slug)
	if e.flags&(1<<2) != 0 {
		x.String(e.currency)
	}
	if e.flags&(1<<2) != 0 {
		x.Long(e.amount)
	}
	if e.flags&(1<<3) != 0 {
		x.String(e.crypto_currency)
	}
	if e.flags&(1<<3) != 0 {
		x.Long(e.crypto_amount)
	}
	return x.buf
}

func (e TL_messageActionGiveawayLaunch) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionGiveawayLaunch)
	return x.buf
}

func (e TL_payments_giveawayInfo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_payments_giveawayInfo)
	x.Int(e.flags)
	x.Int(e.start_date)
	if e.flags&(1<<1) != 0 {
		x.Int(e.joined_too_early_date)
	}
	if e.flags&(1<<2) != 0 {
		x.Long(e.admin_disallowed_chat_id)
	}
	if e.flags&(1<<4) != 0 {
		x.String(e.disallowed_country)
	}
	return x.buf
}

func (e TL_payments_giveawayInfoResults) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_payments_giveawayInfoResults)
	x.Int(e.flags)
	x.Int(e.start_date)
	if e.flags&(1<<0) != 0 {
		x.String(e.gift_code_slug)
	}
	x.Int(e.finish_date)
	x.Int(e.winners_count)
	x.Int(e.activated_count)
	return x.buf
}

func (e TL_messageEntityBlockquote) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageEntityBlockquote)
	x.Int(e.offset)
	x.Int(e.length)
	return x.buf
}

func (e TL_prepaidGiveaway) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_prepaidGiveaway)
	x.Long(e.id)
	x.Int(e.months)
	x.Int(e.quantity)
	x.Int(e.date)
	return x.buf
}

func (e TL_inputMediaWebPage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMediaWebPage)
	x.Int(e.flags)
	x.String(e.url)
	return x.buf
}

func (e TL_inputBotInlineMessageMediaWebPage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputBotInlineMessageMediaWebPage)
	x.Int(e.flags)
	x.String(e.message)
	if e.flags&(1<<1) != 0 {
		x.Vector(e.entities)
	}
	x.String(e.url)
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.reply_markup.encode())
	}
	return x.buf
}

func (e TL_botInlineMessageMediaWebPage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_botInlineMessageMediaWebPage)
	x.Int(e.flags)
	x.String(e.message)
	if e.flags&(1<<1) != 0 {
		x.Vector(e.entities)
	}
	x.String(e.url)
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.reply_markup.encode())
	}
	return x.buf
}

func (e TL_boost) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_boost)
	x.Int(e.flags)
	x.String(e.id)
	if e.flags&(1<<0) != 0 {
		x.Long(e.user_id)
	}
	if e.flags&(1<<2) != 0 {
		x.Int(e.giveaway_msg_id)
	}
	x.Int(e.date)
	x.Int(e.expires)
	if e.flags&(1<<4) != 0 {
		x.String(e.used_gift_slug)
	}
	if e.flags&(1<<5) != 0 {
		x.Int(e.multiplier)
	}
	return x.buf
}

func (e TL_premium_boostsList) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_premium_boostsList)
	x.Int(e.flags)
	x.Int(e.count)
	x.Vector(e.boosts)
	if e.flags&(1<<0) != 0 {
		x.String(e.next_offset)
	}
	x.Vector(e.users)
	return x.buf
}

func (e TL_myBoost) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_myBoost)
	x.Int(e.flags)
	x.Int(e.slot)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.peer.encode())
	}
	x.Int(e.date)
	x.Int(e.expires)
	if e.flags&(1<<1) != 0 {
		x.Int(e.cooldown_until_date)
	}
	return x.buf
}

func (e TL_premium_myBoosts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_premium_myBoosts)
	x.Vector(e.my_boosts)
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_premium_boostsStatus) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_premium_boostsStatus)
	x.Int(e.flags)
	x.Int(e.level)
	x.Int(e.current_level_boosts)
	x.Int(e.boosts)
	if e.flags&(1<<4) != 0 {
		x.Int(e.gift_boosts)
	}
	if e.flags&(1<<0) != 0 {
		x.Int(e.next_level_boosts)
	}
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.premium_audience.encode())
	}
	x.String(e.boost_url)
	if e.flags&(1<<3) != 0 {
		x.Vector(e.prepaid_giveaways)
	}
	if e.flags&(1<<2) != 0 {
		x.VectorInt(e.my_boost_slots)
	}
	return x.buf
}

func (e TL_updateBotChatBoost) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateBotChatBoost)
	x.Bytes(e.peer.encode())
	x.Bytes(e.boost.encode())
	x.Int(e.qts)
	return x.buf
}

func (e TL_updateChannelViewForumAsMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateChannelViewForumAsMessages)
	x.Long(e.channel_id)
	x.Bytes(e.enabled.encode())
	return x.buf
}

func (e TL_messageActionGiveawayResults) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageActionGiveawayResults)
	x.Int(e.winners_count)
	x.Int(e.unclaimed_count)
	return x.buf
}

func (e TL_updatePeerWallpaper) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updatePeerWallpaper)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.wallpaper.encode())
	}
	return x.buf
}

func (e TL_storyFwdHeader) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_storyFwdHeader)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.from.encode())
	}
	if e.flags&(1<<1) != 0 {
		x.String(e.from_name)
	}
	if e.flags&(1<<2) != 0 {
		x.Int(e.story_id)
	}
	return x.buf
}

func (e TL_postInteractionCountersMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_postInteractionCountersMessage)
	x.Int(e.msg_id)
	x.Int(e.views)
	x.Int(e.forwards)
	x.Int(e.reactions)
	return x.buf
}

func (e TL_postInteractionCountersStory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_postInteractionCountersStory)
	x.Int(e.story_id)
	x.Int(e.views)
	x.Int(e.forwards)
	x.Int(e.reactions)
	return x.buf
}

func (e TL_stats_storyStats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stats_storyStats)
	x.Bytes(e.views_graph.encode())
	x.Bytes(e.reactions_by_emotion_graph.encode())
	return x.buf
}

func (e TL_publicForwardMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_publicForwardMessage)
	x.Bytes(e.message.encode())
	return x.buf
}

func (e TL_publicForwardStory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_publicForwardStory)
	x.Bytes(e.peer.encode())
	x.Bytes(e.story.encode())
	return x.buf
}

func (e TL_stats_publicForwards) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stats_publicForwards)
	x.Int(e.flags)
	x.Int(e.count)
	x.Vector(e.forwards)
	if e.flags&(1<<0) != 0 {
		x.String(e.next_offset)
	}
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_peerColor) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_peerColor)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.Int(e.color)
	}
	if e.flags&(1<<1) != 0 {
		x.Long(e.background_emoji_id)
	}
	return x.buf
}

func (e TL_help_peerColorSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_peerColorSet)
	x.VectorInt(e.colors)
	return x.buf
}

func (e TL_help_peerColorProfileSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_peerColorProfileSet)
	x.VectorInt(e.palette_colors)
	x.VectorInt(e.bg_colors)
	x.VectorInt(e.story_colors)
	return x.buf
}

func (e TL_help_peerColorOption) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_peerColorOption)
	x.Int(e.flags)
	x.Int(e.color_id)
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.colors.encode())
	}
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.dark_colors.encode())
	}
	if e.flags&(1<<3) != 0 {
		x.Int(e.channel_min_level)
	}
	return x.buf
}

func (e TL_help_peerColorsNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_peerColorsNotModified)
	return x.buf
}

func (e TL_help_peerColors) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_peerColors)
	x.Int(e.hash)
	x.Vector(e.colors)
	return x.buf
}

func (e TL_messageMediaGiveawayResults) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messageMediaGiveawayResults)
	x.Int(e.flags)
	x.Long(e.channel_id)
	if e.flags&(1<<3) != 0 {
		x.Int(e.additional_peers_count)
	}
	x.Int(e.launch_msg_id)
	x.Int(e.winners_count)
	x.Int(e.unclaimed_count)
	x.VectorLong(e.winners)
	x.Int(e.months)
	if e.flags&(1<<1) != 0 {
		x.String(e.prize_description)
	}
	x.Int(e.until_date)
	return x.buf
}

func (e TL_storyReaction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_storyReaction)
	x.Bytes(e.peer_id.encode())
	x.Int(e.date)
	x.Bytes(e.reaction.encode())
	return x.buf
}

func (e TL_storyReactionPublicForward) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_storyReactionPublicForward)
	x.Bytes(e.message.encode())
	return x.buf
}

func (e TL_storyReactionPublicRepost) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_storyReactionPublicRepost)
	x.Bytes(e.peer_id.encode())
	x.Bytes(e.story.encode())
	return x.buf
}

func (e TL_stories_storyReactionsList) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stories_storyReactionsList)
	x.Int(e.flags)
	x.Int(e.count)
	x.Vector(e.reactions)
	x.Vector(e.chats)
	x.Vector(e.users)
	if e.flags&(1<<0) != 0 {
		x.String(e.next_offset)
	}
	return x.buf
}

func (e TL_storyViewPublicForward) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_storyViewPublicForward)
	x.Int(e.flags)
	x.Bytes(e.message.encode())
	return x.buf
}

func (e TL_storyViewPublicRepost) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_storyViewPublicRepost)
	x.Int(e.flags)
	x.Bytes(e.peer_id.encode())
	x.Bytes(e.story.encode())
	return x.buf
}

func (e TL_channelAdminLogEventActionChangePeerColor) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionChangePeerColor)
	x.Bytes(e.prev_value.encode())
	x.Bytes(e.new_value.encode())
	return x.buf
}

func (e TL_channelAdminLogEventActionChangeProfilePeerColor) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionChangeProfilePeerColor)
	x.Bytes(e.prev_value.encode())
	x.Bytes(e.new_value.encode())
	return x.buf
}

func (e TL_channelAdminLogEventActionChangeWallpaper) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionChangeWallpaper)
	x.Bytes(e.prev_value.encode())
	x.Bytes(e.new_value.encode())
	return x.buf
}

func (e TL_channelAdminLogEventActionChangeEmojiStatus) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channelAdminLogEventActionChangeEmojiStatus)
	x.Bytes(e.prev_value.encode())
	x.Bytes(e.new_value.encode())
	return x.buf
}

func (e TL_inputStickerSetEmojiChannelDefaultStatuses) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputStickerSetEmojiChannelDefaultStatuses)
	return x.buf
}

func (e TL_mediaAreaChannelPost) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_mediaAreaChannelPost)
	x.Bytes(e.coordinates.encode())
	x.Long(e.channel_id)
	x.Int(e.msg_id)
	return x.buf
}

func (e TL_inputMediaAreaChannelPost) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_inputMediaAreaChannelPost)
	x.Bytes(e.coordinates.encode())
	x.Bytes(e.channel.encode())
	x.Int(e.msg_id)
	return x.buf
}

func (e TL_updateBotMessageReaction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateBotMessageReaction)
	x.Bytes(e.peer.encode())
	x.Int(e.msg_id)
	x.Int(e.date)
	x.Bytes(e.actor.encode())
	x.Vector(e.old_reactions)
	x.Vector(e.new_reactions)
	x.Int(e.qts)
	return x.buf
}

func (e TL_updateBotMessageReactions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateBotMessageReactions)
	x.Bytes(e.peer.encode())
	x.Int(e.msg_id)
	x.Int(e.date)
	x.Vector(e.reactions)
	x.Int(e.qts)
	return x.buf
}

func (e TL_savedDialog) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_savedDialog)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	x.Int(e.top_message)
	return x.buf
}

func (e TL_updateSavedDialogPinned) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updateSavedDialogPinned)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	return x.buf
}

func (e TL_updatePinnedSavedDialogs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updatePinnedSavedDialogs)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.Vector(e.order)
	}
	return x.buf
}

func (e TL_messages_savedDialogs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_savedDialogs)
	x.Vector(e.dialogs)
	x.Vector(e.messages)
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_messages_savedDialogsSlice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_savedDialogsSlice)
	x.Int(e.count)
	x.Vector(e.dialogs)
	x.Vector(e.messages)
	x.Vector(e.chats)
	x.Vector(e.users)
	return x.buf
}

func (e TL_messages_savedDialogsNotModified) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_savedDialogsNotModified)
	x.Int(e.count)
	return x.buf
}

func (e TL_invokeAfterMsg) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_invokeAfterMsg)
	x.Long(e.msg_id)
	x.Bytes(e.query.encode())
	return x.buf
}

func (e TL_invokeAfterMsgs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_invokeAfterMsgs)
	x.VectorLong(e.msg_ids)
	x.Bytes(e.query.encode())
	return x.buf
}

func (e TL_auth_sendCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_sendCode)
	x.String(e.phone_number)
	x.Int(e.api_id)
	x.String(e.api_hash)
	x.Bytes(e.settings.encode())
	return x.buf
}

func (e TL_auth_signUp) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_signUp)
	x.String(e.phone_number)
	x.String(e.phone_code_hash)
	x.String(e.first_name)
	x.String(e.last_name)
	return x.buf
}

func (e TL_auth_signIn) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_signIn)
	x.Int(e.flags)
	x.String(e.phone_number)
	x.String(e.phone_code_hash)
	if e.flags&(1<<0) != 0 {
		x.String(e.phone_code)
	}
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.email_verification.encode())
	}
	return x.buf
}

func (e TL_auth_logOut) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_logOut)
	return x.buf
}

func (e TL_auth_resetAuthorizations) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_resetAuthorizations)
	return x.buf
}

func (e TL_auth_exportAuthorization) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_exportAuthorization)
	x.Int(e.dc_id)
	return x.buf
}

func (e TL_auth_importAuthorization) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_importAuthorization)
	x.Long(e.id)
	x.StringBytes(e.bytes)
	return x.buf
}

func (e TL_auth_bindTempAuthKey) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_bindTempAuthKey)
	x.Long(e.perm_auth_key_id)
	x.Long(e.nonce)
	x.Int(e.expires_at)
	x.StringBytes(e.encrypted_message)
	return x.buf
}

func (e TL_account_registerDevice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_registerDevice)
	x.Int(e.flags)
	x.Int(e.token_type)
	x.String(e.token)
	x.Bytes(e.app_sandbox.encode())
	x.StringBytes(e.secret)
	x.VectorLong(e.other_uids)
	return x.buf
}

func (e TL_account_unregisterDevice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_unregisterDevice)
	x.Int(e.token_type)
	x.String(e.token)
	x.VectorLong(e.other_uids)
	return x.buf
}

func (e TL_account_updateNotifySettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_updateNotifySettings)
	x.Bytes(e.peer.encode())
	x.Bytes(e.settings.encode())
	return x.buf
}

func (e TL_account_getNotifySettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_getNotifySettings)
	x.Bytes(e.peer.encode())
	return x.buf
}

func (e TL_account_resetNotifySettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_resetNotifySettings)
	return x.buf
}

func (e TL_account_updateProfile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_updateProfile)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.String(e.first_name)
	}
	if e.flags&(1<<1) != 0 {
		x.String(e.last_name)
	}
	if e.flags&(1<<2) != 0 {
		x.String(e.about)
	}
	return x.buf
}

func (e TL_account_updateStatus) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_updateStatus)
	x.Bytes(e.offline.encode())
	return x.buf
}

func (e TL_account_getWallPapers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_getWallPapers)
	x.Long(e.hash)
	return x.buf
}

func (e TL_account_reportPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_reportPeer)
	x.Bytes(e.peer.encode())
	x.Bytes(e.reason.encode())
	x.String(e.message)
	return x.buf
}

func (e TL_users_getUsers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_users_getUsers)
	x.Vector(e.id)
	return x.buf
}

func (e TL_users_getFullUser) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_users_getFullUser)
	x.Bytes(e.id.encode())
	return x.buf
}

func (e TL_contacts_getContactIDs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_contacts_getContactIDs)
	x.Long(e.hash)
	return x.buf
}

func (e TL_contacts_getStatuses) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_contacts_getStatuses)
	return x.buf
}

func (e TL_contacts_getContacts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_contacts_getContacts)
	x.Long(e.hash)
	return x.buf
}

func (e TL_contacts_importContacts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_contacts_importContacts)
	x.Vector(e.contacts)
	return x.buf
}

func (e TL_contacts_deleteContacts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_contacts_deleteContacts)
	x.Vector(e.id)
	return x.buf
}

func (e TL_contacts_deleteByPhones) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_contacts_deleteByPhones)
	x.VectorString(e.phones)
	return x.buf
}

func (e TL_contacts_block) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_contacts_block)
	x.Int(e.flags)
	x.Bytes(e.id.encode())
	return x.buf
}

func (e TL_contacts_unblock) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_contacts_unblock)
	x.Int(e.flags)
	x.Bytes(e.id.encode())
	return x.buf
}

func (e TL_contacts_getBlocked) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_contacts_getBlocked)
	x.Int(e.flags)
	x.Int(e.offset)
	x.Int(e.limit)
	return x.buf
}

func (e TL_messages_getMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getMessages)
	x.Vector(e.id)
	return x.buf
}

func (e TL_messages_getDialogs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getDialogs)
	x.Int(e.flags)
	if e.flags&(1<<1) != 0 {
		x.Int(e.folder_id)
	}
	x.Int(e.offset_date)
	x.Int(e.offset_id)
	x.Bytes(e.offset_peer.encode())
	x.Int(e.limit)
	x.Long(e.hash)
	return x.buf
}

func (e TL_messages_getHistory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getHistory)
	x.Bytes(e.peer.encode())
	x.Int(e.offset_id)
	x.Int(e.offset_date)
	x.Int(e.add_offset)
	x.Int(e.limit)
	x.Int(e.max_id)
	x.Int(e.min_id)
	x.Long(e.hash)
	return x.buf
}

func (e TL_messages_search) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_search)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	x.String(e.q)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.from_id.encode())
	}
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.saved_peer_id.encode())
	}
	if e.flags&(1<<1) != 0 {
		x.Int(e.top_msg_id)
	}
	x.Bytes(e.filter.encode())
	x.Int(e.min_date)
	x.Int(e.max_date)
	x.Int(e.offset_id)
	x.Int(e.add_offset)
	x.Int(e.limit)
	x.Int(e.max_id)
	x.Int(e.min_id)
	x.Long(e.hash)
	return x.buf
}

func (e TL_messages_readHistory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_readHistory)
	x.Bytes(e.peer.encode())
	x.Int(e.max_id)
	return x.buf
}

func (e TL_messages_deleteHistory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_deleteHistory)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	x.Int(e.max_id)
	if e.flags&(1<<2) != 0 {
		x.Int(e.min_date)
	}
	if e.flags&(1<<3) != 0 {
		x.Int(e.max_date)
	}
	return x.buf
}

func (e TL_messages_deleteMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_deleteMessages)
	x.Int(e.flags)
	x.VectorInt(e.id)
	return x.buf
}

func (e TL_messages_receivedMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_receivedMessages)
	x.Int(e.max_id)
	return x.buf
}

func (e TL_messages_setTyping) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_setTyping)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	if e.flags&(1<<0) != 0 {
		x.Int(e.top_msg_id)
	}
	x.Bytes(e.action.encode())
	return x.buf
}

func (e TL_messages_sendMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_sendMessage)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.reply_to.encode())
	}
	x.String(e.message)
	x.Long(e.random_id)
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.reply_markup.encode())
	}
	if e.flags&(1<<3) != 0 {
		x.Vector(e.entities)
	}
	if e.flags&(1<<10) != 0 {
		x.Int(e.schedule_date)
	}
	if e.flags&(1<<13) != 0 {
		x.Bytes(e.send_as.encode())
	}
	return x.buf
}

func (e TL_messages_sendMedia) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_sendMedia)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.reply_to.encode())
	}
	x.Bytes(e.media.encode())
	x.String(e.message)
	x.Long(e.random_id)
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.reply_markup.encode())
	}
	if e.flags&(1<<3) != 0 {
		x.Vector(e.entities)
	}
	if e.flags&(1<<10) != 0 {
		x.Int(e.schedule_date)
	}
	if e.flags&(1<<13) != 0 {
		x.Bytes(e.send_as.encode())
	}
	return x.buf
}

func (e TL_messages_forwardMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_forwardMessages)
	x.Int(e.flags)
	x.Bytes(e.from_peer.encode())
	x.VectorInt(e.id)
	x.VectorLong(e.random_id)
	x.Bytes(e.to_peer.encode())
	if e.flags&(1<<9) != 0 {
		x.Int(e.top_msg_id)
	}
	if e.flags&(1<<10) != 0 {
		x.Int(e.schedule_date)
	}
	if e.flags&(1<<13) != 0 {
		x.Bytes(e.send_as.encode())
	}
	return x.buf
}

func (e TL_messages_reportSpam) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_reportSpam)
	x.Bytes(e.peer.encode())
	return x.buf
}

func (e TL_messages_getPeerSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getPeerSettings)
	x.Bytes(e.peer.encode())
	return x.buf
}

func (e TL_messages_report) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_report)
	x.Bytes(e.peer.encode())
	x.VectorInt(e.id)
	x.Bytes(e.reason.encode())
	x.String(e.message)
	return x.buf
}

func (e TL_messages_getChats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getChats)
	x.VectorLong(e.id)
	return x.buf
}

func (e TL_messages_getFullChat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getFullChat)
	x.Long(e.chat_id)
	return x.buf
}

func (e TL_messages_editChatTitle) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_editChatTitle)
	x.Long(e.chat_id)
	x.String(e.title)
	return x.buf
}

func (e TL_messages_editChatPhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_editChatPhoto)
	x.Long(e.chat_id)
	x.Bytes(e.photo.encode())
	return x.buf
}

func (e TL_messages_addChatUser) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_addChatUser)
	x.Long(e.chat_id)
	x.Bytes(e.user_id.encode())
	x.Int(e.fwd_limit)
	return x.buf
}

func (e TL_messages_deleteChatUser) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_deleteChatUser)
	x.Int(e.flags)
	x.Long(e.chat_id)
	x.Bytes(e.user_id.encode())
	return x.buf
}

func (e TL_messages_createChat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_createChat)
	x.Int(e.flags)
	x.Vector(e.users)
	x.String(e.title)
	if e.flags&(1<<0) != 0 {
		x.Int(e.ttl_period)
	}
	return x.buf
}

func (e TL_updates_getState) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updates_getState)
	return x.buf
}

func (e TL_updates_getDifference) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updates_getDifference)
	x.Int(e.flags)
	x.Int(e.pts)
	if e.flags&(1<<1) != 0 {
		x.Int(e.pts_limit)
	}
	if e.flags&(1<<0) != 0 {
		x.Int(e.pts_total_limit)
	}
	x.Int(e.date)
	x.Int(e.qts)
	if e.flags&(1<<2) != 0 {
		x.Int(e.qts_limit)
	}
	return x.buf
}

func (e TL_photos_updateProfilePhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_photos_updateProfilePhoto)
	x.Int(e.flags)
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.bot.encode())
	}
	x.Bytes(e.id.encode())
	return x.buf
}

func (e TL_photos_uploadProfilePhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_photos_uploadProfilePhoto)
	x.Int(e.flags)
	if e.flags&(1<<5) != 0 {
		x.Bytes(e.bot.encode())
	}
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.file.encode())
	}
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.video.encode())
	}
	if e.flags&(1<<2) != 0 {
		x.Double(e.video_start_ts)
	}
	if e.flags&(1<<4) != 0 {
		x.Bytes(e.video_emoji_markup.encode())
	}
	return x.buf
}

func (e TL_photos_deletePhotos) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_photos_deletePhotos)
	x.Vector(e.id)
	return x.buf
}

func (e TL_upload_saveFilePart) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_upload_saveFilePart)
	x.Long(e.file_id)
	x.Int(e.file_part)
	x.StringBytes(e.bytes)
	return x.buf
}

func (e TL_upload_getFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_upload_getFile)
	x.Int(e.flags)
	x.Bytes(e.location.encode())
	x.Long(e.offset)
	x.Int(e.limit)
	return x.buf
}

func (e TL_help_getConfig) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_getConfig)
	return x.buf
}

func (e TL_help_getNearestDc) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_getNearestDc)
	return x.buf
}

func (e TL_help_getAppUpdate) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_getAppUpdate)
	x.String(e.source)
	return x.buf
}

func (e TL_help_getInviteText) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_getInviteText)
	return x.buf
}

func (e TL_photos_getUserPhotos) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_photos_getUserPhotos)
	x.Bytes(e.user_id.encode())
	x.Int(e.offset)
	x.Long(e.max_id)
	x.Int(e.limit)
	return x.buf
}

func (e TL_messages_getDhConfig) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getDhConfig)
	x.Int(e.version)
	x.Int(e.random_length)
	return x.buf
}

func (e TL_messages_requestEncryption) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_requestEncryption)
	x.Bytes(e.user_id.encode())
	x.Int(e.random_id)
	x.StringBytes(e.g_a)
	return x.buf
}

func (e TL_messages_acceptEncryption) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_acceptEncryption)
	x.Bytes(e.peer.encode())
	x.StringBytes(e.g_b)
	x.Long(e.key_fingerprint)
	return x.buf
}

func (e TL_messages_discardEncryption) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_discardEncryption)
	x.Int(e.flags)
	x.Int(e.chat_id)
	return x.buf
}

func (e TL_messages_setEncryptedTyping) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_setEncryptedTyping)
	x.Bytes(e.peer.encode())
	x.Bytes(e.typing.encode())
	return x.buf
}

func (e TL_messages_readEncryptedHistory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_readEncryptedHistory)
	x.Bytes(e.peer.encode())
	x.Int(e.max_date)
	return x.buf
}

func (e TL_messages_sendEncrypted) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_sendEncrypted)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	x.Long(e.random_id)
	x.StringBytes(e.data)
	return x.buf
}

func (e TL_messages_sendEncryptedFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_sendEncryptedFile)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	x.Long(e.random_id)
	x.StringBytes(e.data)
	x.Bytes(e.file.encode())
	return x.buf
}

func (e TL_messages_sendEncryptedService) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_sendEncryptedService)
	x.Bytes(e.peer.encode())
	x.Long(e.random_id)
	x.StringBytes(e.data)
	return x.buf
}

func (e TL_messages_receivedQueue) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_receivedQueue)
	x.Int(e.max_qts)
	return x.buf
}

func (e TL_messages_reportEncryptedSpam) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_reportEncryptedSpam)
	x.Bytes(e.peer.encode())
	return x.buf
}

func (e TL_upload_saveBigFilePart) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_upload_saveBigFilePart)
	x.Long(e.file_id)
	x.Int(e.file_part)
	x.Int(e.file_total_parts)
	x.StringBytes(e.bytes)
	return x.buf
}

func (e TL_initConnection) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_initConnection)
	x.Int(e.flags)
	x.Int(e.api_id)
	x.String(e.device_model)
	x.String(e.system_version)
	x.String(e.app_version)
	x.String(e.system_lang_code)
	x.String(e.lang_pack)
	x.String(e.lang_code)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.proxy.encode())
	}
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.params.encode())
	}
	x.Bytes(e.query.encode())
	return x.buf
}

func (e TL_help_getSupport) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_getSupport)
	return x.buf
}

func (e TL_messages_readMessageContents) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_readMessageContents)
	x.VectorInt(e.id)
	return x.buf
}

func (e TL_account_checkUsername) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_checkUsername)
	x.String(e.username)
	return x.buf
}

func (e TL_account_updateUsername) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_updateUsername)
	x.String(e.username)
	return x.buf
}

func (e TL_contacts_search) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_contacts_search)
	x.String(e.q)
	x.Int(e.limit)
	return x.buf
}

func (e TL_account_getPrivacy) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_getPrivacy)
	x.Bytes(e.key.encode())
	return x.buf
}

func (e TL_account_setPrivacy) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_setPrivacy)
	x.Bytes(e.key.encode())
	x.Vector(e.rules)
	return x.buf
}

func (e TL_account_deleteAccount) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_deleteAccount)
	x.Int(e.flags)
	x.String(e.reason)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.password.encode())
	}
	return x.buf
}

func (e TL_account_getAccountTTL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_getAccountTTL)
	return x.buf
}

func (e TL_account_setAccountTTL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_setAccountTTL)
	x.Bytes(e.ttl.encode())
	return x.buf
}

func (e TL_invokeWithLayer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_invokeWithLayer)
	x.Int(e.layer)
	x.Bytes(e.query.encode())
	return x.buf
}

func (e TL_contacts_resolveUsername) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_contacts_resolveUsername)
	x.String(e.username)
	return x.buf
}

func (e TL_account_sendChangePhoneCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_sendChangePhoneCode)
	x.String(e.phone_number)
	x.Bytes(e.settings.encode())
	return x.buf
}

func (e TL_account_changePhone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_changePhone)
	x.String(e.phone_number)
	x.String(e.phone_code_hash)
	x.String(e.phone_code)
	return x.buf
}

func (e TL_messages_getStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getStickers)
	x.String(e.emoticon)
	x.Long(e.hash)
	return x.buf
}

func (e TL_messages_getAllStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getAllStickers)
	x.Long(e.hash)
	return x.buf
}

func (e TL_account_updateDeviceLocked) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_updateDeviceLocked)
	x.Int(e.period)
	return x.buf
}

func (e TL_auth_importBotAuthorization) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_importBotAuthorization)
	x.Int(e.flags)
	x.Int(e.api_id)
	x.String(e.api_hash)
	x.String(e.bot_auth_token)
	return x.buf
}

func (e TL_messages_getWebPagePreview) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getWebPagePreview)
	x.Int(e.flags)
	x.String(e.message)
	if e.flags&(1<<3) != 0 {
		x.Vector(e.entities)
	}
	return x.buf
}

func (e TL_account_getAuthorizations) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_getAuthorizations)
	return x.buf
}

func (e TL_account_resetAuthorization) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_resetAuthorization)
	x.Long(e.hash)
	return x.buf
}

func (e TL_account_getPassword) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_getPassword)
	return x.buf
}

func (e TL_account_getPasswordSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_getPasswordSettings)
	x.Bytes(e.password.encode())
	return x.buf
}

func (e TL_account_updatePasswordSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_updatePasswordSettings)
	x.Bytes(e.password.encode())
	x.Bytes(e.new_settings.encode())
	return x.buf
}

func (e TL_auth_checkPassword) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_checkPassword)
	x.Bytes(e.password.encode())
	return x.buf
}

func (e TL_auth_requestPasswordRecovery) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_requestPasswordRecovery)
	return x.buf
}

func (e TL_auth_recoverPassword) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_recoverPassword)
	x.Int(e.flags)
	x.String(e.code)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.new_settings.encode())
	}
	return x.buf
}

func (e TL_invokeWithoutUpdates) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_invokeWithoutUpdates)
	x.Bytes(e.query.encode())
	return x.buf
}

func (e TL_messages_exportChatInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_exportChatInvite)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	if e.flags&(1<<0) != 0 {
		x.Int(e.expire_date)
	}
	if e.flags&(1<<1) != 0 {
		x.Int(e.usage_limit)
	}
	if e.flags&(1<<4) != 0 {
		x.String(e.title)
	}
	return x.buf
}

func (e TL_messages_checkChatInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_checkChatInvite)
	x.String(e.hash)
	return x.buf
}

func (e TL_messages_importChatInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_importChatInvite)
	x.String(e.hash)
	return x.buf
}

func (e TL_messages_getStickerSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getStickerSet)
	x.Bytes(e.stickerset.encode())
	x.Int(e.hash)
	return x.buf
}

func (e TL_messages_installStickerSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_installStickerSet)
	x.Bytes(e.stickerset.encode())
	x.Bytes(e.archived.encode())
	return x.buf
}

func (e TL_messages_uninstallStickerSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_uninstallStickerSet)
	x.Bytes(e.stickerset.encode())
	return x.buf
}

func (e TL_messages_startBot) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_startBot)
	x.Bytes(e.bot.encode())
	x.Bytes(e.peer.encode())
	x.Long(e.random_id)
	x.String(e.start_param)
	return x.buf
}

func (e TL_messages_getMessagesViews) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getMessagesViews)
	x.Bytes(e.peer.encode())
	x.VectorInt(e.id)
	x.Bytes(e.increment.encode())
	return x.buf
}

func (e TL_channels_readHistory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_readHistory)
	x.Bytes(e.channel.encode())
	x.Int(e.max_id)
	return x.buf
}

func (e TL_channels_deleteMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_deleteMessages)
	x.Bytes(e.channel.encode())
	x.VectorInt(e.id)
	return x.buf
}

func (e TL_channels_reportSpam) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_reportSpam)
	x.Bytes(e.channel.encode())
	x.Bytes(e.participant.encode())
	x.VectorInt(e.id)
	return x.buf
}

func (e TL_channels_getMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_getMessages)
	x.Bytes(e.channel.encode())
	x.Vector(e.id)
	return x.buf
}

func (e TL_channels_getParticipants) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_getParticipants)
	x.Bytes(e.channel.encode())
	x.Bytes(e.filter.encode())
	x.Int(e.offset)
	x.Int(e.limit)
	x.Long(e.hash)
	return x.buf
}

func (e TL_channels_getParticipant) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_getParticipant)
	x.Bytes(e.channel.encode())
	x.Bytes(e.participant.encode())
	return x.buf
}

func (e TL_channels_getChannels) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_getChannels)
	x.Vector(e.id)
	return x.buf
}

func (e TL_channels_getFullChannel) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_getFullChannel)
	x.Bytes(e.channel.encode())
	return x.buf
}

func (e TL_channels_createChannel) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_createChannel)
	x.Int(e.flags)
	x.String(e.title)
	x.String(e.about)
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.geo_point.encode())
	}
	if e.flags&(1<<2) != 0 {
		x.String(e.address)
	}
	if e.flags&(1<<4) != 0 {
		x.Int(e.ttl_period)
	}
	return x.buf
}

func (e TL_channels_editAdmin) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_editAdmin)
	x.Bytes(e.channel.encode())
	x.Bytes(e.user_id.encode())
	x.Bytes(e.admin_rights.encode())
	x.String(e.rank)
	return x.buf
}

func (e TL_channels_editTitle) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_editTitle)
	x.Bytes(e.channel.encode())
	x.String(e.title)
	return x.buf
}

func (e TL_channels_editPhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_editPhoto)
	x.Bytes(e.channel.encode())
	x.Bytes(e.photo.encode())
	return x.buf
}

func (e TL_channels_checkUsername) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_checkUsername)
	x.Bytes(e.channel.encode())
	x.String(e.username)
	return x.buf
}

func (e TL_channels_updateUsername) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_updateUsername)
	x.Bytes(e.channel.encode())
	x.String(e.username)
	return x.buf
}

func (e TL_channels_joinChannel) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_joinChannel)
	x.Bytes(e.channel.encode())
	return x.buf
}

func (e TL_channels_leaveChannel) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_leaveChannel)
	x.Bytes(e.channel.encode())
	return x.buf
}

func (e TL_channels_inviteToChannel) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_inviteToChannel)
	x.Bytes(e.channel.encode())
	x.Vector(e.users)
	return x.buf
}

func (e TL_channels_deleteChannel) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_deleteChannel)
	x.Bytes(e.channel.encode())
	return x.buf
}

func (e TL_updates_getChannelDifference) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_updates_getChannelDifference)
	x.Int(e.flags)
	x.Bytes(e.channel.encode())
	x.Bytes(e.filter.encode())
	x.Int(e.pts)
	x.Int(e.limit)
	return x.buf
}

func (e TL_messages_editChatAdmin) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_editChatAdmin)
	x.Long(e.chat_id)
	x.Bytes(e.user_id.encode())
	x.Bytes(e.is_admin.encode())
	return x.buf
}

func (e TL_messages_migrateChat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_migrateChat)
	x.Long(e.chat_id)
	return x.buf
}

func (e TL_messages_searchGlobal) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_searchGlobal)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.Int(e.folder_id)
	}
	x.String(e.q)
	x.Bytes(e.filter.encode())
	x.Int(e.min_date)
	x.Int(e.max_date)
	x.Int(e.offset_rate)
	x.Bytes(e.offset_peer.encode())
	x.Int(e.offset_id)
	x.Int(e.limit)
	return x.buf
}

func (e TL_messages_reorderStickerSets) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_reorderStickerSets)
	x.Int(e.flags)
	x.VectorLong(e.order)
	return x.buf
}

func (e TL_messages_getDocumentByHash) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getDocumentByHash)
	x.StringBytes(e.sha256)
	x.Long(e.size)
	x.String(e.mime_type)
	return x.buf
}

func (e TL_messages_getSavedGifs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getSavedGifs)
	x.Long(e.hash)
	return x.buf
}

func (e TL_messages_saveGif) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_saveGif)
	x.Bytes(e.id.encode())
	x.Bytes(e.unsave.encode())
	return x.buf
}

func (e TL_messages_getInlineBotResults) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getInlineBotResults)
	x.Int(e.flags)
	x.Bytes(e.bot.encode())
	x.Bytes(e.peer.encode())
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.geo_point.encode())
	}
	x.String(e.query)
	x.String(e.offset)
	return x.buf
}

func (e TL_messages_setInlineBotResults) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_setInlineBotResults)
	x.Int(e.flags)
	x.Long(e.query_id)
	x.Vector(e.results)
	x.Int(e.cache_time)
	if e.flags&(1<<2) != 0 {
		x.String(e.next_offset)
	}
	if e.flags&(1<<3) != 0 {
		x.Bytes(e.switch_pm.encode())
	}
	if e.flags&(1<<4) != 0 {
		x.Bytes(e.switch_webview.encode())
	}
	return x.buf
}

func (e TL_messages_sendInlineBotResult) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_sendInlineBotResult)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.reply_to.encode())
	}
	x.Long(e.random_id)
	x.Long(e.query_id)
	x.String(e.id)
	if e.flags&(1<<10) != 0 {
		x.Int(e.schedule_date)
	}
	if e.flags&(1<<13) != 0 {
		x.Bytes(e.send_as.encode())
	}
	return x.buf
}

func (e TL_channels_exportMessageLink) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_exportMessageLink)
	x.Int(e.flags)
	x.Bytes(e.channel.encode())
	x.Int(e.id)
	return x.buf
}

func (e TL_channels_toggleSignatures) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_toggleSignatures)
	x.Bytes(e.channel.encode())
	x.Bytes(e.enabled.encode())
	return x.buf
}

func (e TL_auth_resendCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_resendCode)
	x.String(e.phone_number)
	x.String(e.phone_code_hash)
	return x.buf
}

func (e TL_auth_cancelCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_cancelCode)
	x.String(e.phone_number)
	x.String(e.phone_code_hash)
	return x.buf
}

func (e TL_messages_getMessageEditData) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getMessageEditData)
	x.Bytes(e.peer.encode())
	x.Int(e.id)
	return x.buf
}

func (e TL_messages_editMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_editMessage)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	x.Int(e.id)
	if e.flags&(1<<11) != 0 {
		x.String(e.message)
	}
	if e.flags&(1<<14) != 0 {
		x.Bytes(e.media.encode())
	}
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.reply_markup.encode())
	}
	if e.flags&(1<<3) != 0 {
		x.Vector(e.entities)
	}
	if e.flags&(1<<15) != 0 {
		x.Int(e.schedule_date)
	}
	return x.buf
}

func (e TL_messages_editInlineBotMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_editInlineBotMessage)
	x.Int(e.flags)
	x.Bytes(e.id.encode())
	if e.flags&(1<<11) != 0 {
		x.String(e.message)
	}
	if e.flags&(1<<14) != 0 {
		x.Bytes(e.media.encode())
	}
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.reply_markup.encode())
	}
	if e.flags&(1<<3) != 0 {
		x.Vector(e.entities)
	}
	return x.buf
}

func (e TL_messages_getBotCallbackAnswer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getBotCallbackAnswer)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	x.Int(e.msg_id)
	if e.flags&(1<<0) != 0 {
		x.StringBytes(e.data)
	}
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.password.encode())
	}
	return x.buf
}

func (e TL_messages_setBotCallbackAnswer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_setBotCallbackAnswer)
	x.Int(e.flags)
	x.Long(e.query_id)
	if e.flags&(1<<0) != 0 {
		x.String(e.message)
	}
	if e.flags&(1<<2) != 0 {
		x.String(e.url)
	}
	x.Int(e.cache_time)
	return x.buf
}

func (e TL_contacts_getTopPeers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_contacts_getTopPeers)
	x.Int(e.flags)
	x.Int(e.offset)
	x.Int(e.limit)
	x.Long(e.hash)
	return x.buf
}

func (e TL_contacts_resetTopPeerRating) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_contacts_resetTopPeerRating)
	x.Bytes(e.category.encode())
	x.Bytes(e.peer.encode())
	return x.buf
}

func (e TL_messages_getPeerDialogs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getPeerDialogs)
	x.Vector(e.peers)
	return x.buf
}

func (e TL_messages_saveDraft) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_saveDraft)
	x.Int(e.flags)
	if e.flags&(1<<4) != 0 {
		x.Bytes(e.reply_to.encode())
	}
	x.Bytes(e.peer.encode())
	x.String(e.message)
	if e.flags&(1<<3) != 0 {
		x.Vector(e.entities)
	}
	if e.flags&(1<<5) != 0 {
		x.Bytes(e.media.encode())
	}
	return x.buf
}

func (e TL_messages_getAllDrafts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getAllDrafts)
	return x.buf
}

func (e TL_messages_getFeaturedStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getFeaturedStickers)
	x.Long(e.hash)
	return x.buf
}

func (e TL_messages_readFeaturedStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_readFeaturedStickers)
	x.VectorLong(e.id)
	return x.buf
}

func (e TL_messages_getRecentStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getRecentStickers)
	x.Int(e.flags)
	x.Long(e.hash)
	return x.buf
}

func (e TL_messages_saveRecentSticker) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_saveRecentSticker)
	x.Int(e.flags)
	x.Bytes(e.id.encode())
	x.Bytes(e.unsave.encode())
	return x.buf
}

func (e TL_messages_clearRecentStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_clearRecentStickers)
	x.Int(e.flags)
	return x.buf
}

func (e TL_messages_getArchivedStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getArchivedStickers)
	x.Int(e.flags)
	x.Long(e.offset_id)
	x.Int(e.limit)
	return x.buf
}

func (e TL_account_sendConfirmPhoneCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_sendConfirmPhoneCode)
	x.String(e.hash)
	x.Bytes(e.settings.encode())
	return x.buf
}

func (e TL_account_confirmPhone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_confirmPhone)
	x.String(e.phone_code_hash)
	x.String(e.phone_code)
	return x.buf
}

func (e TL_channels_getAdminedPublicChannels) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_getAdminedPublicChannels)
	x.Int(e.flags)
	return x.buf
}

func (e TL_messages_getMaskStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getMaskStickers)
	x.Long(e.hash)
	return x.buf
}

func (e TL_messages_getAttachedStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getAttachedStickers)
	x.Bytes(e.media.encode())
	return x.buf
}

func (e TL_auth_dropTempAuthKeys) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_dropTempAuthKeys)
	x.VectorLong(e.except_auth_keys)
	return x.buf
}

func (e TL_messages_setGameScore) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_setGameScore)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	x.Int(e.id)
	x.Bytes(e.user_id.encode())
	x.Int(e.score)
	return x.buf
}

func (e TL_messages_setInlineGameScore) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_setInlineGameScore)
	x.Int(e.flags)
	x.Bytes(e.id.encode())
	x.Bytes(e.user_id.encode())
	x.Int(e.score)
	return x.buf
}

func (e TL_messages_getGameHighScores) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getGameHighScores)
	x.Bytes(e.peer.encode())
	x.Int(e.id)
	x.Bytes(e.user_id.encode())
	return x.buf
}

func (e TL_messages_getInlineGameHighScores) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getInlineGameHighScores)
	x.Bytes(e.id.encode())
	x.Bytes(e.user_id.encode())
	return x.buf
}

func (e TL_messages_getCommonChats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getCommonChats)
	x.Bytes(e.user_id.encode())
	x.Long(e.max_id)
	x.Int(e.limit)
	return x.buf
}

func (e TL_help_setBotUpdatesStatus) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_setBotUpdatesStatus)
	x.Int(e.pending_updates_count)
	x.String(e.message)
	return x.buf
}

func (e TL_messages_getWebPage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getWebPage)
	x.String(e.url)
	x.Int(e.hash)
	return x.buf
}

func (e TL_messages_toggleDialogPin) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_toggleDialogPin)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	return x.buf
}

func (e TL_messages_reorderPinnedDialogs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_reorderPinnedDialogs)
	x.Int(e.flags)
	x.Int(e.folder_id)
	x.Vector(e.order)
	return x.buf
}

func (e TL_messages_getPinnedDialogs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getPinnedDialogs)
	x.Int(e.folder_id)
	return x.buf
}

func (e TL_bots_sendCustomRequest) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_bots_sendCustomRequest)
	x.String(e.custom_method)
	x.Bytes(e.params.encode())
	return x.buf
}

func (e TL_bots_answerWebhookJSONQuery) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_bots_answerWebhookJSONQuery)
	x.Long(e.query_id)
	x.Bytes(e.data.encode())
	return x.buf
}

func (e TL_upload_getWebFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_upload_getWebFile)
	x.Bytes(e.location.encode())
	x.Int(e.offset)
	x.Int(e.limit)
	return x.buf
}

func (e TL_payments_getPaymentForm) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_payments_getPaymentForm)
	x.Int(e.flags)
	x.Bytes(e.invoice.encode())
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.theme_params.encode())
	}
	return x.buf
}

func (e TL_payments_getPaymentReceipt) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_payments_getPaymentReceipt)
	x.Bytes(e.peer.encode())
	x.Int(e.msg_id)
	return x.buf
}

func (e TL_payments_validateRequestedInfo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_payments_validateRequestedInfo)
	x.Int(e.flags)
	x.Bytes(e.invoice.encode())
	x.Bytes(e.info.encode())
	return x.buf
}

func (e TL_payments_sendPaymentForm) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_payments_sendPaymentForm)
	x.Int(e.flags)
	x.Long(e.form_id)
	x.Bytes(e.invoice.encode())
	if e.flags&(1<<0) != 0 {
		x.String(e.requested_info_id)
	}
	if e.flags&(1<<1) != 0 {
		x.String(e.shipping_option_id)
	}
	x.Bytes(e.credentials.encode())
	if e.flags&(1<<2) != 0 {
		x.Long(e.tip_amount)
	}
	return x.buf
}

func (e TL_account_getTmpPassword) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_getTmpPassword)
	x.Bytes(e.password.encode())
	x.Int(e.period)
	return x.buf
}

func (e TL_payments_getSavedInfo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_payments_getSavedInfo)
	return x.buf
}

func (e TL_payments_clearSavedInfo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_payments_clearSavedInfo)
	x.Int(e.flags)
	return x.buf
}

func (e TL_messages_setBotShippingResults) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_setBotShippingResults)
	x.Int(e.flags)
	x.Long(e.query_id)
	if e.flags&(1<<0) != 0 {
		x.String(e.error)
	}
	if e.flags&(1<<1) != 0 {
		x.Vector(e.shipping_options)
	}
	return x.buf
}

func (e TL_messages_setBotPrecheckoutResults) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_setBotPrecheckoutResults)
	x.Int(e.flags)
	x.Long(e.query_id)
	if e.flags&(1<<0) != 0 {
		x.String(e.error)
	}
	return x.buf
}

func (e TL_stickers_createStickerSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stickers_createStickerSet)
	x.Int(e.flags)
	x.Bytes(e.user_id.encode())
	x.String(e.title)
	x.String(e.short_name)
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.thumb.encode())
	}
	x.Vector(e.stickers)
	if e.flags&(1<<3) != 0 {
		x.String(e.software)
	}
	return x.buf
}

func (e TL_stickers_removeStickerFromSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stickers_removeStickerFromSet)
	x.Bytes(e.sticker.encode())
	return x.buf
}

func (e TL_stickers_changeStickerPosition) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stickers_changeStickerPosition)
	x.Bytes(e.sticker.encode())
	x.Int(e.position)
	return x.buf
}

func (e TL_stickers_addStickerToSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stickers_addStickerToSet)
	x.Bytes(e.stickerset.encode())
	x.Bytes(e.sticker.encode())
	return x.buf
}

func (e TL_messages_uploadMedia) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_uploadMedia)
	x.Bytes(e.peer.encode())
	x.Bytes(e.media.encode())
	return x.buf
}

func (e TL_phone_getCallConfig) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phone_getCallConfig)
	return x.buf
}

func (e TL_phone_requestCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phone_requestCall)
	x.Int(e.flags)
	x.Bytes(e.user_id.encode())
	x.Int(e.random_id)
	x.StringBytes(e.g_a_hash)
	x.Bytes(e.protocol.encode())
	return x.buf
}

func (e TL_phone_acceptCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phone_acceptCall)
	x.Bytes(e.peer.encode())
	x.StringBytes(e.g_b)
	x.Bytes(e.protocol.encode())
	return x.buf
}

func (e TL_phone_confirmCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phone_confirmCall)
	x.Bytes(e.peer.encode())
	x.StringBytes(e.g_a)
	x.Long(e.key_fingerprint)
	x.Bytes(e.protocol.encode())
	return x.buf
}

func (e TL_phone_receivedCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phone_receivedCall)
	x.Bytes(e.peer.encode())
	return x.buf
}

func (e TL_phone_discardCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phone_discardCall)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	x.Int(e.duration)
	x.Bytes(e.reason.encode())
	x.Long(e.connection_id)
	return x.buf
}

func (e TL_phone_setCallRating) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phone_setCallRating)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	x.Int(e.rating)
	x.String(e.comment)
	return x.buf
}

func (e TL_phone_saveCallDebug) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phone_saveCallDebug)
	x.Bytes(e.peer.encode())
	x.Bytes(e.debug.encode())
	return x.buf
}

func (e TL_upload_getCdnFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_upload_getCdnFile)
	x.StringBytes(e.file_token)
	x.Long(e.offset)
	x.Int(e.limit)
	return x.buf
}

func (e TL_upload_reuploadCdnFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_upload_reuploadCdnFile)
	x.StringBytes(e.file_token)
	x.StringBytes(e.request_token)
	return x.buf
}

func (e TL_help_getCdnConfig) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_getCdnConfig)
	return x.buf
}

func (e TL_langpack_getLangPack) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_langpack_getLangPack)
	x.String(e.lang_pack)
	x.String(e.lang_code)
	return x.buf
}

func (e TL_langpack_getStrings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_langpack_getStrings)
	x.String(e.lang_pack)
	x.String(e.lang_code)
	x.VectorString(e.keys)
	return x.buf
}

func (e TL_langpack_getDifference) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_langpack_getDifference)
	x.String(e.lang_pack)
	x.String(e.lang_code)
	x.Int(e.from_version)
	return x.buf
}

func (e TL_langpack_getLanguages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_langpack_getLanguages)
	x.String(e.lang_pack)
	return x.buf
}

func (e TL_channels_editBanned) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_editBanned)
	x.Bytes(e.channel.encode())
	x.Bytes(e.participant.encode())
	x.Bytes(e.banned_rights.encode())
	return x.buf
}

func (e TL_channels_getAdminLog) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_getAdminLog)
	x.Int(e.flags)
	x.Bytes(e.channel.encode())
	x.String(e.q)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.events_filter.encode())
	}
	if e.flags&(1<<1) != 0 {
		x.Vector(e.admins)
	}
	x.Long(e.max_id)
	x.Long(e.min_id)
	x.Int(e.limit)
	return x.buf
}

func (e TL_upload_getCdnFileHashes) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_upload_getCdnFileHashes)
	x.StringBytes(e.file_token)
	x.Long(e.offset)
	return x.buf
}

func (e TL_messages_sendScreenshotNotification) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_sendScreenshotNotification)
	x.Bytes(e.peer.encode())
	x.Bytes(e.reply_to.encode())
	x.Long(e.random_id)
	return x.buf
}

func (e TL_channels_setStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_setStickers)
	x.Bytes(e.channel.encode())
	x.Bytes(e.stickerset.encode())
	return x.buf
}

func (e TL_messages_getFavedStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getFavedStickers)
	x.Long(e.hash)
	return x.buf
}

func (e TL_messages_faveSticker) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_faveSticker)
	x.Bytes(e.id.encode())
	x.Bytes(e.unfave.encode())
	return x.buf
}

func (e TL_channels_readMessageContents) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_readMessageContents)
	x.Bytes(e.channel.encode())
	x.VectorInt(e.id)
	return x.buf
}

func (e TL_contacts_resetSaved) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_contacts_resetSaved)
	return x.buf
}

func (e TL_messages_getUnreadMentions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getUnreadMentions)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	if e.flags&(1<<0) != 0 {
		x.Int(e.top_msg_id)
	}
	x.Int(e.offset_id)
	x.Int(e.add_offset)
	x.Int(e.limit)
	x.Int(e.max_id)
	x.Int(e.min_id)
	return x.buf
}

func (e TL_channels_deleteHistory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_deleteHistory)
	x.Int(e.flags)
	x.Bytes(e.channel.encode())
	x.Int(e.max_id)
	return x.buf
}

func (e TL_help_getRecentMeUrls) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_getRecentMeUrls)
	x.String(e.referer)
	return x.buf
}

func (e TL_channels_togglePreHistoryHidden) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_togglePreHistoryHidden)
	x.Bytes(e.channel.encode())
	x.Bytes(e.enabled.encode())
	return x.buf
}

func (e TL_messages_readMentions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_readMentions)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	if e.flags&(1<<0) != 0 {
		x.Int(e.top_msg_id)
	}
	return x.buf
}

func (e TL_messages_getRecentLocations) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getRecentLocations)
	x.Bytes(e.peer.encode())
	x.Int(e.limit)
	x.Long(e.hash)
	return x.buf
}

func (e TL_messages_sendMultiMedia) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_sendMultiMedia)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.reply_to.encode())
	}
	x.Vector(e.multi_media)
	if e.flags&(1<<10) != 0 {
		x.Int(e.schedule_date)
	}
	if e.flags&(1<<13) != 0 {
		x.Bytes(e.send_as.encode())
	}
	return x.buf
}

func (e TL_messages_uploadEncryptedFile) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_uploadEncryptedFile)
	x.Bytes(e.peer.encode())
	x.Bytes(e.file.encode())
	return x.buf
}

func (e TL_account_getWebAuthorizations) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_getWebAuthorizations)
	return x.buf
}

func (e TL_account_resetWebAuthorization) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_resetWebAuthorization)
	x.Long(e.hash)
	return x.buf
}

func (e TL_account_resetWebAuthorizations) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_resetWebAuthorizations)
	return x.buf
}

func (e TL_messages_searchStickerSets) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_searchStickerSets)
	x.Int(e.flags)
	x.String(e.q)
	x.Long(e.hash)
	return x.buf
}

func (e TL_upload_getFileHashes) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_upload_getFileHashes)
	x.Bytes(e.location.encode())
	x.Long(e.offset)
	return x.buf
}

func (e TL_help_getTermsOfServiceUpdate) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_getTermsOfServiceUpdate)
	return x.buf
}

func (e TL_help_acceptTermsOfService) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_acceptTermsOfService)
	x.Bytes(e.id.encode())
	return x.buf
}

func (e TL_account_getAllSecureValues) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_getAllSecureValues)
	return x.buf
}

func (e TL_account_getSecureValue) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_getSecureValue)
	x.Vector(e.types)
	return x.buf
}

func (e TL_account_saveSecureValue) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_saveSecureValue)
	x.Bytes(e.value.encode())
	x.Long(e.secure_secret_id)
	return x.buf
}

func (e TL_account_deleteSecureValue) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_deleteSecureValue)
	x.Vector(e.types)
	return x.buf
}

func (e TL_users_setSecureValueErrors) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_users_setSecureValueErrors)
	x.Bytes(e.id.encode())
	x.Vector(e.errors)
	return x.buf
}

func (e TL_account_getAuthorizationForm) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_getAuthorizationForm)
	x.Long(e.bot_id)
	x.String(e.scope)
	x.String(e.public_key)
	return x.buf
}

func (e TL_account_acceptAuthorization) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_acceptAuthorization)
	x.Long(e.bot_id)
	x.String(e.scope)
	x.String(e.public_key)
	x.Vector(e.value_hashes)
	x.Bytes(e.credentials.encode())
	return x.buf
}

func (e TL_account_sendVerifyPhoneCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_sendVerifyPhoneCode)
	x.String(e.phone_number)
	x.Bytes(e.settings.encode())
	return x.buf
}

func (e TL_account_verifyPhone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_verifyPhone)
	x.String(e.phone_number)
	x.String(e.phone_code_hash)
	x.String(e.phone_code)
	return x.buf
}

func (e TL_account_sendVerifyEmailCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_sendVerifyEmailCode)
	x.Bytes(e.purpose.encode())
	x.String(e.email)
	return x.buf
}

func (e TL_account_verifyEmail) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_verifyEmail)
	x.Bytes(e.purpose.encode())
	x.Bytes(e.verification.encode())
	return x.buf
}

func (e TL_help_getDeepLinkInfo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_getDeepLinkInfo)
	x.String(e.path)
	return x.buf
}

func (e TL_contacts_getSaved) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_contacts_getSaved)
	return x.buf
}

func (e TL_channels_getLeftChannels) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_getLeftChannels)
	x.Int(e.offset)
	return x.buf
}

func (e TL_account_initTakeoutSession) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_initTakeoutSession)
	x.Int(e.flags)
	if e.flags&(1<<5) != 0 {
		x.Long(e.file_max_size)
	}
	return x.buf
}

func (e TL_account_finishTakeoutSession) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_finishTakeoutSession)
	x.Int(e.flags)
	return x.buf
}

func (e TL_messages_getSplitRanges) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getSplitRanges)
	return x.buf
}

func (e TL_invokeWithMessagesRange) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_invokeWithMessagesRange)
	x.Bytes(e._range.encode())
	x.Bytes(e.query.encode())
	return x.buf
}

func (e TL_invokeWithTakeout) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_invokeWithTakeout)
	x.Long(e.takeout_id)
	x.Bytes(e.query.encode())
	return x.buf
}

func (e TL_messages_markDialogUnread) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_markDialogUnread)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	return x.buf
}

func (e TL_messages_getDialogUnreadMarks) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getDialogUnreadMarks)
	return x.buf
}

func (e TL_contacts_toggleTopPeers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_contacts_toggleTopPeers)
	x.Bytes(e.enabled.encode())
	return x.buf
}

func (e TL_messages_clearAllDrafts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_clearAllDrafts)
	return x.buf
}

func (e TL_help_getAppConfig) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_getAppConfig)
	x.Int(e.hash)
	return x.buf
}

func (e TL_help_saveAppLog) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_saveAppLog)
	x.Vector(e.events)
	return x.buf
}

func (e TL_help_getPassportConfig) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_getPassportConfig)
	x.Int(e.hash)
	return x.buf
}

func (e TL_langpack_getLanguage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_langpack_getLanguage)
	x.String(e.lang_pack)
	x.String(e.lang_code)
	return x.buf
}

func (e TL_messages_updatePinnedMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_updatePinnedMessage)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	x.Int(e.id)
	return x.buf
}

func (e TL_account_confirmPasswordEmail) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_confirmPasswordEmail)
	x.String(e.code)
	return x.buf
}

func (e TL_account_resendPasswordEmail) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_resendPasswordEmail)
	return x.buf
}

func (e TL_account_cancelPasswordEmail) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_cancelPasswordEmail)
	return x.buf
}

func (e TL_help_getSupportName) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_getSupportName)
	return x.buf
}

func (e TL_help_getUserInfo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_getUserInfo)
	x.Bytes(e.user_id.encode())
	return x.buf
}

func (e TL_help_editUserInfo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_editUserInfo)
	x.Bytes(e.user_id.encode())
	x.String(e.message)
	x.Vector(e.entities)
	return x.buf
}

func (e TL_account_getContactSignUpNotification) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_getContactSignUpNotification)
	return x.buf
}

func (e TL_account_setContactSignUpNotification) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_setContactSignUpNotification)
	x.Bytes(e.silent.encode())
	return x.buf
}

func (e TL_account_getNotifyExceptions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_getNotifyExceptions)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.peer.encode())
	}
	return x.buf
}

func (e TL_messages_sendVote) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_sendVote)
	x.Bytes(e.peer.encode())
	x.Int(e.msg_id)
	x.Vector(e.options)
	return x.buf
}

func (e TL_messages_getPollResults) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getPollResults)
	x.Bytes(e.peer.encode())
	x.Int(e.msg_id)
	return x.buf
}

func (e TL_messages_getOnlines) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getOnlines)
	x.Bytes(e.peer.encode())
	return x.buf
}

func (e TL_messages_editChatAbout) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_editChatAbout)
	x.Bytes(e.peer.encode())
	x.String(e.about)
	return x.buf
}

func (e TL_messages_editChatDefaultBannedRights) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_editChatDefaultBannedRights)
	x.Bytes(e.peer.encode())
	x.Bytes(e.banned_rights.encode())
	return x.buf
}

func (e TL_account_getWallPaper) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_getWallPaper)
	x.Bytes(e.wallpaper.encode())
	return x.buf
}

func (e TL_account_uploadWallPaper) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_uploadWallPaper)
	x.Int(e.flags)
	x.Bytes(e.file.encode())
	x.String(e.mime_type)
	x.Bytes(e.settings.encode())
	return x.buf
}

func (e TL_account_saveWallPaper) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_saveWallPaper)
	x.Bytes(e.wallpaper.encode())
	x.Bytes(e.unsave.encode())
	x.Bytes(e.settings.encode())
	return x.buf
}

func (e TL_account_installWallPaper) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_installWallPaper)
	x.Bytes(e.wallpaper.encode())
	x.Bytes(e.settings.encode())
	return x.buf
}

func (e TL_account_resetWallPapers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_resetWallPapers)
	return x.buf
}

func (e TL_account_getAutoDownloadSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_getAutoDownloadSettings)
	return x.buf
}

func (e TL_account_saveAutoDownloadSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_saveAutoDownloadSettings)
	x.Int(e.flags)
	x.Bytes(e.settings.encode())
	return x.buf
}

func (e TL_messages_getEmojiKeywords) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getEmojiKeywords)
	x.String(e.lang_code)
	return x.buf
}

func (e TL_messages_getEmojiKeywordsDifference) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getEmojiKeywordsDifference)
	x.String(e.lang_code)
	x.Int(e.from_version)
	return x.buf
}

func (e TL_messages_getEmojiKeywordsLanguages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getEmojiKeywordsLanguages)
	x.VectorString(e.lang_codes)
	return x.buf
}

func (e TL_messages_getEmojiURL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getEmojiURL)
	x.String(e.lang_code)
	return x.buf
}

func (e TL_folders_editPeerFolders) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_folders_editPeerFolders)
	x.Vector(e.folder_peers)
	return x.buf
}

func (e TL_messages_getSearchCounters) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getSearchCounters)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.saved_peer_id.encode())
	}
	if e.flags&(1<<0) != 0 {
		x.Int(e.top_msg_id)
	}
	x.Vector(e.filters)
	return x.buf
}

func (e TL_channels_getGroupsForDiscussion) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_getGroupsForDiscussion)
	return x.buf
}

func (e TL_channels_setDiscussionGroup) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_setDiscussionGroup)
	x.Bytes(e.broadcast.encode())
	x.Bytes(e.group.encode())
	return x.buf
}

func (e TL_messages_requestUrlAuth) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_requestUrlAuth)
	x.Int(e.flags)
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.peer.encode())
	}
	if e.flags&(1<<1) != 0 {
		x.Int(e.msg_id)
	}
	if e.flags&(1<<1) != 0 {
		x.Int(e.button_id)
	}
	if e.flags&(1<<2) != 0 {
		x.String(e.url)
	}
	return x.buf
}

func (e TL_messages_acceptUrlAuth) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_acceptUrlAuth)
	x.Int(e.flags)
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.peer.encode())
	}
	if e.flags&(1<<1) != 0 {
		x.Int(e.msg_id)
	}
	if e.flags&(1<<1) != 0 {
		x.Int(e.button_id)
	}
	if e.flags&(1<<2) != 0 {
		x.String(e.url)
	}
	return x.buf
}

func (e TL_messages_hidePeerSettingsBar) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_hidePeerSettingsBar)
	x.Bytes(e.peer.encode())
	return x.buf
}

func (e TL_contacts_addContact) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_contacts_addContact)
	x.Int(e.flags)
	x.Bytes(e.id.encode())
	x.String(e.first_name)
	x.String(e.last_name)
	x.String(e.phone)
	return x.buf
}

func (e TL_contacts_acceptContact) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_contacts_acceptContact)
	x.Bytes(e.id.encode())
	return x.buf
}

func (e TL_channels_editCreator) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_editCreator)
	x.Bytes(e.channel.encode())
	x.Bytes(e.user_id.encode())
	x.Bytes(e.password.encode())
	return x.buf
}

func (e TL_contacts_getLocated) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_contacts_getLocated)
	x.Int(e.flags)
	x.Bytes(e.geo_point.encode())
	if e.flags&(1<<0) != 0 {
		x.Int(e.self_expires)
	}
	return x.buf
}

func (e TL_channels_editLocation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_editLocation)
	x.Bytes(e.channel.encode())
	x.Bytes(e.geo_point.encode())
	x.String(e.address)
	return x.buf
}

func (e TL_channels_toggleSlowMode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_toggleSlowMode)
	x.Bytes(e.channel.encode())
	x.Int(e.seconds)
	return x.buf
}

func (e TL_messages_getScheduledHistory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getScheduledHistory)
	x.Bytes(e.peer.encode())
	x.Long(e.hash)
	return x.buf
}

func (e TL_messages_getScheduledMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getScheduledMessages)
	x.Bytes(e.peer.encode())
	x.VectorInt(e.id)
	return x.buf
}

func (e TL_messages_sendScheduledMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_sendScheduledMessages)
	x.Bytes(e.peer.encode())
	x.VectorInt(e.id)
	return x.buf
}

func (e TL_messages_deleteScheduledMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_deleteScheduledMessages)
	x.Bytes(e.peer.encode())
	x.VectorInt(e.id)
	return x.buf
}

func (e TL_account_uploadTheme) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_uploadTheme)
	x.Int(e.flags)
	x.Bytes(e.file.encode())
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.thumb.encode())
	}
	x.String(e.file_name)
	x.String(e.mime_type)
	return x.buf
}

func (e TL_account_createTheme) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_createTheme)
	x.Int(e.flags)
	x.String(e.slug)
	x.String(e.title)
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.document.encode())
	}
	if e.flags&(1<<3) != 0 {
		x.Vector(e.settings)
	}
	return x.buf
}

func (e TL_account_updateTheme) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_updateTheme)
	x.Int(e.flags)
	x.String(e.format)
	x.Bytes(e.theme.encode())
	if e.flags&(1<<0) != 0 {
		x.String(e.slug)
	}
	if e.flags&(1<<1) != 0 {
		x.String(e.title)
	}
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.document.encode())
	}
	if e.flags&(1<<3) != 0 {
		x.Vector(e.settings)
	}
	return x.buf
}

func (e TL_account_saveTheme) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_saveTheme)
	x.Bytes(e.theme.encode())
	x.Bytes(e.unsave.encode())
	return x.buf
}

func (e TL_account_installTheme) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_installTheme)
	x.Int(e.flags)
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.theme.encode())
	}
	if e.flags&(1<<2) != 0 {
		x.String(e.format)
	}
	if e.flags&(1<<3) != 0 {
		x.Bytes(e.base_theme.encode())
	}
	return x.buf
}

func (e TL_account_getTheme) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_getTheme)
	x.String(e.format)
	x.Bytes(e.theme.encode())
	return x.buf
}

func (e TL_account_getThemes) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_getThemes)
	x.String(e.format)
	x.Long(e.hash)
	return x.buf
}

func (e TL_auth_exportLoginToken) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_exportLoginToken)
	x.Int(e.api_id)
	x.String(e.api_hash)
	x.VectorLong(e.except_ids)
	return x.buf
}

func (e TL_auth_importLoginToken) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_importLoginToken)
	x.StringBytes(e.token)
	return x.buf
}

func (e TL_auth_acceptLoginToken) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_acceptLoginToken)
	x.StringBytes(e.token)
	return x.buf
}

func (e TL_account_setContentSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_setContentSettings)
	x.Int(e.flags)
	return x.buf
}

func (e TL_account_getContentSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_getContentSettings)
	return x.buf
}

func (e TL_channels_getInactiveChannels) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_getInactiveChannels)
	return x.buf
}

func (e TL_account_getMultiWallPapers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_getMultiWallPapers)
	x.Vector(e.wallpapers)
	return x.buf
}

func (e TL_messages_getPollVotes) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getPollVotes)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	x.Int(e.id)
	if e.flags&(1<<0) != 0 {
		x.StringBytes(e.option)
	}
	if e.flags&(1<<1) != 0 {
		x.String(e.offset)
	}
	x.Int(e.limit)
	return x.buf
}

func (e TL_messages_toggleStickerSets) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_toggleStickerSets)
	x.Int(e.flags)
	x.Vector(e.stickersets)
	return x.buf
}

func (e TL_payments_getBankCardData) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_payments_getBankCardData)
	x.String(e.number)
	return x.buf
}

func (e TL_messages_getDialogFilters) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getDialogFilters)
	return x.buf
}

func (e TL_messages_getSuggestedDialogFilters) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getSuggestedDialogFilters)
	return x.buf
}

func (e TL_messages_updateDialogFilter) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_updateDialogFilter)
	x.Int(e.flags)
	x.Int(e.id)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.filter.encode())
	}
	return x.buf
}

func (e TL_messages_updateDialogFiltersOrder) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_updateDialogFiltersOrder)
	x.VectorInt(e.order)
	return x.buf
}

func (e TL_stats_getBroadcastStats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stats_getBroadcastStats)
	x.Int(e.flags)
	x.Bytes(e.channel.encode())
	return x.buf
}

func (e TL_stats_loadAsyncGraph) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stats_loadAsyncGraph)
	x.Int(e.flags)
	x.String(e.token)
	if e.flags&(1<<0) != 0 {
		x.Long(e.x)
	}
	return x.buf
}

func (e TL_stickers_setStickerSetThumb) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stickers_setStickerSetThumb)
	x.Int(e.flags)
	x.Bytes(e.stickerset.encode())
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.thumb.encode())
	}
	if e.flags&(1<<1) != 0 {
		x.Long(e.thumb_document_id)
	}
	return x.buf
}

func (e TL_bots_setBotCommands) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_bots_setBotCommands)
	x.Bytes(e.scope.encode())
	x.String(e.lang_code)
	x.Vector(e.commands)
	return x.buf
}

func (e TL_messages_getOldFeaturedStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getOldFeaturedStickers)
	x.Int(e.offset)
	x.Int(e.limit)
	x.Long(e.hash)
	return x.buf
}

func (e TL_help_getPromoData) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_getPromoData)
	return x.buf
}

func (e TL_help_hidePromoData) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_hidePromoData)
	x.Bytes(e.peer.encode())
	return x.buf
}

func (e TL_phone_sendSignalingData) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phone_sendSignalingData)
	x.Bytes(e.peer.encode())
	x.StringBytes(e.data)
	return x.buf
}

func (e TL_stats_getMegagroupStats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stats_getMegagroupStats)
	x.Int(e.flags)
	x.Bytes(e.channel.encode())
	return x.buf
}

func (e TL_account_getGlobalPrivacySettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_getGlobalPrivacySettings)
	return x.buf
}

func (e TL_account_setGlobalPrivacySettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_setGlobalPrivacySettings)
	x.Bytes(e.settings.encode())
	return x.buf
}

func (e TL_help_dismissSuggestion) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_dismissSuggestion)
	x.Bytes(e.peer.encode())
	x.String(e.suggestion)
	return x.buf
}

func (e TL_help_getCountriesList) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_getCountriesList)
	x.String(e.lang_code)
	x.Int(e.hash)
	return x.buf
}

func (e TL_messages_getReplies) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getReplies)
	x.Bytes(e.peer.encode())
	x.Int(e.msg_id)
	x.Int(e.offset_id)
	x.Int(e.offset_date)
	x.Int(e.add_offset)
	x.Int(e.limit)
	x.Int(e.max_id)
	x.Int(e.min_id)
	x.Long(e.hash)
	return x.buf
}

func (e TL_messages_getDiscussionMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getDiscussionMessage)
	x.Bytes(e.peer.encode())
	x.Int(e.msg_id)
	return x.buf
}

func (e TL_messages_readDiscussion) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_readDiscussion)
	x.Bytes(e.peer.encode())
	x.Int(e.msg_id)
	x.Int(e.read_max_id)
	return x.buf
}

func (e TL_contacts_blockFromReplies) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_contacts_blockFromReplies)
	x.Int(e.flags)
	x.Int(e.msg_id)
	return x.buf
}

func (e TL_stats_getMessagePublicForwards) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stats_getMessagePublicForwards)
	x.Bytes(e.channel.encode())
	x.Int(e.msg_id)
	x.String(e.offset)
	x.Int(e.limit)
	return x.buf
}

func (e TL_stats_getMessageStats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stats_getMessageStats)
	x.Int(e.flags)
	x.Bytes(e.channel.encode())
	x.Int(e.msg_id)
	return x.buf
}

func (e TL_messages_unpinAllMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_unpinAllMessages)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	if e.flags&(1<<0) != 0 {
		x.Int(e.top_msg_id)
	}
	return x.buf
}

func (e TL_phone_createGroupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phone_createGroupCall)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	x.Int(e.random_id)
	if e.flags&(1<<0) != 0 {
		x.String(e.title)
	}
	if e.flags&(1<<1) != 0 {
		x.Int(e.schedule_date)
	}
	return x.buf
}

func (e TL_phone_joinGroupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phone_joinGroupCall)
	x.Int(e.flags)
	x.Bytes(e.call.encode())
	x.Bytes(e.join_as.encode())
	if e.flags&(1<<1) != 0 {
		x.String(e.invite_hash)
	}
	x.Bytes(e.params.encode())
	return x.buf
}

func (e TL_phone_leaveGroupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phone_leaveGroupCall)
	x.Bytes(e.call.encode())
	x.Int(e.source)
	return x.buf
}

func (e TL_phone_inviteToGroupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phone_inviteToGroupCall)
	x.Bytes(e.call.encode())
	x.Vector(e.users)
	return x.buf
}

func (e TL_phone_discardGroupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phone_discardGroupCall)
	x.Bytes(e.call.encode())
	return x.buf
}

func (e TL_phone_toggleGroupCallSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phone_toggleGroupCallSettings)
	x.Int(e.flags)
	x.Bytes(e.call.encode())
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.join_muted.encode())
	}
	return x.buf
}

func (e TL_phone_getGroupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phone_getGroupCall)
	x.Bytes(e.call.encode())
	x.Int(e.limit)
	return x.buf
}

func (e TL_phone_getGroupParticipants) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phone_getGroupParticipants)
	x.Bytes(e.call.encode())
	x.Vector(e.ids)
	x.VectorInt(e.sources)
	x.String(e.offset)
	x.Int(e.limit)
	return x.buf
}

func (e TL_phone_checkGroupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phone_checkGroupCall)
	x.Bytes(e.call.encode())
	x.VectorInt(e.sources)
	return x.buf
}

func (e TL_messages_deleteChat) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_deleteChat)
	x.Long(e.chat_id)
	return x.buf
}

func (e TL_messages_deletePhoneCallHistory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_deletePhoneCallHistory)
	x.Int(e.flags)
	return x.buf
}

func (e TL_messages_checkHistoryImport) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_checkHistoryImport)
	x.String(e.import_head)
	return x.buf
}

func (e TL_messages_initHistoryImport) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_initHistoryImport)
	x.Bytes(e.peer.encode())
	x.Bytes(e.file.encode())
	x.Int(e.media_count)
	return x.buf
}

func (e TL_messages_uploadImportedMedia) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_uploadImportedMedia)
	x.Bytes(e.peer.encode())
	x.Long(e.import_id)
	x.String(e.file_name)
	x.Bytes(e.media.encode())
	return x.buf
}

func (e TL_messages_startHistoryImport) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_startHistoryImport)
	x.Bytes(e.peer.encode())
	x.Long(e.import_id)
	return x.buf
}

func (e TL_messages_getExportedChatInvites) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getExportedChatInvites)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	x.Bytes(e.admin_id.encode())
	if e.flags&(1<<2) != 0 {
		x.Int(e.offset_date)
	}
	if e.flags&(1<<2) != 0 {
		x.String(e.offset_link)
	}
	x.Int(e.limit)
	return x.buf
}

func (e TL_messages_getExportedChatInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getExportedChatInvite)
	x.Bytes(e.peer.encode())
	x.String(e.link)
	return x.buf
}

func (e TL_messages_editExportedChatInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_editExportedChatInvite)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	x.String(e.link)
	if e.flags&(1<<0) != 0 {
		x.Int(e.expire_date)
	}
	if e.flags&(1<<1) != 0 {
		x.Int(e.usage_limit)
	}
	if e.flags&(1<<3) != 0 {
		x.Bytes(e.request_needed.encode())
	}
	if e.flags&(1<<4) != 0 {
		x.String(e.title)
	}
	return x.buf
}

func (e TL_messages_deleteRevokedExportedChatInvites) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_deleteRevokedExportedChatInvites)
	x.Bytes(e.peer.encode())
	x.Bytes(e.admin_id.encode())
	return x.buf
}

func (e TL_messages_deleteExportedChatInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_deleteExportedChatInvite)
	x.Bytes(e.peer.encode())
	x.String(e.link)
	return x.buf
}

func (e TL_messages_getAdminsWithInvites) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getAdminsWithInvites)
	x.Bytes(e.peer.encode())
	return x.buf
}

func (e TL_messages_getChatInviteImporters) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getChatInviteImporters)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	if e.flags&(1<<1) != 0 {
		x.String(e.link)
	}
	if e.flags&(1<<2) != 0 {
		x.String(e.q)
	}
	x.Int(e.offset_date)
	x.Bytes(e.offset_user.encode())
	x.Int(e.limit)
	return x.buf
}

func (e TL_messages_setHistoryTTL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_setHistoryTTL)
	x.Bytes(e.peer.encode())
	x.Int(e.period)
	return x.buf
}

func (e TL_account_reportProfilePhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_reportProfilePhoto)
	x.Bytes(e.peer.encode())
	x.Bytes(e.photo_id.encode())
	x.Bytes(e.reason.encode())
	x.String(e.message)
	return x.buf
}

func (e TL_channels_convertToGigagroup) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_convertToGigagroup)
	x.Bytes(e.channel.encode())
	return x.buf
}

func (e TL_messages_checkHistoryImportPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_checkHistoryImportPeer)
	x.Bytes(e.peer.encode())
	return x.buf
}

func (e TL_phone_toggleGroupCallRecord) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phone_toggleGroupCallRecord)
	x.Int(e.flags)
	x.Bytes(e.call.encode())
	if e.flags&(1<<1) != 0 {
		x.String(e.title)
	}
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.video_portrait.encode())
	}
	return x.buf
}

func (e TL_phone_editGroupCallParticipant) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phone_editGroupCallParticipant)
	x.Int(e.flags)
	x.Bytes(e.call.encode())
	x.Bytes(e.participant.encode())
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.muted.encode())
	}
	if e.flags&(1<<1) != 0 {
		x.Int(e.volume)
	}
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.raise_hand.encode())
	}
	if e.flags&(1<<3) != 0 {
		x.Bytes(e.video_stopped.encode())
	}
	if e.flags&(1<<4) != 0 {
		x.Bytes(e.video_paused.encode())
	}
	if e.flags&(1<<5) != 0 {
		x.Bytes(e.presentation_paused.encode())
	}
	return x.buf
}

func (e TL_phone_editGroupCallTitle) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phone_editGroupCallTitle)
	x.Bytes(e.call.encode())
	x.String(e.title)
	return x.buf
}

func (e TL_phone_getGroupCallJoinAs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phone_getGroupCallJoinAs)
	x.Bytes(e.peer.encode())
	return x.buf
}

func (e TL_phone_exportGroupCallInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phone_exportGroupCallInvite)
	x.Int(e.flags)
	x.Bytes(e.call.encode())
	return x.buf
}

func (e TL_phone_toggleGroupCallStartSubscription) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phone_toggleGroupCallStartSubscription)
	x.Bytes(e.call.encode())
	x.Bytes(e.subscribed.encode())
	return x.buf
}

func (e TL_phone_startScheduledGroupCall) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phone_startScheduledGroupCall)
	x.Bytes(e.call.encode())
	return x.buf
}

func (e TL_phone_saveDefaultGroupCallJoinAs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phone_saveDefaultGroupCallJoinAs)
	x.Bytes(e.peer.encode())
	x.Bytes(e.join_as.encode())
	return x.buf
}

func (e TL_phone_joinGroupCallPresentation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phone_joinGroupCallPresentation)
	x.Bytes(e.call.encode())
	x.Bytes(e.params.encode())
	return x.buf
}

func (e TL_phone_leaveGroupCallPresentation) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phone_leaveGroupCallPresentation)
	x.Bytes(e.call.encode())
	return x.buf
}

func (e TL_stickers_checkShortName) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stickers_checkShortName)
	x.String(e.short_name)
	return x.buf
}

func (e TL_stickers_suggestShortName) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stickers_suggestShortName)
	x.String(e.title)
	return x.buf
}

func (e TL_bots_resetBotCommands) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_bots_resetBotCommands)
	x.Bytes(e.scope.encode())
	x.String(e.lang_code)
	return x.buf
}

func (e TL_bots_getBotCommands) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_bots_getBotCommands)
	x.Bytes(e.scope.encode())
	x.String(e.lang_code)
	return x.buf
}

func (e TL_account_resetPassword) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_resetPassword)
	return x.buf
}

func (e TL_account_declinePasswordReset) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_declinePasswordReset)
	return x.buf
}

func (e TL_auth_checkRecoveryPassword) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_checkRecoveryPassword)
	x.String(e.code)
	return x.buf
}

func (e TL_account_getChatThemes) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_getChatThemes)
	x.Long(e.hash)
	return x.buf
}

func (e TL_messages_setChatTheme) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_setChatTheme)
	x.Bytes(e.peer.encode())
	x.String(e.emoticon)
	return x.buf
}

func (e TL_channels_viewSponsoredMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_viewSponsoredMessage)
	x.Bytes(e.channel.encode())
	x.StringBytes(e.random_id)
	return x.buf
}

func (e TL_channels_getSponsoredMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_getSponsoredMessages)
	x.Bytes(e.channel.encode())
	return x.buf
}

func (e TL_messages_getMessageReadParticipants) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getMessageReadParticipants)
	x.Bytes(e.peer.encode())
	x.Int(e.msg_id)
	return x.buf
}

func (e TL_messages_getSearchResultsCalendar) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getSearchResultsCalendar)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.saved_peer_id.encode())
	}
	x.Bytes(e.filter.encode())
	x.Int(e.offset_id)
	x.Int(e.offset_date)
	return x.buf
}

func (e TL_messages_getSearchResultsPositions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getSearchResultsPositions)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.saved_peer_id.encode())
	}
	x.Bytes(e.filter.encode())
	x.Int(e.offset_id)
	x.Int(e.limit)
	return x.buf
}

func (e TL_messages_hideChatJoinRequest) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_hideChatJoinRequest)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	x.Bytes(e.user_id.encode())
	return x.buf
}

func (e TL_messages_hideAllChatJoinRequests) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_hideAllChatJoinRequests)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	if e.flags&(1<<1) != 0 {
		x.String(e.link)
	}
	return x.buf
}

func (e TL_messages_toggleNoForwards) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_toggleNoForwards)
	x.Bytes(e.peer.encode())
	x.Bytes(e.enabled.encode())
	return x.buf
}

func (e TL_messages_saveDefaultSendAs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_saveDefaultSendAs)
	x.Bytes(e.peer.encode())
	x.Bytes(e.send_as.encode())
	return x.buf
}

func (e TL_channels_getSendAs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_getSendAs)
	x.Bytes(e.peer.encode())
	return x.buf
}

func (e TL_account_setAuthorizationTTL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_setAuthorizationTTL)
	x.Int(e.authorization_ttl_days)
	return x.buf
}

func (e TL_account_changeAuthorizationSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_changeAuthorizationSettings)
	x.Int(e.flags)
	x.Long(e.hash)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.encrypted_requests_disabled.encode())
	}
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.call_requests_disabled.encode())
	}
	return x.buf
}

func (e TL_channels_deleteParticipantHistory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_deleteParticipantHistory)
	x.Bytes(e.channel.encode())
	x.Bytes(e.participant.encode())
	return x.buf
}

func (e TL_messages_sendReaction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_sendReaction)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	x.Int(e.msg_id)
	if e.flags&(1<<0) != 0 {
		x.Vector(e.reaction)
	}
	return x.buf
}

func (e TL_messages_getMessagesReactions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getMessagesReactions)
	x.Bytes(e.peer.encode())
	x.VectorInt(e.id)
	return x.buf
}

func (e TL_messages_getMessageReactionsList) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getMessageReactionsList)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	x.Int(e.id)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.reaction.encode())
	}
	if e.flags&(1<<1) != 0 {
		x.String(e.offset)
	}
	x.Int(e.limit)
	return x.buf
}

func (e TL_messages_setChatAvailableReactions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_setChatAvailableReactions)
	x.Bytes(e.peer.encode())
	x.Bytes(e.available_reactions.encode())
	return x.buf
}

func (e TL_messages_getAvailableReactions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getAvailableReactions)
	x.Int(e.hash)
	return x.buf
}

func (e TL_messages_setDefaultReaction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_setDefaultReaction)
	x.Bytes(e.reaction.encode())
	return x.buf
}

func (e TL_messages_translateText) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_translateText)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.peer.encode())
	}
	if e.flags&(1<<0) != 0 {
		x.VectorInt(e.id)
	}
	if e.flags&(1<<1) != 0 {
		x.Vector(e.text)
	}
	x.String(e.to_lang)
	return x.buf
}

func (e TL_messages_getUnreadReactions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getUnreadReactions)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	if e.flags&(1<<0) != 0 {
		x.Int(e.top_msg_id)
	}
	x.Int(e.offset_id)
	x.Int(e.add_offset)
	x.Int(e.limit)
	x.Int(e.max_id)
	x.Int(e.min_id)
	return x.buf
}

func (e TL_messages_readReactions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_readReactions)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	if e.flags&(1<<0) != 0 {
		x.Int(e.top_msg_id)
	}
	return x.buf
}

func (e TL_contacts_resolvePhone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_contacts_resolvePhone)
	x.String(e.phone)
	return x.buf
}

func (e TL_phone_getGroupCallStreamChannels) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phone_getGroupCallStreamChannels)
	x.Bytes(e.call.encode())
	return x.buf
}

func (e TL_phone_getGroupCallStreamRtmpUrl) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phone_getGroupCallStreamRtmpUrl)
	x.Bytes(e.peer.encode())
	x.Bytes(e.revoke.encode())
	return x.buf
}

func (e TL_messages_searchSentMedia) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_searchSentMedia)
	x.String(e.q)
	x.Bytes(e.filter.encode())
	x.Int(e.limit)
	return x.buf
}

func (e TL_messages_getAttachMenuBots) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getAttachMenuBots)
	x.Long(e.hash)
	return x.buf
}

func (e TL_messages_getAttachMenuBot) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getAttachMenuBot)
	x.Bytes(e.bot.encode())
	return x.buf
}

func (e TL_messages_toggleBotInAttachMenu) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_toggleBotInAttachMenu)
	x.Int(e.flags)
	x.Bytes(e.bot.encode())
	x.Bytes(e.enabled.encode())
	return x.buf
}

func (e TL_messages_requestWebView) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_requestWebView)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	x.Bytes(e.bot.encode())
	if e.flags&(1<<1) != 0 {
		x.String(e.url)
	}
	if e.flags&(1<<3) != 0 {
		x.String(e.start_param)
	}
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.theme_params.encode())
	}
	x.String(e.platform)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.reply_to.encode())
	}
	if e.flags&(1<<13) != 0 {
		x.Bytes(e.send_as.encode())
	}
	return x.buf
}

func (e TL_messages_prolongWebView) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_prolongWebView)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	x.Bytes(e.bot.encode())
	x.Long(e.query_id)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.reply_to.encode())
	}
	if e.flags&(1<<13) != 0 {
		x.Bytes(e.send_as.encode())
	}
	return x.buf
}

func (e TL_messages_requestSimpleWebView) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_requestSimpleWebView)
	x.Int(e.flags)
	x.Bytes(e.bot.encode())
	if e.flags&(1<<3) != 0 {
		x.String(e.url)
	}
	if e.flags&(1<<4) != 0 {
		x.String(e.start_param)
	}
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.theme_params.encode())
	}
	x.String(e.platform)
	return x.buf
}

func (e TL_messages_sendWebViewResultMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_sendWebViewResultMessage)
	x.String(e.bot_query_id)
	x.Bytes(e.result.encode())
	return x.buf
}

func (e TL_messages_sendWebViewData) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_sendWebViewData)
	x.Bytes(e.bot.encode())
	x.Long(e.random_id)
	x.String(e.button_text)
	x.String(e.data)
	return x.buf
}

func (e TL_bots_setBotMenuButton) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_bots_setBotMenuButton)
	x.Bytes(e.user_id.encode())
	x.Bytes(e.button.encode())
	return x.buf
}

func (e TL_bots_getBotMenuButton) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_bots_getBotMenuButton)
	x.Bytes(e.user_id.encode())
	return x.buf
}

func (e TL_account_getSavedRingtones) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_getSavedRingtones)
	x.Long(e.hash)
	return x.buf
}

func (e TL_account_saveRingtone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_saveRingtone)
	x.Bytes(e.id.encode())
	x.Bytes(e.unsave.encode())
	return x.buf
}

func (e TL_account_uploadRingtone) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_uploadRingtone)
	x.Bytes(e.file.encode())
	x.String(e.file_name)
	x.String(e.mime_type)
	return x.buf
}

func (e TL_bots_setBotBroadcastDefaultAdminRights) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_bots_setBotBroadcastDefaultAdminRights)
	x.Bytes(e.admin_rights.encode())
	return x.buf
}

func (e TL_bots_setBotGroupDefaultAdminRights) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_bots_setBotGroupDefaultAdminRights)
	x.Bytes(e.admin_rights.encode())
	return x.buf
}

func (e TL_phone_saveCallLog) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_phone_saveCallLog)
	x.Bytes(e.peer.encode())
	x.Bytes(e.file.encode())
	return x.buf
}

func (e TL_channels_toggleJoinToSend) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_toggleJoinToSend)
	x.Bytes(e.channel.encode())
	x.Bytes(e.enabled.encode())
	return x.buf
}

func (e TL_channels_toggleJoinRequest) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_toggleJoinRequest)
	x.Bytes(e.channel.encode())
	x.Bytes(e.enabled.encode())
	return x.buf
}

func (e TL_payments_exportInvoice) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_payments_exportInvoice)
	x.Bytes(e.invoice_media.encode())
	return x.buf
}

func (e TL_messages_transcribeAudio) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_transcribeAudio)
	x.Bytes(e.peer.encode())
	x.Int(e.msg_id)
	return x.buf
}

func (e TL_messages_rateTranscribedAudio) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_rateTranscribedAudio)
	x.Bytes(e.peer.encode())
	x.Int(e.msg_id)
	x.Long(e.transcription_id)
	x.Bytes(e.good.encode())
	return x.buf
}

func (e TL_payments_assignAppStoreTransaction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_payments_assignAppStoreTransaction)
	x.StringBytes(e.receipt)
	x.Bytes(e.purpose.encode())
	return x.buf
}

func (e TL_payments_assignPlayMarketTransaction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_payments_assignPlayMarketTransaction)
	x.Bytes(e.receipt.encode())
	x.Bytes(e.purpose.encode())
	return x.buf
}

func (e TL_payments_canPurchasePremium) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_payments_canPurchasePremium)
	x.Bytes(e.purpose.encode())
	return x.buf
}

func (e TL_help_getPremiumPromo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_getPremiumPromo)
	return x.buf
}

func (e TL_messages_getCustomEmojiDocuments) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getCustomEmojiDocuments)
	x.VectorLong(e.document_id)
	return x.buf
}

func (e TL_messages_getEmojiStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getEmojiStickers)
	x.Long(e.hash)
	return x.buf
}

func (e TL_messages_getFeaturedEmojiStickers) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getFeaturedEmojiStickers)
	x.Long(e.hash)
	return x.buf
}

func (e TL_account_updateEmojiStatus) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_updateEmojiStatus)
	x.Bytes(e.emoji_status.encode())
	return x.buf
}

func (e TL_account_getDefaultEmojiStatuses) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_getDefaultEmojiStatuses)
	x.Long(e.hash)
	return x.buf
}

func (e TL_account_getRecentEmojiStatuses) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_getRecentEmojiStatuses)
	x.Long(e.hash)
	return x.buf
}

func (e TL_account_clearRecentEmojiStatuses) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_clearRecentEmojiStatuses)
	return x.buf
}

func (e TL_messages_reportReaction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_reportReaction)
	x.Bytes(e.peer.encode())
	x.Int(e.id)
	x.Bytes(e.reaction_peer.encode())
	return x.buf
}

func (e TL_messages_getTopReactions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getTopReactions)
	x.Int(e.limit)
	x.Long(e.hash)
	return x.buf
}

func (e TL_messages_getRecentReactions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getRecentReactions)
	x.Int(e.limit)
	x.Long(e.hash)
	return x.buf
}

func (e TL_messages_clearRecentReactions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_clearRecentReactions)
	return x.buf
}

func (e TL_messages_getExtendedMedia) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getExtendedMedia)
	x.Bytes(e.peer.encode())
	x.VectorInt(e.id)
	return x.buf
}

func (e TL_auth_importWebTokenAuthorization) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_importWebTokenAuthorization)
	x.Int(e.api_id)
	x.String(e.api_hash)
	x.String(e.web_auth_token)
	return x.buf
}

func (e TL_account_reorderUsernames) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_reorderUsernames)
	x.VectorString(e.order)
	return x.buf
}

func (e TL_account_toggleUsername) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_toggleUsername)
	x.String(e.username)
	x.Bytes(e.active.encode())
	return x.buf
}

func (e TL_channels_reorderUsernames) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_reorderUsernames)
	x.Bytes(e.channel.encode())
	x.VectorString(e.order)
	return x.buf
}

func (e TL_channels_toggleUsername) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_toggleUsername)
	x.Bytes(e.channel.encode())
	x.String(e.username)
	x.Bytes(e.active.encode())
	return x.buf
}

func (e TL_channels_deactivateAllUsernames) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_deactivateAllUsernames)
	x.Bytes(e.channel.encode())
	return x.buf
}

func (e TL_channels_toggleForum) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_toggleForum)
	x.Bytes(e.channel.encode())
	x.Bytes(e.enabled.encode())
	return x.buf
}

func (e TL_channels_createForumTopic) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_createForumTopic)
	x.Int(e.flags)
	x.Bytes(e.channel.encode())
	x.String(e.title)
	if e.flags&(1<<0) != 0 {
		x.Int(e.icon_color)
	}
	if e.flags&(1<<3) != 0 {
		x.Long(e.icon_emoji_id)
	}
	x.Long(e.random_id)
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.send_as.encode())
	}
	return x.buf
}

func (e TL_channels_getForumTopics) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_getForumTopics)
	x.Int(e.flags)
	x.Bytes(e.channel.encode())
	if e.flags&(1<<0) != 0 {
		x.String(e.q)
	}
	x.Int(e.offset_date)
	x.Int(e.offset_id)
	x.Int(e.offset_topic)
	x.Int(e.limit)
	return x.buf
}

func (e TL_channels_getForumTopicsByID) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_getForumTopicsByID)
	x.Bytes(e.channel.encode())
	x.VectorInt(e.topics)
	return x.buf
}

func (e TL_channels_editForumTopic) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_editForumTopic)
	x.Int(e.flags)
	x.Bytes(e.channel.encode())
	x.Int(e.topic_id)
	if e.flags&(1<<0) != 0 {
		x.String(e.title)
	}
	if e.flags&(1<<1) != 0 {
		x.Long(e.icon_emoji_id)
	}
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.closed.encode())
	}
	if e.flags&(1<<3) != 0 {
		x.Bytes(e.hidden.encode())
	}
	return x.buf
}

func (e TL_channels_updatePinnedForumTopic) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_updatePinnedForumTopic)
	x.Bytes(e.channel.encode())
	x.Int(e.topic_id)
	x.Bytes(e.pinned.encode())
	return x.buf
}

func (e TL_channels_deleteTopicHistory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_deleteTopicHistory)
	x.Bytes(e.channel.encode())
	x.Int(e.top_msg_id)
	return x.buf
}

func (e TL_channels_reorderPinnedForumTopics) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_reorderPinnedForumTopics)
	x.Int(e.flags)
	x.Bytes(e.channel.encode())
	x.VectorInt(e.order)
	return x.buf
}

func (e TL_channels_toggleAntiSpam) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_toggleAntiSpam)
	x.Bytes(e.channel.encode())
	x.Bytes(e.enabled.encode())
	return x.buf
}

func (e TL_channels_reportAntiSpamFalsePositive) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_reportAntiSpamFalsePositive)
	x.Bytes(e.channel.encode())
	x.Int(e.msg_id)
	return x.buf
}

func (e TL_messages_setDefaultHistoryTTL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_setDefaultHistoryTTL)
	x.Int(e.period)
	return x.buf
}

func (e TL_messages_getDefaultHistoryTTL) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getDefaultHistoryTTL)
	return x.buf
}

func (e TL_contacts_exportContactToken) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_contacts_exportContactToken)
	return x.buf
}

func (e TL_contacts_importContactToken) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_contacts_importContactToken)
	x.String(e.token)
	return x.buf
}

func (e TL_photos_uploadContactProfilePhoto) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_photos_uploadContactProfilePhoto)
	x.Int(e.flags)
	x.Bytes(e.user_id.encode())
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.file.encode())
	}
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.video.encode())
	}
	if e.flags&(1<<2) != 0 {
		x.Double(e.video_start_ts)
	}
	if e.flags&(1<<5) != 0 {
		x.Bytes(e.video_emoji_markup.encode())
	}
	return x.buf
}

func (e TL_channels_toggleParticipantsHidden) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_toggleParticipantsHidden)
	x.Bytes(e.channel.encode())
	x.Bytes(e.enabled.encode())
	return x.buf
}

func (e TL_messages_sendBotRequestedPeer) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_sendBotRequestedPeer)
	x.Bytes(e.peer.encode())
	x.Int(e.msg_id)
	x.Int(e.button_id)
	x.Vector(e.requested_peers)
	return x.buf
}

func (e TL_account_getDefaultProfilePhotoEmojis) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_getDefaultProfilePhotoEmojis)
	x.Long(e.hash)
	return x.buf
}

func (e TL_account_getDefaultGroupPhotoEmojis) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_getDefaultGroupPhotoEmojis)
	x.Long(e.hash)
	return x.buf
}

func (e TL_auth_requestFirebaseSms) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_requestFirebaseSms)
	x.Int(e.flags)
	x.String(e.phone_number)
	x.String(e.phone_code_hash)
	if e.flags&(1<<0) != 0 {
		x.String(e.safety_net_token)
	}
	if e.flags&(1<<1) != 0 {
		x.String(e.ios_push_secret)
	}
	return x.buf
}

func (e TL_messages_getEmojiGroups) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getEmojiGroups)
	x.Int(e.hash)
	return x.buf
}

func (e TL_messages_getEmojiStatusGroups) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getEmojiStatusGroups)
	x.Int(e.hash)
	return x.buf
}

func (e TL_messages_getEmojiProfilePhotoGroups) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getEmojiProfilePhotoGroups)
	x.Int(e.hash)
	return x.buf
}

func (e TL_messages_searchCustomEmoji) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_searchCustomEmoji)
	x.String(e.emoticon)
	x.Long(e.hash)
	return x.buf
}

func (e TL_messages_togglePeerTranslations) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_togglePeerTranslations)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	return x.buf
}

func (e TL_account_getAutoSaveSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_getAutoSaveSettings)
	return x.buf
}

func (e TL_account_saveAutoSaveSettings) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_saveAutoSaveSettings)
	x.Int(e.flags)
	if e.flags&(1<<3) != 0 {
		x.Bytes(e.peer.encode())
	}
	x.Bytes(e.settings.encode())
	return x.buf
}

func (e TL_account_deleteAutoSaveExceptions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_deleteAutoSaveExceptions)
	return x.buf
}

func (e TL_stickers_changeSticker) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stickers_changeSticker)
	x.Int(e.flags)
	x.Bytes(e.sticker.encode())
	if e.flags&(1<<0) != 0 {
		x.String(e.emoji)
	}
	if e.flags&(1<<1) != 0 {
		x.Bytes(e.mask_coords.encode())
	}
	if e.flags&(1<<2) != 0 {
		x.String(e.keywords)
	}
	return x.buf
}

func (e TL_stickers_renameStickerSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stickers_renameStickerSet)
	x.Bytes(e.stickerset.encode())
	x.String(e.title)
	return x.buf
}

func (e TL_stickers_deleteStickerSet) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stickers_deleteStickerSet)
	x.Bytes(e.stickerset.encode())
	return x.buf
}

func (e TL_messages_getBotApp) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getBotApp)
	x.Bytes(e.app.encode())
	x.Long(e.hash)
	return x.buf
}

func (e TL_messages_requestAppWebView) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_requestAppWebView)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	x.Bytes(e.app.encode())
	if e.flags&(1<<1) != 0 {
		x.String(e.start_param)
	}
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.theme_params.encode())
	}
	x.String(e.platform)
	return x.buf
}

func (e TL_bots_setBotInfo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_bots_setBotInfo)
	x.Int(e.flags)
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.bot.encode())
	}
	x.String(e.lang_code)
	if e.flags&(1<<3) != 0 {
		x.String(e.name)
	}
	if e.flags&(1<<0) != 0 {
		x.String(e.about)
	}
	if e.flags&(1<<1) != 0 {
		x.String(e.description)
	}
	return x.buf
}

func (e TL_bots_getBotInfo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_bots_getBotInfo)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.bot.encode())
	}
	x.String(e.lang_code)
	return x.buf
}

func (e TL_auth_resetLoginEmail) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_auth_resetLoginEmail)
	x.String(e.phone_number)
	x.String(e.phone_code_hash)
	return x.buf
}

func (e TL_chatlists_exportChatlistInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chatlists_exportChatlistInvite)
	x.Bytes(e.chatlist.encode())
	x.String(e.title)
	x.Vector(e.peers)
	return x.buf
}

func (e TL_chatlists_deleteExportedInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chatlists_deleteExportedInvite)
	x.Bytes(e.chatlist.encode())
	x.String(e.slug)
	return x.buf
}

func (e TL_chatlists_editExportedInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chatlists_editExportedInvite)
	x.Int(e.flags)
	x.Bytes(e.chatlist.encode())
	x.String(e.slug)
	if e.flags&(1<<1) != 0 {
		x.String(e.title)
	}
	if e.flags&(1<<2) != 0 {
		x.Vector(e.peers)
	}
	return x.buf
}

func (e TL_chatlists_getExportedInvites) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chatlists_getExportedInvites)
	x.Bytes(e.chatlist.encode())
	return x.buf
}

func (e TL_chatlists_checkChatlistInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chatlists_checkChatlistInvite)
	x.String(e.slug)
	return x.buf
}

func (e TL_chatlists_joinChatlistInvite) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chatlists_joinChatlistInvite)
	x.String(e.slug)
	x.Vector(e.peers)
	return x.buf
}

func (e TL_chatlists_getChatlistUpdates) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chatlists_getChatlistUpdates)
	x.Bytes(e.chatlist.encode())
	return x.buf
}

func (e TL_chatlists_joinChatlistUpdates) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chatlists_joinChatlistUpdates)
	x.Bytes(e.chatlist.encode())
	x.Vector(e.peers)
	return x.buf
}

func (e TL_chatlists_hideChatlistUpdates) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chatlists_hideChatlistUpdates)
	x.Bytes(e.chatlist.encode())
	return x.buf
}

func (e TL_chatlists_getLeaveChatlistSuggestions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chatlists_getLeaveChatlistSuggestions)
	x.Bytes(e.chatlist.encode())
	return x.buf
}

func (e TL_chatlists_leaveChatlist) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_chatlists_leaveChatlist)
	x.Bytes(e.chatlist.encode())
	x.Vector(e.peers)
	return x.buf
}

func (e TL_bots_reorderUsernames) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_bots_reorderUsernames)
	x.Bytes(e.bot.encode())
	x.VectorString(e.order)
	return x.buf
}

func (e TL_bots_toggleUsername) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_bots_toggleUsername)
	x.Bytes(e.bot.encode())
	x.String(e.username)
	x.Bytes(e.active.encode())
	return x.buf
}

func (e TL_messages_setChatWallPaper) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_setChatWallPaper)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.wallpaper.encode())
	}
	if e.flags&(1<<2) != 0 {
		x.Bytes(e.settings.encode())
	}
	if e.flags&(1<<1) != 0 {
		x.Int(e.id)
	}
	return x.buf
}

func (e TL_account_invalidateSignInCodes) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_invalidateSignInCodes)
	x.VectorString(e.codes)
	return x.buf
}

func (e TL_channels_clickSponsoredMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_clickSponsoredMessage)
	x.Bytes(e.channel.encode())
	x.StringBytes(e.random_id)
	return x.buf
}

func (e TL_contacts_editCloseFriends) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_contacts_editCloseFriends)
	x.VectorLong(e.id)
	return x.buf
}

func (e TL_stories_canSendStory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stories_canSendStory)
	x.Bytes(e.peer.encode())
	return x.buf
}

func (e TL_stories_sendStory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stories_sendStory)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	x.Bytes(e.media.encode())
	if e.flags&(1<<5) != 0 {
		x.Vector(e.media_areas)
	}
	if e.flags&(1<<0) != 0 {
		x.String(e.caption)
	}
	if e.flags&(1<<1) != 0 {
		x.Vector(e.entities)
	}
	x.Vector(e.privacy_rules)
	x.Long(e.random_id)
	if e.flags&(1<<3) != 0 {
		x.Int(e.period)
	}
	if e.flags&(1<<6) != 0 {
		x.Bytes(e.fwd_from_id.encode())
	}
	if e.flags&(1<<6) != 0 {
		x.Int(e.fwd_from_story)
	}
	return x.buf
}

func (e TL_stories_editStory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stories_editStory)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	x.Int(e.id)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.media.encode())
	}
	if e.flags&(1<<3) != 0 {
		x.Vector(e.media_areas)
	}
	if e.flags&(1<<1) != 0 {
		x.String(e.caption)
	}
	if e.flags&(1<<1) != 0 {
		x.Vector(e.entities)
	}
	if e.flags&(1<<2) != 0 {
		x.Vector(e.privacy_rules)
	}
	return x.buf
}

func (e TL_stories_deleteStories) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stories_deleteStories)
	x.Bytes(e.peer.encode())
	x.VectorInt(e.id)
	return x.buf
}

func (e TL_stories_togglePinned) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stories_togglePinned)
	x.Bytes(e.peer.encode())
	x.VectorInt(e.id)
	x.Bytes(e.pinned.encode())
	return x.buf
}

func (e TL_stories_getAllStories) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stories_getAllStories)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.String(e.state)
	}
	return x.buf
}

func (e TL_stories_getPinnedStories) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stories_getPinnedStories)
	x.Bytes(e.peer.encode())
	x.Int(e.offset_id)
	x.Int(e.limit)
	return x.buf
}

func (e TL_stories_getStoriesArchive) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stories_getStoriesArchive)
	x.Bytes(e.peer.encode())
	x.Int(e.offset_id)
	x.Int(e.limit)
	return x.buf
}

func (e TL_stories_getStoriesByID) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stories_getStoriesByID)
	x.Bytes(e.peer.encode())
	x.VectorInt(e.id)
	return x.buf
}

func (e TL_stories_toggleAllStoriesHidden) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stories_toggleAllStoriesHidden)
	x.Bytes(e.hidden.encode())
	return x.buf
}

func (e TL_stories_readStories) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stories_readStories)
	x.Bytes(e.peer.encode())
	x.Int(e.max_id)
	return x.buf
}

func (e TL_stories_incrementStoryViews) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stories_incrementStoryViews)
	x.Bytes(e.peer.encode())
	x.VectorInt(e.id)
	return x.buf
}

func (e TL_stories_getStoryViewsList) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stories_getStoryViewsList)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	if e.flags&(1<<1) != 0 {
		x.String(e.q)
	}
	x.Int(e.id)
	x.String(e.offset)
	x.Int(e.limit)
	return x.buf
}

func (e TL_stories_getStoriesViews) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stories_getStoriesViews)
	x.Bytes(e.peer.encode())
	x.VectorInt(e.id)
	return x.buf
}

func (e TL_stories_exportStoryLink) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stories_exportStoryLink)
	x.Bytes(e.peer.encode())
	x.Int(e.id)
	return x.buf
}

func (e TL_stories_report) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stories_report)
	x.Bytes(e.peer.encode())
	x.VectorInt(e.id)
	x.Bytes(e.reason.encode())
	x.String(e.message)
	return x.buf
}

func (e TL_stories_activateStealthMode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stories_activateStealthMode)
	x.Int(e.flags)
	return x.buf
}

func (e TL_contacts_setBlocked) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_contacts_setBlocked)
	x.Int(e.flags)
	x.Vector(e.id)
	x.Int(e.limit)
	return x.buf
}

func (e TL_stories_sendReaction) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stories_sendReaction)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	x.Int(e.story_id)
	x.Bytes(e.reaction.encode())
	return x.buf
}

func (e TL_bots_canSendMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_bots_canSendMessage)
	x.Bytes(e.bot.encode())
	return x.buf
}

func (e TL_bots_allowSendMessage) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_bots_allowSendMessage)
	x.Bytes(e.bot.encode())
	return x.buf
}

func (e TL_bots_invokeWebViewCustomMethod) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_bots_invokeWebViewCustomMethod)
	x.Bytes(e.bot.encode())
	x.String(e.custom_method)
	x.Bytes(e.params.encode())
	return x.buf
}

func (e TL_stories_getPeerStories) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stories_getPeerStories)
	x.Bytes(e.peer.encode())
	return x.buf
}

func (e TL_stories_getAllReadPeerStories) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stories_getAllReadPeerStories)
	return x.buf
}

func (e TL_stories_getPeerMaxIDs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stories_getPeerMaxIDs)
	x.Vector(e.id)
	return x.buf
}

func (e TL_stories_getChatsToSend) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stories_getChatsToSend)
	return x.buf
}

func (e TL_stories_togglePeerStoriesHidden) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stories_togglePeerStoriesHidden)
	x.Bytes(e.peer.encode())
	x.Bytes(e.hidden.encode())
	return x.buf
}

func (e TL_payments_getPremiumGiftCodeOptions) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_payments_getPremiumGiftCodeOptions)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.boost_peer.encode())
	}
	return x.buf
}

func (e TL_payments_checkGiftCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_payments_checkGiftCode)
	x.String(e.slug)
	return x.buf
}

func (e TL_payments_applyGiftCode) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_payments_applyGiftCode)
	x.String(e.slug)
	return x.buf
}

func (e TL_payments_getGiveawayInfo) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_payments_getGiveawayInfo)
	x.Bytes(e.peer.encode())
	x.Int(e.msg_id)
	return x.buf
}

func (e TL_payments_launchPrepaidGiveaway) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_payments_launchPrepaidGiveaway)
	x.Bytes(e.peer.encode())
	x.Long(e.giveaway_id)
	x.Bytes(e.purpose.encode())
	return x.buf
}

func (e TL_account_updateColor) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_updateColor)
	x.Int(e.flags)
	if e.flags&(1<<2) != 0 {
		x.Int(e.color)
	}
	if e.flags&(1<<0) != 0 {
		x.Long(e.background_emoji_id)
	}
	return x.buf
}

func (e TL_channels_updateColor) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_updateColor)
	x.Int(e.flags)
	x.Bytes(e.channel.encode())
	if e.flags&(1<<2) != 0 {
		x.Int(e.color)
	}
	if e.flags&(1<<0) != 0 {
		x.Long(e.background_emoji_id)
	}
	return x.buf
}

func (e TL_account_getDefaultBackgroundEmojis) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_getDefaultBackgroundEmojis)
	x.Long(e.hash)
	return x.buf
}

func (e TL_premium_getBoostsList) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_premium_getBoostsList)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	x.String(e.offset)
	x.Int(e.limit)
	return x.buf
}

func (e TL_premium_getMyBoosts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_premium_getMyBoosts)
	return x.buf
}

func (e TL_premium_applyBoost) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_premium_applyBoost)
	x.Int(e.flags)
	if e.flags&(1<<0) != 0 {
		x.VectorInt(e.slots)
	}
	x.Bytes(e.peer.encode())
	return x.buf
}

func (e TL_premium_getBoostsStatus) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_premium_getBoostsStatus)
	x.Bytes(e.peer.encode())
	return x.buf
}

func (e TL_premium_getUserBoosts) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_premium_getUserBoosts)
	x.Bytes(e.peer.encode())
	x.Bytes(e.user_id.encode())
	return x.buf
}

func (e TL_channels_toggleViewForumAsMessages) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_toggleViewForumAsMessages)
	x.Bytes(e.channel.encode())
	x.Bytes(e.enabled.encode())
	return x.buf
}

func (e TL_messages_searchEmojiStickerSets) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_searchEmojiStickerSets)
	x.Int(e.flags)
	x.String(e.q)
	x.Long(e.hash)
	return x.buf
}

func (e TL_channels_getChannelRecommendations) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_getChannelRecommendations)
	x.Bytes(e.channel.encode())
	return x.buf
}

func (e TL_stats_getStoryStats) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stats_getStoryStats)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	x.Int(e.id)
	return x.buf
}

func (e TL_stats_getStoryPublicForwards) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stats_getStoryPublicForwards)
	x.Bytes(e.peer.encode())
	x.Int(e.id)
	x.String(e.offset)
	x.Int(e.limit)
	return x.buf
}

func (e TL_help_getPeerColors) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_getPeerColors)
	x.Int(e.hash)
	return x.buf
}

func (e TL_help_getPeerProfileColors) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_help_getPeerProfileColors)
	x.Int(e.hash)
	return x.buf
}

func (e TL_stories_getStoryReactionsList) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_stories_getStoryReactionsList)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	x.Int(e.id)
	if e.flags&(1<<0) != 0 {
		x.Bytes(e.reaction.encode())
	}
	if e.flags&(1<<1) != 0 {
		x.String(e.offset)
	}
	x.Int(e.limit)
	return x.buf
}

func (e TL_channels_updateEmojiStatus) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_channels_updateEmojiStatus)
	x.Bytes(e.channel.encode())
	x.Bytes(e.emoji_status.encode())
	return x.buf
}

func (e TL_account_getChannelDefaultEmojiStatuses) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_getChannelDefaultEmojiStatuses)
	x.Long(e.hash)
	return x.buf
}

func (e TL_account_getChannelRestrictedStatusEmojis) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_account_getChannelRestrictedStatusEmojis)
	x.Long(e.hash)
	return x.buf
}

func (e TL_messages_getSavedDialogs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getSavedDialogs)
	x.Int(e.flags)
	x.Int(e.offset_date)
	x.Int(e.offset_id)
	x.Bytes(e.offset_peer.encode())
	x.Int(e.limit)
	x.Long(e.hash)
	return x.buf
}

func (e TL_messages_getSavedHistory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getSavedHistory)
	x.Bytes(e.peer.encode())
	x.Int(e.offset_id)
	x.Int(e.offset_date)
	x.Int(e.add_offset)
	x.Int(e.limit)
	x.Int(e.max_id)
	x.Int(e.min_id)
	x.Long(e.hash)
	return x.buf
}

func (e TL_messages_deleteSavedHistory) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_deleteSavedHistory)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	x.Int(e.max_id)
	if e.flags&(1<<2) != 0 {
		x.Int(e.min_date)
	}
	if e.flags&(1<<3) != 0 {
		x.Int(e.max_date)
	}
	return x.buf
}

func (e TL_messages_getPinnedSavedDialogs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_getPinnedSavedDialogs)
	return x.buf
}

func (e TL_messages_toggleSavedDialogPin) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_toggleSavedDialogPin)
	x.Int(e.flags)
	x.Bytes(e.peer.encode())
	return x.buf
}

func (e TL_messages_reorderPinnedSavedDialogs) encode() []byte {
	x := NewEncodeBuf(512)
	x.UInt(crc_messages_reorderPinnedSavedDialogs)
	x.Int(e.flags)
	x.Vector(e.order)
	return x.buf
}

func (m *DecodeBuf) ObjectGenerated(constructor uint32) (g TL) {
	switch constructor {
	case crc_boolFalse:
		r := TL_boolFalse{}
		return r
	case crc_boolTrue:
		r := TL_boolTrue{}
		return r
	case crc_true:
		r := TL_true{}
		return r
	case crc_error:
		r := TL_error{}
		r.code = m.Int()
		r.text = m.String()
		return r
	case crc_null:
		r := TL_null{}
		return r
	case crc_inputPeerEmpty:
		r := TL_inputPeerEmpty{}
		return r
	case crc_inputPeerSelf:
		r := TL_inputPeerSelf{}
		return r
	case crc_inputPeerChat:
		r := TL_inputPeerChat{}
		r.chat_id = m.Long()
		return r
	case crc_inputUserEmpty:
		r := TL_inputUserEmpty{}
		return r
	case crc_inputUserSelf:
		r := TL_inputUserSelf{}
		return r
	case crc_inputPhoneContact:
		r := TL_inputPhoneContact{}
		r.client_id = m.Long()
		r.phone = m.String()
		r.first_name = m.String()
		r.last_name = m.String()
		return r
	case crc_inputFile:
		r := TL_inputFile{}
		r.id = m.Long()
		r.parts = m.Int()
		r.name = m.String()
		r.md5_checksum = m.String()
		return r
	case crc_inputMediaEmpty:
		r := TL_inputMediaEmpty{}
		return r
	case crc_inputMediaUploadedPhoto:
		r := TL_inputMediaUploadedPhoto{}
		r.flags = m.Int()
		if r.flags&(1<<2) != 0 {
			r.spoiler = true
		}
		r.file = m.Object()
		if r.flags&(1<<0) != 0 {
			r.stickers = m.Vector()
		}
		if r.flags&(1<<1) != 0 {
			r.ttl_seconds = m.Int()
		}
		return r
	case crc_inputMediaPhoto:
		r := TL_inputMediaPhoto{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.spoiler = true
		}
		r.id = m.Object()
		if r.flags&(1<<0) != 0 {
			r.ttl_seconds = m.Int()
		}
		return r
	case crc_inputMediaGeoPoint:
		r := TL_inputMediaGeoPoint{}
		r.geo_point = m.Object()
		return r
	case crc_inputMediaContact:
		r := TL_inputMediaContact{}
		r.phone_number = m.String()
		r.first_name = m.String()
		r.last_name = m.String()
		r.vcard = m.String()
		return r
	case crc_inputChatPhotoEmpty:
		r := TL_inputChatPhotoEmpty{}
		return r
	case crc_inputChatUploadedPhoto:
		r := TL_inputChatUploadedPhoto{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.file = m.Object()
		}
		if r.flags&(1<<1) != 0 {
			r.video = m.Object()
		}
		if r.flags&(1<<2) != 0 {
			r.video_start_ts = m.Double()
		}
		if r.flags&(1<<3) != 0 {
			r.video_emoji_markup = m.Object()
		}
		return r
	case crc_inputChatPhoto:
		r := TL_inputChatPhoto{}
		r.id = m.Object()
		return r
	case crc_inputGeoPointEmpty:
		r := TL_inputGeoPointEmpty{}
		return r
	case crc_inputGeoPoint:
		r := TL_inputGeoPoint{}
		r.flags = m.Int()
		r.lat = m.Double()
		r.long = m.Double()
		if r.flags&(1<<0) != 0 {
			r.accuracy_radius = m.Int()
		}
		return r
	case crc_inputPhotoEmpty:
		r := TL_inputPhotoEmpty{}
		return r
	case crc_inputPhoto:
		r := TL_inputPhoto{}
		r.id = m.Long()
		r.access_hash = m.Long()
		r.file_reference = m.StringBytes()
		return r
	case crc_inputFileLocation:
		r := TL_inputFileLocation{}
		r.volume_id = m.Long()
		r.local_id = m.Int()
		r.secret = m.Long()
		r.file_reference = m.StringBytes()
		return r
	case crc_peerUser:
		r := TL_peerUser{}
		r.user_id = m.Long()
		return r
	case crc_peerChat:
		r := TL_peerChat{}
		r.chat_id = m.Long()
		return r
	case crc_storage_fileUnknown:
		r := TL_storage_fileUnknown{}
		return r
	case crc_storage_filePartial:
		r := TL_storage_filePartial{}
		return r
	case crc_storage_fileJpeg:
		r := TL_storage_fileJpeg{}
		return r
	case crc_storage_fileGif:
		r := TL_storage_fileGif{}
		return r
	case crc_storage_filePng:
		r := TL_storage_filePng{}
		return r
	case crc_storage_filePdf:
		r := TL_storage_filePdf{}
		return r
	case crc_storage_fileMp3:
		r := TL_storage_fileMp3{}
		return r
	case crc_storage_fileMov:
		r := TL_storage_fileMov{}
		return r
	case crc_storage_fileMp4:
		r := TL_storage_fileMp4{}
		return r
	case crc_storage_fileWebp:
		r := TL_storage_fileWebp{}
		return r
	case crc_userEmpty:
		r := TL_userEmpty{}
		r.id = m.Long()
		return r
	case crc_userProfilePhotoEmpty:
		r := TL_userProfilePhotoEmpty{}
		return r
	case crc_userProfilePhoto:
		r := TL_userProfilePhoto{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.has_video = true
		}
		if r.flags&(1<<2) != 0 {
			r.personal = true
		}
		r.photo_id = m.Long()
		if r.flags&(1<<1) != 0 {
			r.stripped_thumb = m.StringBytes()
		}
		r.dc_id = m.Int()
		return r
	case crc_userStatusEmpty:
		r := TL_userStatusEmpty{}
		return r
	case crc_userStatusOnline:
		r := TL_userStatusOnline{}
		r.expires = m.Int()
		return r
	case crc_userStatusOffline:
		r := TL_userStatusOffline{}
		r.was_online = m.Int()
		return r
	case crc_chatEmpty:
		r := TL_chatEmpty{}
		r.id = m.Long()
		return r
	case crc_chat:
		r := TL_chat{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.creator = true
		}
		if r.flags&(1<<2) != 0 {
			r.left = true
		}
		if r.flags&(1<<5) != 0 {
			r.deactivated = true
		}
		if r.flags&(1<<23) != 0 {
			r.call_active = true
		}
		if r.flags&(1<<24) != 0 {
			r.call_not_empty = true
		}
		if r.flags&(1<<25) != 0 {
			r.noforwards = true
		}
		r.id = m.Long()
		r.title = m.String()
		r.photo = m.Object()
		r.participants_count = m.Int()
		r.date = m.Int()
		r.version = m.Int()
		if r.flags&(1<<6) != 0 {
			r.migrated_to = m.Object()
		}
		if r.flags&(1<<14) != 0 {
			r.admin_rights = m.Object()
		}
		if r.flags&(1<<18) != 0 {
			r.default_banned_rights = m.Object()
		}
		return r
	case crc_chatForbidden:
		r := TL_chatForbidden{}
		r.id = m.Long()
		r.title = m.String()
		return r
	case crc_chatFull:
		r := TL_chatFull{}
		r.flags = m.Int()
		if r.flags&(1<<7) != 0 {
			r.can_set_username = true
		}
		if r.flags&(1<<8) != 0 {
			r.has_scheduled = true
		}
		if r.flags&(1<<19) != 0 {
			r.translations_disabled = true
		}
		r.id = m.Long()
		r.about = m.String()
		r.participants = m.Object()
		if r.flags&(1<<2) != 0 {
			r.chat_photo = m.Object()
		}
		r.notify_settings = m.Object()
		if r.flags&(1<<13) != 0 {
			r.exported_invite = m.Object()
		}
		if r.flags&(1<<3) != 0 {
			r.bot_info = m.Vector()
		}
		if r.flags&(1<<6) != 0 {
			r.pinned_msg_id = m.Int()
		}
		if r.flags&(1<<11) != 0 {
			r.folder_id = m.Int()
		}
		if r.flags&(1<<12) != 0 {
			r.call = m.Object()
		}
		if r.flags&(1<<14) != 0 {
			r.ttl_period = m.Int()
		}
		if r.flags&(1<<15) != 0 {
			r.groupcall_default_join_as = m.Object()
		}
		if r.flags&(1<<16) != 0 {
			r.theme_emoticon = m.String()
		}
		if r.flags&(1<<17) != 0 {
			r.requests_pending = m.Int()
		}
		if r.flags&(1<<17) != 0 {
			r.recent_requesters = m.VectorLong()
		}
		if r.flags&(1<<18) != 0 {
			r.available_reactions = m.Object()
		}
		return r
	case crc_chatParticipant:
		r := TL_chatParticipant{}
		r.user_id = m.Long()
		r.inviter_id = m.Long()
		r.date = m.Int()
		return r
	case crc_chatParticipantsForbidden:
		r := TL_chatParticipantsForbidden{}
		r.flags = m.Int()
		r.chat_id = m.Long()
		if r.flags&(1<<0) != 0 {
			r.self_participant = m.Object()
		}
		return r
	case crc_chatParticipants:
		r := TL_chatParticipants{}
		r.chat_id = m.Long()
		r.participants = m.Vector()
		r.version = m.Int()
		return r
	case crc_chatPhotoEmpty:
		r := TL_chatPhotoEmpty{}
		return r
	case crc_chatPhoto:
		r := TL_chatPhoto{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.has_video = true
		}
		r.photo_id = m.Long()
		if r.flags&(1<<1) != 0 {
			r.stripped_thumb = m.StringBytes()
		}
		r.dc_id = m.Int()
		return r
	case crc_messageEmpty:
		r := TL_messageEmpty{}
		r.flags = m.Int()
		r.id = m.Int()
		if r.flags&(1<<0) != 0 {
			r.peer_id = m.Object()
		}
		return r
	case crc_message:
		r := TL_message{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.out = true
		}
		if r.flags&(1<<4) != 0 {
			r.mentioned = true
		}
		if r.flags&(1<<5) != 0 {
			r.media_unread = true
		}
		if r.flags&(1<<13) != 0 {
			r.silent = true
		}
		if r.flags&(1<<14) != 0 {
			r.post = true
		}
		if r.flags&(1<<18) != 0 {
			r.from_scheduled = true
		}
		if r.flags&(1<<19) != 0 {
			r.legacy = true
		}
		if r.flags&(1<<21) != 0 {
			r.edit_hide = true
		}
		if r.flags&(1<<24) != 0 {
			r.pinned = true
		}
		if r.flags&(1<<26) != 0 {
			r.noforwards = true
		}
		if r.flags&(1<<27) != 0 {
			r.invert_media = true
		}
		r.id = m.Int()
		if r.flags&(1<<8) != 0 {
			r.from_id = m.Object()
		}
		r.peer_id = m.Object()
		if r.flags&(1<<28) != 0 {
			r.saved_peer_id = m.Object()
		}
		if r.flags&(1<<2) != 0 {
			r.fwd_from = m.Object()
		}
		if r.flags&(1<<11) != 0 {
			r.via_bot_id = m.Long()
		}
		if r.flags&(1<<3) != 0 {
			r.reply_to = m.Object()
		}
		r.date = m.Int()
		r.message = m.String()
		if r.flags&(1<<9) != 0 {
			r.media = m.Object()
		}
		if r.flags&(1<<6) != 0 {
			r.reply_markup = m.Object()
		}
		if r.flags&(1<<7) != 0 {
			r.entities = m.Vector()
		}
		if r.flags&(1<<10) != 0 {
			r.views = m.Int()
		}
		if r.flags&(1<<10) != 0 {
			r.forwards = m.Int()
		}
		if r.flags&(1<<23) != 0 {
			r.replies = m.Object()
		}
		if r.flags&(1<<15) != 0 {
			r.edit_date = m.Int()
		}
		if r.flags&(1<<16) != 0 {
			r.post_author = m.String()
		}
		if r.flags&(1<<17) != 0 {
			r.grouped_id = m.Long()
		}
		if r.flags&(1<<20) != 0 {
			r.reactions = m.Object()
		}
		if r.flags&(1<<22) != 0 {
			r.restriction_reason = m.Vector()
		}
		if r.flags&(1<<25) != 0 {
			r.ttl_period = m.Int()
		}
		return r
	case crc_messageService:
		r := TL_messageService{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.out = true
		}
		if r.flags&(1<<4) != 0 {
			r.mentioned = true
		}
		if r.flags&(1<<5) != 0 {
			r.media_unread = true
		}
		if r.flags&(1<<13) != 0 {
			r.silent = true
		}
		if r.flags&(1<<14) != 0 {
			r.post = true
		}
		if r.flags&(1<<19) != 0 {
			r.legacy = true
		}
		r.id = m.Int()
		if r.flags&(1<<8) != 0 {
			r.from_id = m.Object()
		}
		r.peer_id = m.Object()
		if r.flags&(1<<3) != 0 {
			r.reply_to = m.Object()
		}
		r.date = m.Int()
		r.action = m.Object()
		if r.flags&(1<<25) != 0 {
			r.ttl_period = m.Int()
		}
		return r
	case crc_messageMediaEmpty:
		r := TL_messageMediaEmpty{}
		return r
	case crc_messageMediaPhoto:
		r := TL_messageMediaPhoto{}
		r.flags = m.Int()
		if r.flags&(1<<3) != 0 {
			r.spoiler = true
		}
		if r.flags&(1<<0) != 0 {
			r.photo = m.Object()
		}
		if r.flags&(1<<2) != 0 {
			r.ttl_seconds = m.Int()
		}
		return r
	case crc_messageMediaGeo:
		r := TL_messageMediaGeo{}
		r.geo = m.Object()
		return r
	case crc_messageMediaContact:
		r := TL_messageMediaContact{}
		r.phone_number = m.String()
		r.first_name = m.String()
		r.last_name = m.String()
		r.vcard = m.String()
		r.user_id = m.Long()
		return r
	case crc_messageMediaUnsupported:
		r := TL_messageMediaUnsupported{}
		return r
	case crc_messageActionEmpty:
		r := TL_messageActionEmpty{}
		return r
	case crc_messageActionChatCreate:
		r := TL_messageActionChatCreate{}
		r.title = m.String()
		r.users = m.VectorLong()
		return r
	case crc_messageActionChatEditTitle:
		r := TL_messageActionChatEditTitle{}
		r.title = m.String()
		return r
	case crc_messageActionChatEditPhoto:
		r := TL_messageActionChatEditPhoto{}
		r.photo = m.Object()
		return r
	case crc_messageActionChatDeletePhoto:
		r := TL_messageActionChatDeletePhoto{}
		return r
	case crc_messageActionChatAddUser:
		r := TL_messageActionChatAddUser{}
		r.users = m.VectorLong()
		return r
	case crc_messageActionChatDeleteUser:
		r := TL_messageActionChatDeleteUser{}
		r.user_id = m.Long()
		return r
	case crc_dialog:
		r := TL_dialog{}
		r.flags = m.Int()
		if r.flags&(1<<2) != 0 {
			r.pinned = true
		}
		if r.flags&(1<<3) != 0 {
			r.unread_mark = true
		}
		if r.flags&(1<<6) != 0 {
			r.view_forum_as_messages = true
		}
		r.peer = m.Object()
		r.top_message = m.Int()
		r.read_inbox_max_id = m.Int()
		r.read_outbox_max_id = m.Int()
		r.unread_count = m.Int()
		r.unread_mentions_count = m.Int()
		r.unread_reactions_count = m.Int()
		r.notify_settings = m.Object()
		if r.flags&(1<<0) != 0 {
			r.pts = m.Int()
		}
		if r.flags&(1<<1) != 0 {
			r.draft = m.Object()
		}
		if r.flags&(1<<4) != 0 {
			r.folder_id = m.Int()
		}
		if r.flags&(1<<5) != 0 {
			r.ttl_period = m.Int()
		}
		return r
	case crc_photoEmpty:
		r := TL_photoEmpty{}
		r.id = m.Long()
		return r
	case crc_photo:
		r := TL_photo{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.has_stickers = true
		}
		r.id = m.Long()
		r.access_hash = m.Long()
		r.file_reference = m.StringBytes()
		r.date = m.Int()
		r.sizes = m.Vector()
		if r.flags&(1<<1) != 0 {
			r.video_sizes = m.Vector()
		}
		r.dc_id = m.Int()
		return r
	case crc_photoSizeEmpty:
		r := TL_photoSizeEmpty{}
		r._type = m.String()
		return r
	case crc_photoSize:
		r := TL_photoSize{}
		r._type = m.String()
		r.w = m.Int()
		r.h = m.Int()
		r.size = m.Int()
		return r
	case crc_photoCachedSize:
		r := TL_photoCachedSize{}
		r._type = m.String()
		r.w = m.Int()
		r.h = m.Int()
		r.bytes = m.StringBytes()
		return r
	case crc_geoPointEmpty:
		r := TL_geoPointEmpty{}
		return r
	case crc_geoPoint:
		r := TL_geoPoint{}
		r.flags = m.Int()
		r.long = m.Double()
		r.lat = m.Double()
		r.access_hash = m.Long()
		if r.flags&(1<<0) != 0 {
			r.accuracy_radius = m.Int()
		}
		return r
	case crc_auth_sentCode:
		r := TL_auth_sentCode{}
		r.flags = m.Int()
		r._type = m.Object()
		r.phone_code_hash = m.String()
		if r.flags&(1<<1) != 0 {
			r.next_type = m.Object()
		}
		if r.flags&(1<<2) != 0 {
			r.timeout = m.Int()
		}
		return r
	case crc_auth_authorization:
		r := TL_auth_authorization{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.setup_password_required = true
		}
		if r.flags&(1<<1) != 0 {
			r.otherwise_relogin_days = m.Int()
		}
		if r.flags&(1<<0) != 0 {
			r.tmp_sessions = m.Int()
		}
		if r.flags&(1<<2) != 0 {
			r.future_auth_token = m.StringBytes()
		}
		r.user = m.Object()
		return r
	case crc_auth_exportedAuthorization:
		r := TL_auth_exportedAuthorization{}
		r.id = m.Long()
		r.bytes = m.StringBytes()
		return r
	case crc_inputNotifyPeer:
		r := TL_inputNotifyPeer{}
		r.peer = m.Object()
		return r
	case crc_inputNotifyUsers:
		r := TL_inputNotifyUsers{}
		return r
	case crc_inputNotifyChats:
		r := TL_inputNotifyChats{}
		return r
	case crc_inputPeerNotifySettings:
		r := TL_inputPeerNotifySettings{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.show_previews = m.Object()
		}
		if r.flags&(1<<1) != 0 {
			r.silent = m.Object()
		}
		if r.flags&(1<<2) != 0 {
			r.mute_until = m.Int()
		}
		if r.flags&(1<<3) != 0 {
			r.sound = m.Object()
		}
		if r.flags&(1<<6) != 0 {
			r.stories_muted = m.Object()
		}
		if r.flags&(1<<7) != 0 {
			r.stories_hide_sender = m.Object()
		}
		if r.flags&(1<<8) != 0 {
			r.stories_sound = m.Object()
		}
		return r
	case crc_peerNotifySettings:
		r := TL_peerNotifySettings{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.show_previews = m.Object()
		}
		if r.flags&(1<<1) != 0 {
			r.silent = m.Object()
		}
		if r.flags&(1<<2) != 0 {
			r.mute_until = m.Int()
		}
		if r.flags&(1<<3) != 0 {
			r.ios_sound = m.Object()
		}
		if r.flags&(1<<4) != 0 {
			r.android_sound = m.Object()
		}
		if r.flags&(1<<5) != 0 {
			r.other_sound = m.Object()
		}
		if r.flags&(1<<6) != 0 {
			r.stories_muted = m.Object()
		}
		if r.flags&(1<<7) != 0 {
			r.stories_hide_sender = m.Object()
		}
		if r.flags&(1<<8) != 0 {
			r.stories_ios_sound = m.Object()
		}
		if r.flags&(1<<9) != 0 {
			r.stories_android_sound = m.Object()
		}
		if r.flags&(1<<10) != 0 {
			r.stories_other_sound = m.Object()
		}
		return r
	case crc_peerSettings:
		r := TL_peerSettings{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.report_spam = true
		}
		if r.flags&(1<<1) != 0 {
			r.add_contact = true
		}
		if r.flags&(1<<2) != 0 {
			r.block_contact = true
		}
		if r.flags&(1<<3) != 0 {
			r.share_contact = true
		}
		if r.flags&(1<<4) != 0 {
			r.need_contacts_exception = true
		}
		if r.flags&(1<<5) != 0 {
			r.report_geo = true
		}
		if r.flags&(1<<7) != 0 {
			r.autoarchived = true
		}
		if r.flags&(1<<8) != 0 {
			r.invite_members = true
		}
		if r.flags&(1<<10) != 0 {
			r.request_chat_broadcast = true
		}
		if r.flags&(1<<6) != 0 {
			r.geo_distance = m.Int()
		}
		if r.flags&(1<<9) != 0 {
			r.request_chat_title = m.String()
		}
		if r.flags&(1<<9) != 0 {
			r.request_chat_date = m.Int()
		}
		return r
	case crc_wallPaper:
		r := TL_wallPaper{}
		r.id = m.Long()
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.creator = true
		}
		if r.flags&(1<<1) != 0 {
			r._default = true
		}
		if r.flags&(1<<3) != 0 {
			r.pattern = true
		}
		if r.flags&(1<<4) != 0 {
			r.dark = true
		}
		r.access_hash = m.Long()
		r.slug = m.String()
		r.document = m.Object()
		if r.flags&(1<<2) != 0 {
			r.settings = m.Object()
		}
		return r
	case crc_inputReportReasonSpam:
		r := TL_inputReportReasonSpam{}
		return r
	case crc_inputReportReasonViolence:
		r := TL_inputReportReasonViolence{}
		return r
	case crc_inputReportReasonPornography:
		r := TL_inputReportReasonPornography{}
		return r
	case crc_inputReportReasonChildAbuse:
		r := TL_inputReportReasonChildAbuse{}
		return r
	case crc_inputReportReasonOther:
		r := TL_inputReportReasonOther{}
		return r
	case crc_userFull:
		r := TL_userFull{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.blocked = true
		}
		if r.flags&(1<<4) != 0 {
			r.phone_calls_available = true
		}
		if r.flags&(1<<5) != 0 {
			r.phone_calls_private = true
		}
		if r.flags&(1<<7) != 0 {
			r.can_pin_message = true
		}
		if r.flags&(1<<12) != 0 {
			r.has_scheduled = true
		}
		if r.flags&(1<<13) != 0 {
			r.video_calls_available = true
		}
		if r.flags&(1<<20) != 0 {
			r.voice_messages_forbidden = true
		}
		if r.flags&(1<<23) != 0 {
			r.translations_disabled = true
		}
		if r.flags&(1<<26) != 0 {
			r.stories_pinned_available = true
		}
		if r.flags&(1<<27) != 0 {
			r.blocked_my_stories_from = true
		}
		if r.flags&(1<<28) != 0 {
			r.wallpaper_overridden = true
		}
		r.id = m.Long()
		if r.flags&(1<<1) != 0 {
			r.about = m.String()
		}
		r.settings = m.Object()
		if r.flags&(1<<21) != 0 {
			r.personal_photo = m.Object()
		}
		if r.flags&(1<<2) != 0 {
			r.profile_photo = m.Object()
		}
		if r.flags&(1<<22) != 0 {
			r.fallback_photo = m.Object()
		}
		r.notify_settings = m.Object()
		if r.flags&(1<<3) != 0 {
			r.bot_info = m.Object()
		}
		if r.flags&(1<<6) != 0 {
			r.pinned_msg_id = m.Int()
		}
		r.common_chats_count = m.Int()
		if r.flags&(1<<11) != 0 {
			r.folder_id = m.Int()
		}
		if r.flags&(1<<14) != 0 {
			r.ttl_period = m.Int()
		}
		if r.flags&(1<<15) != 0 {
			r.theme_emoticon = m.String()
		}
		if r.flags&(1<<16) != 0 {
			r.private_forward_name = m.String()
		}
		if r.flags&(1<<17) != 0 {
			r.bot_group_admin_rights = m.Object()
		}
		if r.flags&(1<<18) != 0 {
			r.bot_broadcast_admin_rights = m.Object()
		}
		if r.flags&(1<<19) != 0 {
			r.premium_gifts = m.Vector()
		}
		if r.flags&(1<<24) != 0 {
			r.wallpaper = m.Object()
		}
		if r.flags&(1<<25) != 0 {
			r.stories = m.Object()
		}
		return r
	case crc_contact:
		r := TL_contact{}
		r.user_id = m.Long()
		r.mutual = m.Object()
		return r
	case crc_importedContact:
		r := TL_importedContact{}
		r.user_id = m.Long()
		r.client_id = m.Long()
		return r
	case crc_contactStatus:
		r := TL_contactStatus{}
		r.user_id = m.Long()
		r.status = m.Object()
		return r
	case crc_contacts_contactsNotModified:
		r := TL_contacts_contactsNotModified{}
		return r
	case crc_contacts_contacts:
		r := TL_contacts_contacts{}
		r.contacts = m.Vector()
		r.saved_count = m.Int()
		r.users = m.Vector()
		return r
	case crc_contacts_importedContacts:
		r := TL_contacts_importedContacts{}
		r.imported = m.Vector()
		r.popular_invites = m.Vector()
		r.retry_contacts = m.VectorLong()
		r.users = m.Vector()
		return r
	case crc_contacts_blocked:
		r := TL_contacts_blocked{}
		r.blocked = m.Vector()
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_contacts_blockedSlice:
		r := TL_contacts_blockedSlice{}
		r.count = m.Int()
		r.blocked = m.Vector()
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_messages_dialogs:
		r := TL_messages_dialogs{}
		r.dialogs = m.Vector()
		r.messages = m.Vector()
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_messages_dialogsSlice:
		r := TL_messages_dialogsSlice{}
		r.count = m.Int()
		r.dialogs = m.Vector()
		r.messages = m.Vector()
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_messages_messages:
		r := TL_messages_messages{}
		r.messages = m.Vector()
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_messages_messagesSlice:
		r := TL_messages_messagesSlice{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.inexact = true
		}
		r.count = m.Int()
		if r.flags&(1<<0) != 0 {
			r.next_rate = m.Int()
		}
		if r.flags&(1<<2) != 0 {
			r.offset_id_offset = m.Int()
		}
		r.messages = m.Vector()
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_messages_chats:
		r := TL_messages_chats{}
		r.chats = m.Vector()
		return r
	case crc_messages_chatFull:
		r := TL_messages_chatFull{}
		r.full_chat = m.Object()
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_messages_affectedHistory:
		r := TL_messages_affectedHistory{}
		r.pts = m.Int()
		r.pts_count = m.Int()
		r.offset = m.Int()
		return r
	case crc_inputMessagesFilterEmpty:
		r := TL_inputMessagesFilterEmpty{}
		return r
	case crc_inputMessagesFilterPhotos:
		r := TL_inputMessagesFilterPhotos{}
		return r
	case crc_inputMessagesFilterVideo:
		r := TL_inputMessagesFilterVideo{}
		return r
	case crc_inputMessagesFilterPhotoVideo:
		r := TL_inputMessagesFilterPhotoVideo{}
		return r
	case crc_inputMessagesFilterDocument:
		r := TL_inputMessagesFilterDocument{}
		return r
	case crc_inputMessagesFilterUrl:
		r := TL_inputMessagesFilterUrl{}
		return r
	case crc_inputMessagesFilterGif:
		r := TL_inputMessagesFilterGif{}
		return r
	case crc_updateNewMessage:
		r := TL_updateNewMessage{}
		r.message = m.Object()
		r.pts = m.Int()
		r.pts_count = m.Int()
		return r
	case crc_updateMessageID:
		r := TL_updateMessageID{}
		r.id = m.Int()
		r.random_id = m.Long()
		return r
	case crc_updateDeleteMessages:
		r := TL_updateDeleteMessages{}
		r.messages = m.VectorInt()
		r.pts = m.Int()
		r.pts_count = m.Int()
		return r
	case crc_updateUserTyping:
		r := TL_updateUserTyping{}
		r.user_id = m.Long()
		r.action = m.Object()
		return r
	case crc_updateChatUserTyping:
		r := TL_updateChatUserTyping{}
		r.chat_id = m.Long()
		r.from_id = m.Object()
		r.action = m.Object()
		return r
	case crc_updateChatParticipants:
		r := TL_updateChatParticipants{}
		r.participants = m.Object()
		return r
	case crc_updateUserStatus:
		r := TL_updateUserStatus{}
		r.user_id = m.Long()
		r.status = m.Object()
		return r
	case crc_updateUserName:
		r := TL_updateUserName{}
		r.user_id = m.Long()
		r.first_name = m.String()
		r.last_name = m.String()
		r.usernames = m.Vector()
		return r
	case crc_updateNewAuthorization:
		r := TL_updateNewAuthorization{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.unconfirmed = true
		}
		r.hash = m.Long()
		if r.flags&(1<<0) != 0 {
			r.date = m.Int()
		}
		if r.flags&(1<<0) != 0 {
			r.device = m.String()
		}
		if r.flags&(1<<0) != 0 {
			r.location = m.String()
		}
		return r
	case crc_updates_state:
		r := TL_updates_state{}
		r.pts = m.Int()
		r.qts = m.Int()
		r.date = m.Int()
		r.seq = m.Int()
		r.unread_count = m.Int()
		return r
	case crc_updates_differenceEmpty:
		r := TL_updates_differenceEmpty{}
		r.date = m.Int()
		r.seq = m.Int()
		return r
	case crc_updates_difference:
		r := TL_updates_difference{}
		r.new_messages = m.Vector()
		r.new_encrypted_messages = m.Vector()
		r.other_updates = m.Vector()
		r.chats = m.Vector()
		r.users = m.Vector()
		r.state = m.Object()
		return r
	case crc_updates_differenceSlice:
		r := TL_updates_differenceSlice{}
		r.new_messages = m.Vector()
		r.new_encrypted_messages = m.Vector()
		r.other_updates = m.Vector()
		r.chats = m.Vector()
		r.users = m.Vector()
		r.intermediate_state = m.Object()
		return r
	case crc_updatesTooLong:
		r := TL_updatesTooLong{}
		return r
	case crc_updateShortMessage:
		r := TL_updateShortMessage{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.out = true
		}
		if r.flags&(1<<4) != 0 {
			r.mentioned = true
		}
		if r.flags&(1<<5) != 0 {
			r.media_unread = true
		}
		if r.flags&(1<<13) != 0 {
			r.silent = true
		}
		r.id = m.Int()
		r.user_id = m.Long()
		r.message = m.String()
		r.pts = m.Int()
		r.pts_count = m.Int()
		r.date = m.Int()
		if r.flags&(1<<2) != 0 {
			r.fwd_from = m.Object()
		}
		if r.flags&(1<<11) != 0 {
			r.via_bot_id = m.Long()
		}
		if r.flags&(1<<3) != 0 {
			r.reply_to = m.Object()
		}
		if r.flags&(1<<7) != 0 {
			r.entities = m.Vector()
		}
		if r.flags&(1<<25) != 0 {
			r.ttl_period = m.Int()
		}
		return r
	case crc_updateShortChatMessage:
		r := TL_updateShortChatMessage{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.out = true
		}
		if r.flags&(1<<4) != 0 {
			r.mentioned = true
		}
		if r.flags&(1<<5) != 0 {
			r.media_unread = true
		}
		if r.flags&(1<<13) != 0 {
			r.silent = true
		}
		r.id = m.Int()
		r.from_id = m.Long()
		r.chat_id = m.Long()
		r.message = m.String()
		r.pts = m.Int()
		r.pts_count = m.Int()
		r.date = m.Int()
		if r.flags&(1<<2) != 0 {
			r.fwd_from = m.Object()
		}
		if r.flags&(1<<11) != 0 {
			r.via_bot_id = m.Long()
		}
		if r.flags&(1<<3) != 0 {
			r.reply_to = m.Object()
		}
		if r.flags&(1<<7) != 0 {
			r.entities = m.Vector()
		}
		if r.flags&(1<<25) != 0 {
			r.ttl_period = m.Int()
		}
		return r
	case crc_updateShort:
		r := TL_updateShort{}
		r.update = m.Object()
		r.date = m.Int()
		return r
	case crc_updatesCombined:
		r := TL_updatesCombined{}
		r.updates = m.Vector()
		r.users = m.Vector()
		r.chats = m.Vector()
		r.date = m.Int()
		r.seq_start = m.Int()
		r.seq = m.Int()
		return r
	case crc_updates:
		r := TL_updates{}
		r.updates = m.Vector()
		r.users = m.Vector()
		r.chats = m.Vector()
		r.date = m.Int()
		r.seq = m.Int()
		return r
	case crc_photos_photos:
		r := TL_photos_photos{}
		r.photos = m.Vector()
		r.users = m.Vector()
		return r
	case crc_photos_photosSlice:
		r := TL_photos_photosSlice{}
		r.count = m.Int()
		r.photos = m.Vector()
		r.users = m.Vector()
		return r
	case crc_photos_photo:
		r := TL_photos_photo{}
		r.photo = m.Object()
		r.users = m.Vector()
		return r
	case crc_upload_file:
		r := TL_upload_file{}
		r._type = m.Object()
		r.mtime = m.Int()
		r.bytes = m.StringBytes()
		return r
	case crc_dcOption:
		r := TL_dcOption{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.ipv6 = true
		}
		if r.flags&(1<<1) != 0 {
			r.media_only = true
		}
		if r.flags&(1<<2) != 0 {
			r.tcpo_only = true
		}
		if r.flags&(1<<3) != 0 {
			r.cdn = true
		}
		if r.flags&(1<<4) != 0 {
			r.static = true
		}
		if r.flags&(1<<5) != 0 {
			r.this_port_only = true
		}
		r.id = m.Int()
		r.ip_address = m.String()
		r.port = m.Int()
		if r.flags&(1<<10) != 0 {
			r.secret = m.StringBytes()
		}
		return r
	case crc_config:
		r := TL_config{}
		r.flags = m.Int()
		if r.flags&(1<<3) != 0 {
			r.default_p2p_contacts = true
		}
		if r.flags&(1<<4) != 0 {
			r.preload_featured_stickers = true
		}
		if r.flags&(1<<6) != 0 {
			r.revoke_pm_inbox = true
		}
		if r.flags&(1<<8) != 0 {
			r.blocked_mode = true
		}
		if r.flags&(1<<14) != 0 {
			r.force_try_ipv6 = true
		}
		r.date = m.Int()
		r.expires = m.Int()
		r.test_mode = m.Object()
		r.this_dc = m.Int()
		r.dc_options = m.Vector()
		r.dc_txt_domain_name = m.String()
		r.chat_size_max = m.Int()
		r.megagroup_size_max = m.Int()
		r.forwarded_count_max = m.Int()
		r.online_update_period_ms = m.Int()
		r.offline_blur_timeout_ms = m.Int()
		r.offline_idle_timeout_ms = m.Int()
		r.online_cloud_timeout_ms = m.Int()
		r.notify_cloud_delay_ms = m.Int()
		r.notify_default_delay_ms = m.Int()
		r.push_chat_period_ms = m.Int()
		r.push_chat_limit = m.Int()
		r.edit_time_limit = m.Int()
		r.revoke_time_limit = m.Int()
		r.revoke_pm_time_limit = m.Int()
		r.rating_e_decay = m.Int()
		r.stickers_recent_limit = m.Int()
		r.channels_read_media_period = m.Int()
		if r.flags&(1<<0) != 0 {
			r.tmp_sessions = m.Int()
		}
		r.call_receive_timeout_ms = m.Int()
		r.call_ring_timeout_ms = m.Int()
		r.call_connect_timeout_ms = m.Int()
		r.call_packet_timeout_ms = m.Int()
		r.me_url_prefix = m.String()
		if r.flags&(1<<7) != 0 {
			r.autoupdate_url_prefix = m.String()
		}
		if r.flags&(1<<9) != 0 {
			r.gif_search_username = m.String()
		}
		if r.flags&(1<<10) != 0 {
			r.venue_search_username = m.String()
		}
		if r.flags&(1<<11) != 0 {
			r.img_search_username = m.String()
		}
		if r.flags&(1<<12) != 0 {
			r.static_maps_provider = m.String()
		}
		r.caption_length_max = m.Int()
		r.message_length_max = m.Int()
		r.webfile_dc_id = m.Int()
		if r.flags&(1<<2) != 0 {
			r.suggested_lang_code = m.String()
		}
		if r.flags&(1<<2) != 0 {
			r.lang_pack_version = m.Int()
		}
		if r.flags&(1<<2) != 0 {
			r.base_lang_pack_version = m.Int()
		}
		if r.flags&(1<<15) != 0 {
			r.reactions_default = m.Object()
		}
		if r.flags&(1<<16) != 0 {
			r.autologin_token = m.String()
		}
		return r
	case crc_nearestDc:
		r := TL_nearestDc{}
		r.country = m.String()
		r.this_dc = m.Int()
		r.nearest_dc = m.Int()
		return r
	case crc_help_appUpdate:
		r := TL_help_appUpdate{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.can_not_skip = true
		}
		r.id = m.Int()
		r.version = m.String()
		r.text = m.String()
		r.entities = m.Vector()
		if r.flags&(1<<1) != 0 {
			r.document = m.Object()
		}
		if r.flags&(1<<2) != 0 {
			r.url = m.String()
		}
		if r.flags&(1<<3) != 0 {
			r.sticker = m.Object()
		}
		return r
	case crc_help_noAppUpdate:
		r := TL_help_noAppUpdate{}
		return r
	case crc_help_inviteText:
		r := TL_help_inviteText{}
		r.message = m.String()
		return r
	case crc_updateNewEncryptedMessage:
		r := TL_updateNewEncryptedMessage{}
		r.message = m.Object()
		r.qts = m.Int()
		return r
	case crc_updateEncryptedChatTyping:
		r := TL_updateEncryptedChatTyping{}
		r.chat_id = m.Int()
		return r
	case crc_updateEncryption:
		r := TL_updateEncryption{}
		r.chat = m.Object()
		r.date = m.Int()
		return r
	case crc_updateEncryptedMessagesRead:
		r := TL_updateEncryptedMessagesRead{}
		r.chat_id = m.Int()
		r.max_date = m.Int()
		r.date = m.Int()
		return r
	case crc_encryptedChatEmpty:
		r := TL_encryptedChatEmpty{}
		r.id = m.Int()
		return r
	case crc_encryptedChatWaiting:
		r := TL_encryptedChatWaiting{}
		r.id = m.Int()
		r.access_hash = m.Long()
		r.date = m.Int()
		r.admin_id = m.Long()
		r.participant_id = m.Long()
		return r
	case crc_encryptedChatRequested:
		r := TL_encryptedChatRequested{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.folder_id = m.Int()
		}
		r.id = m.Int()
		r.access_hash = m.Long()
		r.date = m.Int()
		r.admin_id = m.Long()
		r.participant_id = m.Long()
		r.g_a = m.StringBytes()
		return r
	case crc_encryptedChat:
		r := TL_encryptedChat{}
		r.id = m.Int()
		r.access_hash = m.Long()
		r.date = m.Int()
		r.admin_id = m.Long()
		r.participant_id = m.Long()
		r.g_a_or_b = m.StringBytes()
		r.key_fingerprint = m.Long()
		return r
	case crc_encryptedChatDiscarded:
		r := TL_encryptedChatDiscarded{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.history_deleted = true
		}
		r.id = m.Int()
		return r
	case crc_inputEncryptedChat:
		r := TL_inputEncryptedChat{}
		r.chat_id = m.Int()
		r.access_hash = m.Long()
		return r
	case crc_encryptedFileEmpty:
		r := TL_encryptedFileEmpty{}
		return r
	case crc_encryptedFile:
		r := TL_encryptedFile{}
		r.id = m.Long()
		r.access_hash = m.Long()
		r.size = m.Long()
		r.dc_id = m.Int()
		r.key_fingerprint = m.Int()
		return r
	case crc_inputEncryptedFileEmpty:
		r := TL_inputEncryptedFileEmpty{}
		return r
	case crc_inputEncryptedFileUploaded:
		r := TL_inputEncryptedFileUploaded{}
		r.id = m.Long()
		r.parts = m.Int()
		r.md5_checksum = m.String()
		r.key_fingerprint = m.Int()
		return r
	case crc_inputEncryptedFile:
		r := TL_inputEncryptedFile{}
		r.id = m.Long()
		r.access_hash = m.Long()
		return r
	case crc_inputEncryptedFileLocation:
		r := TL_inputEncryptedFileLocation{}
		r.id = m.Long()
		r.access_hash = m.Long()
		return r
	case crc_encryptedMessage:
		r := TL_encryptedMessage{}
		r.random_id = m.Long()
		r.chat_id = m.Int()
		r.date = m.Int()
		r.bytes = m.StringBytes()
		r.file = m.Object()
		return r
	case crc_encryptedMessageService:
		r := TL_encryptedMessageService{}
		r.random_id = m.Long()
		r.chat_id = m.Int()
		r.date = m.Int()
		r.bytes = m.StringBytes()
		return r
	case crc_messages_dhConfigNotModified:
		r := TL_messages_dhConfigNotModified{}
		r.random = m.StringBytes()
		return r
	case crc_messages_dhConfig:
		r := TL_messages_dhConfig{}
		r.g = m.Int()
		r.p = m.StringBytes()
		r.version = m.Int()
		r.random = m.StringBytes()
		return r
	case crc_messages_sentEncryptedMessage:
		r := TL_messages_sentEncryptedMessage{}
		r.date = m.Int()
		return r
	case crc_messages_sentEncryptedFile:
		r := TL_messages_sentEncryptedFile{}
		r.date = m.Int()
		r.file = m.Object()
		return r
	case crc_inputFileBig:
		r := TL_inputFileBig{}
		r.id = m.Long()
		r.parts = m.Int()
		r.name = m.String()
		return r
	case crc_inputEncryptedFileBigUploaded:
		r := TL_inputEncryptedFileBigUploaded{}
		r.id = m.Long()
		r.parts = m.Int()
		r.key_fingerprint = m.Int()
		return r
	case crc_updateChatParticipantAdd:
		r := TL_updateChatParticipantAdd{}
		r.chat_id = m.Long()
		r.user_id = m.Long()
		r.inviter_id = m.Long()
		r.date = m.Int()
		r.version = m.Int()
		return r
	case crc_updateChatParticipantDelete:
		r := TL_updateChatParticipantDelete{}
		r.chat_id = m.Long()
		r.user_id = m.Long()
		r.version = m.Int()
		return r
	case crc_updateDcOptions:
		r := TL_updateDcOptions{}
		r.dc_options = m.Vector()
		return r
	case crc_inputMediaUploadedDocument:
		r := TL_inputMediaUploadedDocument{}
		r.flags = m.Int()
		if r.flags&(1<<3) != 0 {
			r.nosound_video = true
		}
		if r.flags&(1<<4) != 0 {
			r.force_file = true
		}
		if r.flags&(1<<5) != 0 {
			r.spoiler = true
		}
		r.file = m.Object()
		if r.flags&(1<<2) != 0 {
			r.thumb = m.Object()
		}
		r.mime_type = m.String()
		r.attributes = m.Vector()
		if r.flags&(1<<0) != 0 {
			r.stickers = m.Vector()
		}
		if r.flags&(1<<1) != 0 {
			r.ttl_seconds = m.Int()
		}
		return r
	case crc_inputMediaDocument:
		r := TL_inputMediaDocument{}
		r.flags = m.Int()
		if r.flags&(1<<2) != 0 {
			r.spoiler = true
		}
		r.id = m.Object()
		if r.flags&(1<<0) != 0 {
			r.ttl_seconds = m.Int()
		}
		if r.flags&(1<<1) != 0 {
			r.query = m.String()
		}
		return r
	case crc_messageMediaDocument:
		r := TL_messageMediaDocument{}
		r.flags = m.Int()
		if r.flags&(1<<3) != 0 {
			r.nopremium = true
		}
		if r.flags&(1<<4) != 0 {
			r.spoiler = true
		}
		if r.flags&(1<<6) != 0 {
			r.video = true
		}
		if r.flags&(1<<7) != 0 {
			r.round = true
		}
		if r.flags&(1<<8) != 0 {
			r.voice = true
		}
		if r.flags&(1<<0) != 0 {
			r.document = m.Object()
		}
		if r.flags&(1<<5) != 0 {
			r.alt_document = m.Object()
		}
		if r.flags&(1<<2) != 0 {
			r.ttl_seconds = m.Int()
		}
		return r
	case crc_inputDocumentEmpty:
		r := TL_inputDocumentEmpty{}
		return r
	case crc_inputDocument:
		r := TL_inputDocument{}
		r.id = m.Long()
		r.access_hash = m.Long()
		r.file_reference = m.StringBytes()
		return r
	case crc_inputDocumentFileLocation:
		r := TL_inputDocumentFileLocation{}
		r.id = m.Long()
		r.access_hash = m.Long()
		r.file_reference = m.StringBytes()
		r.thumb_size = m.String()
		return r
	case crc_documentEmpty:
		r := TL_documentEmpty{}
		r.id = m.Long()
		return r
	case crc_document:
		r := TL_document{}
		r.flags = m.Int()
		r.id = m.Long()
		r.access_hash = m.Long()
		r.file_reference = m.StringBytes()
		r.date = m.Int()
		r.mime_type = m.String()
		r.size = m.Long()
		if r.flags&(1<<0) != 0 {
			r.thumbs = m.Vector()
		}
		if r.flags&(1<<1) != 0 {
			r.video_thumbs = m.Vector()
		}
		r.dc_id = m.Int()
		r.attributes = m.Vector()
		return r
	case crc_help_support:
		r := TL_help_support{}
		r.phone_number = m.String()
		r.user = m.Object()
		return r
	case crc_notifyPeer:
		r := TL_notifyPeer{}
		r.peer = m.Object()
		return r
	case crc_notifyUsers:
		r := TL_notifyUsers{}
		return r
	case crc_notifyChats:
		r := TL_notifyChats{}
		return r
	case crc_updateNotifySettings:
		r := TL_updateNotifySettings{}
		r.peer = m.Object()
		r.notify_settings = m.Object()
		return r
	case crc_sendMessageTypingAction:
		r := TL_sendMessageTypingAction{}
		return r
	case crc_sendMessageCancelAction:
		r := TL_sendMessageCancelAction{}
		return r
	case crc_sendMessageRecordVideoAction:
		r := TL_sendMessageRecordVideoAction{}
		return r
	case crc_sendMessageUploadVideoAction:
		r := TL_sendMessageUploadVideoAction{}
		r.progress = m.Int()
		return r
	case crc_sendMessageRecordAudioAction:
		r := TL_sendMessageRecordAudioAction{}
		return r
	case crc_sendMessageUploadAudioAction:
		r := TL_sendMessageUploadAudioAction{}
		r.progress = m.Int()
		return r
	case crc_sendMessageUploadPhotoAction:
		r := TL_sendMessageUploadPhotoAction{}
		r.progress = m.Int()
		return r
	case crc_sendMessageUploadDocumentAction:
		r := TL_sendMessageUploadDocumentAction{}
		r.progress = m.Int()
		return r
	case crc_sendMessageGeoLocationAction:
		r := TL_sendMessageGeoLocationAction{}
		return r
	case crc_sendMessageChooseContactAction:
		r := TL_sendMessageChooseContactAction{}
		return r
	case crc_contacts_found:
		r := TL_contacts_found{}
		r.my_results = m.Vector()
		r.results = m.Vector()
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_updateServiceNotification:
		r := TL_updateServiceNotification{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.popup = true
		}
		if r.flags&(1<<2) != 0 {
			r.invert_media = true
		}
		if r.flags&(1<<1) != 0 {
			r.inbox_date = m.Int()
		}
		r._type = m.String()
		r.message = m.String()
		r.media = m.Object()
		r.entities = m.Vector()
		return r
	case crc_userStatusRecently:
		r := TL_userStatusRecently{}
		return r
	case crc_userStatusLastWeek:
		r := TL_userStatusLastWeek{}
		return r
	case crc_userStatusLastMonth:
		r := TL_userStatusLastMonth{}
		return r
	case crc_updatePrivacy:
		r := TL_updatePrivacy{}
		r.key = m.Object()
		r.rules = m.Vector()
		return r
	case crc_inputPrivacyKeyStatusTimestamp:
		r := TL_inputPrivacyKeyStatusTimestamp{}
		return r
	case crc_privacyKeyStatusTimestamp:
		r := TL_privacyKeyStatusTimestamp{}
		return r
	case crc_inputPrivacyValueAllowContacts:
		r := TL_inputPrivacyValueAllowContacts{}
		return r
	case crc_inputPrivacyValueAllowAll:
		r := TL_inputPrivacyValueAllowAll{}
		return r
	case crc_inputPrivacyValueAllowUsers:
		r := TL_inputPrivacyValueAllowUsers{}
		r.users = m.Vector()
		return r
	case crc_inputPrivacyValueDisallowContacts:
		r := TL_inputPrivacyValueDisallowContacts{}
		return r
	case crc_inputPrivacyValueDisallowAll:
		r := TL_inputPrivacyValueDisallowAll{}
		return r
	case crc_inputPrivacyValueDisallowUsers:
		r := TL_inputPrivacyValueDisallowUsers{}
		r.users = m.Vector()
		return r
	case crc_privacyValueAllowContacts:
		r := TL_privacyValueAllowContacts{}
		return r
	case crc_privacyValueAllowAll:
		r := TL_privacyValueAllowAll{}
		return r
	case crc_privacyValueAllowUsers:
		r := TL_privacyValueAllowUsers{}
		r.users = m.VectorLong()
		return r
	case crc_privacyValueDisallowContacts:
		r := TL_privacyValueDisallowContacts{}
		return r
	case crc_privacyValueDisallowAll:
		r := TL_privacyValueDisallowAll{}
		return r
	case crc_privacyValueDisallowUsers:
		r := TL_privacyValueDisallowUsers{}
		r.users = m.VectorLong()
		return r
	case crc_account_privacyRules:
		r := TL_account_privacyRules{}
		r.rules = m.Vector()
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_accountDaysTTL:
		r := TL_accountDaysTTL{}
		r.days = m.Int()
		return r
	case crc_updateUserPhone:
		r := TL_updateUserPhone{}
		r.user_id = m.Long()
		r.phone = m.String()
		return r
	case crc_documentAttributeImageSize:
		r := TL_documentAttributeImageSize{}
		r.w = m.Int()
		r.h = m.Int()
		return r
	case crc_documentAttributeAnimated:
		r := TL_documentAttributeAnimated{}
		return r
	case crc_documentAttributeSticker:
		r := TL_documentAttributeSticker{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.mask = true
		}
		r.alt = m.String()
		r.stickerset = m.Object()
		if r.flags&(1<<0) != 0 {
			r.mask_coords = m.Object()
		}
		return r
	case crc_documentAttributeVideo:
		r := TL_documentAttributeVideo{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.round_message = true
		}
		if r.flags&(1<<1) != 0 {
			r.supports_streaming = true
		}
		if r.flags&(1<<3) != 0 {
			r.nosound = true
		}
		r.duration = m.Double()
		r.w = m.Int()
		r.h = m.Int()
		if r.flags&(1<<2) != 0 {
			r.preload_prefix_size = m.Int()
		}
		return r
	case crc_documentAttributeAudio:
		r := TL_documentAttributeAudio{}
		r.flags = m.Int()
		if r.flags&(1<<10) != 0 {
			r.voice = true
		}
		r.duration = m.Int()
		if r.flags&(1<<0) != 0 {
			r.title = m.String()
		}
		if r.flags&(1<<1) != 0 {
			r.performer = m.String()
		}
		if r.flags&(1<<2) != 0 {
			r.waveform = m.StringBytes()
		}
		return r
	case crc_documentAttributeFilename:
		r := TL_documentAttributeFilename{}
		r.file_name = m.String()
		return r
	case crc_messages_stickersNotModified:
		r := TL_messages_stickersNotModified{}
		return r
	case crc_messages_stickers:
		r := TL_messages_stickers{}
		r.hash = m.Long()
		r.stickers = m.Vector()
		return r
	case crc_stickerPack:
		r := TL_stickerPack{}
		r.emoticon = m.String()
		r.documents = m.VectorLong()
		return r
	case crc_messages_allStickersNotModified:
		r := TL_messages_allStickersNotModified{}
		return r
	case crc_messages_allStickers:
		r := TL_messages_allStickers{}
		r.hash = m.Long()
		r.sets = m.Vector()
		return r
	case crc_updateReadHistoryInbox:
		r := TL_updateReadHistoryInbox{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.folder_id = m.Int()
		}
		r.peer = m.Object()
		r.max_id = m.Int()
		r.still_unread_count = m.Int()
		r.pts = m.Int()
		r.pts_count = m.Int()
		return r
	case crc_updateReadHistoryOutbox:
		r := TL_updateReadHistoryOutbox{}
		r.peer = m.Object()
		r.max_id = m.Int()
		r.pts = m.Int()
		r.pts_count = m.Int()
		return r
	case crc_messages_affectedMessages:
		r := TL_messages_affectedMessages{}
		r.pts = m.Int()
		r.pts_count = m.Int()
		return r
	case crc_updateWebPage:
		r := TL_updateWebPage{}
		r.webpage = m.Object()
		r.pts = m.Int()
		r.pts_count = m.Int()
		return r
	case crc_webPageEmpty:
		r := TL_webPageEmpty{}
		r.flags = m.Int()
		r.id = m.Long()
		if r.flags&(1<<0) != 0 {
			r.url = m.String()
		}
		return r
	case crc_webPagePending:
		r := TL_webPagePending{}
		r.flags = m.Int()
		r.id = m.Long()
		if r.flags&(1<<0) != 0 {
			r.url = m.String()
		}
		r.date = m.Int()
		return r
	case crc_webPage:
		r := TL_webPage{}
		r.flags = m.Int()
		if r.flags&(1<<13) != 0 {
			r.has_large_media = true
		}
		r.id = m.Long()
		r.url = m.String()
		r.display_url = m.String()
		r.hash = m.Int()
		if r.flags&(1<<0) != 0 {
			r._type = m.String()
		}
		if r.flags&(1<<1) != 0 {
			r.site_name = m.String()
		}
		if r.flags&(1<<2) != 0 {
			r.title = m.String()
		}
		if r.flags&(1<<3) != 0 {
			r.description = m.String()
		}
		if r.flags&(1<<4) != 0 {
			r.photo = m.Object()
		}
		if r.flags&(1<<5) != 0 {
			r.embed_url = m.String()
		}
		if r.flags&(1<<5) != 0 {
			r.embed_type = m.String()
		}
		if r.flags&(1<<6) != 0 {
			r.embed_width = m.Int()
		}
		if r.flags&(1<<6) != 0 {
			r.embed_height = m.Int()
		}
		if r.flags&(1<<7) != 0 {
			r.duration = m.Int()
		}
		if r.flags&(1<<8) != 0 {
			r.author = m.String()
		}
		if r.flags&(1<<9) != 0 {
			r.document = m.Object()
		}
		if r.flags&(1<<10) != 0 {
			r.cached_page = m.Object()
		}
		if r.flags&(1<<12) != 0 {
			r.attributes = m.Vector()
		}
		return r
	case crc_messageMediaWebPage:
		r := TL_messageMediaWebPage{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.force_large_media = true
		}
		if r.flags&(1<<1) != 0 {
			r.force_small_media = true
		}
		if r.flags&(1<<3) != 0 {
			r.manual = true
		}
		if r.flags&(1<<4) != 0 {
			r.safe = true
		}
		r.webpage = m.Object()
		return r
	case crc_authorization:
		r := TL_authorization{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.current = true
		}
		if r.flags&(1<<1) != 0 {
			r.official_app = true
		}
		if r.flags&(1<<2) != 0 {
			r.password_pending = true
		}
		if r.flags&(1<<3) != 0 {
			r.encrypted_requests_disabled = true
		}
		if r.flags&(1<<4) != 0 {
			r.call_requests_disabled = true
		}
		if r.flags&(1<<5) != 0 {
			r.unconfirmed = true
		}
		r.hash = m.Long()
		r.device_model = m.String()
		r.platform = m.String()
		r.system_version = m.String()
		r.api_id = m.Int()
		r.app_name = m.String()
		r.app_version = m.String()
		r.date_created = m.Int()
		r.date_active = m.Int()
		r.ip = m.String()
		r.country = m.String()
		r.region = m.String()
		return r
	case crc_account_authorizations:
		r := TL_account_authorizations{}
		r.authorization_ttl_days = m.Int()
		r.authorizations = m.Vector()
		return r
	case crc_account_password:
		r := TL_account_password{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.has_recovery = true
		}
		if r.flags&(1<<1) != 0 {
			r.has_secure_values = true
		}
		if r.flags&(1<<2) != 0 {
			r.has_password = true
		}
		if r.flags&(1<<2) != 0 {
			r.current_algo = m.Object()
		}
		if r.flags&(1<<2) != 0 {
			r.srp_B = m.StringBytes()
		}
		if r.flags&(1<<2) != 0 {
			r.srp_id = m.Long()
		}
		if r.flags&(1<<3) != 0 {
			r.hint = m.String()
		}
		if r.flags&(1<<4) != 0 {
			r.email_unconfirmed_pattern = m.String()
		}
		r.new_algo = m.Object()
		r.new_secure_algo = m.Object()
		r.secure_random = m.StringBytes()
		if r.flags&(1<<5) != 0 {
			r.pending_reset_date = m.Int()
		}
		if r.flags&(1<<6) != 0 {
			r.login_email_pattern = m.String()
		}
		return r
	case crc_account_passwordSettings:
		r := TL_account_passwordSettings{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.email = m.String()
		}
		if r.flags&(1<<1) != 0 {
			r.secure_settings = m.Object()
		}
		return r
	case crc_account_passwordInputSettings:
		r := TL_account_passwordInputSettings{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.new_algo = m.Object()
		}
		if r.flags&(1<<0) != 0 {
			r.new_password_hash = m.StringBytes()
		}
		if r.flags&(1<<0) != 0 {
			r.hint = m.String()
		}
		if r.flags&(1<<1) != 0 {
			r.email = m.String()
		}
		if r.flags&(1<<2) != 0 {
			r.new_secure_settings = m.Object()
		}
		return r
	case crc_auth_passwordRecovery:
		r := TL_auth_passwordRecovery{}
		r.email_pattern = m.String()
		return r
	case crc_inputMediaVenue:
		r := TL_inputMediaVenue{}
		r.geo_point = m.Object()
		r.title = m.String()
		r.address = m.String()
		r.provider = m.String()
		r.venue_id = m.String()
		r.venue_type = m.String()
		return r
	case crc_messageMediaVenue:
		r := TL_messageMediaVenue{}
		r.geo = m.Object()
		r.title = m.String()
		r.address = m.String()
		r.provider = m.String()
		r.venue_id = m.String()
		r.venue_type = m.String()
		return r
	case crc_receivedNotifyMessage:
		r := TL_receivedNotifyMessage{}
		r.id = m.Int()
		r.flags = m.Int()
		return r
	case crc_chatInviteExported:
		r := TL_chatInviteExported{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.revoked = true
		}
		if r.flags&(1<<5) != 0 {
			r.permanent = true
		}
		if r.flags&(1<<6) != 0 {
			r.request_needed = true
		}
		r.link = m.String()
		r.admin_id = m.Long()
		r.date = m.Int()
		if r.flags&(1<<4) != 0 {
			r.start_date = m.Int()
		}
		if r.flags&(1<<1) != 0 {
			r.expire_date = m.Int()
		}
		if r.flags&(1<<2) != 0 {
			r.usage_limit = m.Int()
		}
		if r.flags&(1<<3) != 0 {
			r.usage = m.Int()
		}
		if r.flags&(1<<7) != 0 {
			r.requested = m.Int()
		}
		if r.flags&(1<<8) != 0 {
			r.title = m.String()
		}
		return r
	case crc_chatInviteAlready:
		r := TL_chatInviteAlready{}
		r.chat = m.Object()
		return r
	case crc_chatInvite:
		r := TL_chatInvite{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.channel = true
		}
		if r.flags&(1<<1) != 0 {
			r.broadcast = true
		}
		if r.flags&(1<<2) != 0 {
			r.public = true
		}
		if r.flags&(1<<3) != 0 {
			r.megagroup = true
		}
		if r.flags&(1<<6) != 0 {
			r.request_needed = true
		}
		if r.flags&(1<<7) != 0 {
			r.verified = true
		}
		if r.flags&(1<<8) != 0 {
			r.scam = true
		}
		if r.flags&(1<<9) != 0 {
			r.fake = true
		}
		r.title = m.String()
		if r.flags&(1<<5) != 0 {
			r.about = m.String()
		}
		r.photo = m.Object()
		r.participants_count = m.Int()
		if r.flags&(1<<4) != 0 {
			r.participants = m.Vector()
		}
		r.color = m.Int()
		return r
	case crc_messageActionChatJoinedByLink:
		r := TL_messageActionChatJoinedByLink{}
		r.inviter_id = m.Long()
		return r
	case crc_updateReadMessagesContents:
		r := TL_updateReadMessagesContents{}
		r.flags = m.Int()
		r.messages = m.VectorInt()
		r.pts = m.Int()
		r.pts_count = m.Int()
		if r.flags&(1<<0) != 0 {
			r.date = m.Int()
		}
		return r
	case crc_inputStickerSetEmpty:
		r := TL_inputStickerSetEmpty{}
		return r
	case crc_inputStickerSetID:
		r := TL_inputStickerSetID{}
		r.id = m.Long()
		r.access_hash = m.Long()
		return r
	case crc_inputStickerSetShortName:
		r := TL_inputStickerSetShortName{}
		r.short_name = m.String()
		return r
	case crc_stickerSet:
		r := TL_stickerSet{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.archived = true
		}
		if r.flags&(1<<2) != 0 {
			r.official = true
		}
		if r.flags&(1<<3) != 0 {
			r.masks = true
		}
		if r.flags&(1<<5) != 0 {
			r.animated = true
		}
		if r.flags&(1<<6) != 0 {
			r.videos = true
		}
		if r.flags&(1<<7) != 0 {
			r.emojis = true
		}
		if r.flags&(1<<9) != 0 {
			r.text_color = true
		}
		if r.flags&(1<<10) != 0 {
			r.channel_emoji_status = true
		}
		if r.flags&(1<<0) != 0 {
			r.installed_date = m.Int()
		}
		r.id = m.Long()
		r.access_hash = m.Long()
		r.title = m.String()
		r.short_name = m.String()
		if r.flags&(1<<4) != 0 {
			r.thumbs = m.Vector()
		}
		if r.flags&(1<<4) != 0 {
			r.thumb_dc_id = m.Int()
		}
		if r.flags&(1<<4) != 0 {
			r.thumb_version = m.Int()
		}
		if r.flags&(1<<8) != 0 {
			r.thumb_document_id = m.Long()
		}
		r.count = m.Int()
		r.hash = m.Int()
		return r
	case crc_messages_stickerSet:
		r := TL_messages_stickerSet{}
		r.set = m.Object()
		r.packs = m.Vector()
		r.keywords = m.Vector()
		r.documents = m.Vector()
		return r
	case crc_user:
		r := TL_user{}
		r.flags = m.Int()
		if r.flags&(1<<10) != 0 {
			r.self = true
		}
		if r.flags&(1<<11) != 0 {
			r.contact = true
		}
		if r.flags&(1<<12) != 0 {
			r.mutual_contact = true
		}
		if r.flags&(1<<13) != 0 {
			r.deleted = true
		}
		if r.flags&(1<<14) != 0 {
			r.bot = true
		}
		if r.flags&(1<<15) != 0 {
			r.bot_chat_history = true
		}
		if r.flags&(1<<16) != 0 {
			r.bot_nochats = true
		}
		if r.flags&(1<<17) != 0 {
			r.verified = true
		}
		if r.flags&(1<<18) != 0 {
			r.restricted = true
		}
		if r.flags&(1<<20) != 0 {
			r.min = true
		}
		if r.flags&(1<<21) != 0 {
			r.bot_inline_geo = true
		}
		if r.flags&(1<<23) != 0 {
			r.support = true
		}
		if r.flags&(1<<24) != 0 {
			r.scam = true
		}
		if r.flags&(1<<25) != 0 {
			r.apply_min_photo = true
		}
		if r.flags&(1<<26) != 0 {
			r.fake = true
		}
		if r.flags&(1<<27) != 0 {
			r.bot_attach_menu = true
		}
		if r.flags&(1<<28) != 0 {
			r.premium = true
		}
		if r.flags&(1<<29) != 0 {
			r.attach_menu_enabled = true
		}
		r.flags2 = m.Int()
		if r.flags2&(1<<1) != 0 {
			r.bot_can_edit = true
		}
		if r.flags2&(1<<2) != 0 {
			r.close_friend = true
		}
		if r.flags2&(1<<3) != 0 {
			r.stories_hidden = true
		}
		if r.flags2&(1<<4) != 0 {
			r.stories_unavailable = true
		}
		r.id = m.Long()
		if r.flags&(1<<0) != 0 {
			r.access_hash = m.Long()
		}
		if r.flags&(1<<1) != 0 {
			r.first_name = m.String()
		}
		if r.flags&(1<<2) != 0 {
			r.last_name = m.String()
		}
		if r.flags&(1<<3) != 0 {
			r.username = m.String()
		}
		if r.flags&(1<<4) != 0 {
			r.phone = m.String()
		}
		if r.flags&(1<<5) != 0 {
			r.photo = m.Object()
		}
		if r.flags&(1<<6) != 0 {
			r.status = m.Object()
		}
		if r.flags&(1<<14) != 0 {
			r.bot_info_version = m.Int()
		}
		if r.flags&(1<<18) != 0 {
			r.restriction_reason = m.Vector()
		}
		if r.flags&(1<<19) != 0 {
			r.bot_inline_placeholder = m.String()
		}
		if r.flags&(1<<22) != 0 {
			r.lang_code = m.String()
		}
		if r.flags&(1<<30) != 0 {
			r.emoji_status = m.Object()
		}
		if r.flags2&(1<<0) != 0 {
			r.usernames = m.Vector()
		}
		if r.flags2&(1<<5) != 0 {
			r.stories_max_id = m.Int()
		}
		if r.flags2&(1<<8) != 0 {
			r.color = m.Object()
		}
		if r.flags2&(1<<9) != 0 {
			r.profile_color = m.Object()
		}
		return r
	case crc_botCommand:
		r := TL_botCommand{}
		r.command = m.String()
		r.description = m.String()
		return r
	case crc_botInfo:
		r := TL_botInfo{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.user_id = m.Long()
		}
		if r.flags&(1<<1) != 0 {
			r.description = m.String()
		}
		if r.flags&(1<<4) != 0 {
			r.description_photo = m.Object()
		}
		if r.flags&(1<<5) != 0 {
			r.description_document = m.Object()
		}
		if r.flags&(1<<2) != 0 {
			r.commands = m.Vector()
		}
		if r.flags&(1<<3) != 0 {
			r.menu_button = m.Object()
		}
		return r
	case crc_keyboardButton:
		r := TL_keyboardButton{}
		r.text = m.String()
		return r
	case crc_keyboardButtonRow:
		r := TL_keyboardButtonRow{}
		r.buttons = m.Vector()
		return r
	case crc_replyKeyboardHide:
		r := TL_replyKeyboardHide{}
		r.flags = m.Int()
		if r.flags&(1<<2) != 0 {
			r.selective = true
		}
		return r
	case crc_replyKeyboardForceReply:
		r := TL_replyKeyboardForceReply{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.single_use = true
		}
		if r.flags&(1<<2) != 0 {
			r.selective = true
		}
		if r.flags&(1<<3) != 0 {
			r.placeholder = m.String()
		}
		return r
	case crc_replyKeyboardMarkup:
		r := TL_replyKeyboardMarkup{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.resize = true
		}
		if r.flags&(1<<1) != 0 {
			r.single_use = true
		}
		if r.flags&(1<<2) != 0 {
			r.selective = true
		}
		if r.flags&(1<<4) != 0 {
			r.persistent = true
		}
		r.rows = m.Vector()
		if r.flags&(1<<3) != 0 {
			r.placeholder = m.String()
		}
		return r
	case crc_inputPeerUser:
		r := TL_inputPeerUser{}
		r.user_id = m.Long()
		r.access_hash = m.Long()
		return r
	case crc_inputUser:
		r := TL_inputUser{}
		r.user_id = m.Long()
		r.access_hash = m.Long()
		return r
	case crc_messageEntityUnknown:
		r := TL_messageEntityUnknown{}
		r.offset = m.Int()
		r.length = m.Int()
		return r
	case crc_messageEntityMention:
		r := TL_messageEntityMention{}
		r.offset = m.Int()
		r.length = m.Int()
		return r
	case crc_messageEntityHashtag:
		r := TL_messageEntityHashtag{}
		r.offset = m.Int()
		r.length = m.Int()
		return r
	case crc_messageEntityBotCommand:
		r := TL_messageEntityBotCommand{}
		r.offset = m.Int()
		r.length = m.Int()
		return r
	case crc_messageEntityUrl:
		r := TL_messageEntityUrl{}
		r.offset = m.Int()
		r.length = m.Int()
		return r
	case crc_messageEntityEmail:
		r := TL_messageEntityEmail{}
		r.offset = m.Int()
		r.length = m.Int()
		return r
	case crc_messageEntityBold:
		r := TL_messageEntityBold{}
		r.offset = m.Int()
		r.length = m.Int()
		return r
	case crc_messageEntityItalic:
		r := TL_messageEntityItalic{}
		r.offset = m.Int()
		r.length = m.Int()
		return r
	case crc_messageEntityCode:
		r := TL_messageEntityCode{}
		r.offset = m.Int()
		r.length = m.Int()
		return r
	case crc_messageEntityPre:
		r := TL_messageEntityPre{}
		r.offset = m.Int()
		r.length = m.Int()
		r.language = m.String()
		return r
	case crc_messageEntityTextUrl:
		r := TL_messageEntityTextUrl{}
		r.offset = m.Int()
		r.length = m.Int()
		r.url = m.String()
		return r
	case crc_updateShortSentMessage:
		r := TL_updateShortSentMessage{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.out = true
		}
		r.id = m.Int()
		r.pts = m.Int()
		r.pts_count = m.Int()
		r.date = m.Int()
		if r.flags&(1<<9) != 0 {
			r.media = m.Object()
		}
		if r.flags&(1<<7) != 0 {
			r.entities = m.Vector()
		}
		if r.flags&(1<<25) != 0 {
			r.ttl_period = m.Int()
		}
		return r
	case crc_inputChannelEmpty:
		r := TL_inputChannelEmpty{}
		return r
	case crc_inputChannel:
		r := TL_inputChannel{}
		r.channel_id = m.Long()
		r.access_hash = m.Long()
		return r
	case crc_peerChannel:
		r := TL_peerChannel{}
		r.channel_id = m.Long()
		return r
	case crc_inputPeerChannel:
		r := TL_inputPeerChannel{}
		r.channel_id = m.Long()
		r.access_hash = m.Long()
		return r
	case crc_channel:
		r := TL_channel{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.creator = true
		}
		if r.flags&(1<<2) != 0 {
			r.left = true
		}
		if r.flags&(1<<5) != 0 {
			r.broadcast = true
		}
		if r.flags&(1<<7) != 0 {
			r.verified = true
		}
		if r.flags&(1<<8) != 0 {
			r.megagroup = true
		}
		if r.flags&(1<<9) != 0 {
			r.restricted = true
		}
		if r.flags&(1<<11) != 0 {
			r.signatures = true
		}
		if r.flags&(1<<12) != 0 {
			r.min = true
		}
		if r.flags&(1<<19) != 0 {
			r.scam = true
		}
		if r.flags&(1<<20) != 0 {
			r.has_link = true
		}
		if r.flags&(1<<21) != 0 {
			r.has_geo = true
		}
		if r.flags&(1<<22) != 0 {
			r.slowmode_enabled = true
		}
		if r.flags&(1<<23) != 0 {
			r.call_active = true
		}
		if r.flags&(1<<24) != 0 {
			r.call_not_empty = true
		}
		if r.flags&(1<<25) != 0 {
			r.fake = true
		}
		if r.flags&(1<<26) != 0 {
			r.gigagroup = true
		}
		if r.flags&(1<<27) != 0 {
			r.noforwards = true
		}
		if r.flags&(1<<28) != 0 {
			r.join_to_send = true
		}
		if r.flags&(1<<29) != 0 {
			r.join_request = true
		}
		if r.flags&(1<<30) != 0 {
			r.forum = true
		}
		r.flags2 = m.Int()
		if r.flags2&(1<<1) != 0 {
			r.stories_hidden = true
		}
		if r.flags2&(1<<2) != 0 {
			r.stories_hidden_min = true
		}
		if r.flags2&(1<<3) != 0 {
			r.stories_unavailable = true
		}
		r.id = m.Long()
		if r.flags&(1<<13) != 0 {
			r.access_hash = m.Long()
		}
		r.title = m.String()
		if r.flags&(1<<6) != 0 {
			r.username = m.String()
		}
		r.photo = m.Object()
		r.date = m.Int()
		if r.flags&(1<<9) != 0 {
			r.restriction_reason = m.Vector()
		}
		if r.flags&(1<<14) != 0 {
			r.admin_rights = m.Object()
		}
		if r.flags&(1<<15) != 0 {
			r.banned_rights = m.Object()
		}
		if r.flags&(1<<18) != 0 {
			r.default_banned_rights = m.Object()
		}
		if r.flags&(1<<17) != 0 {
			r.participants_count = m.Int()
		}
		if r.flags2&(1<<0) != 0 {
			r.usernames = m.Vector()
		}
		if r.flags2&(1<<4) != 0 {
			r.stories_max_id = m.Int()
		}
		if r.flags2&(1<<7) != 0 {
			r.color = m.Object()
		}
		if r.flags2&(1<<8) != 0 {
			r.profile_color = m.Object()
		}
		if r.flags2&(1<<9) != 0 {
			r.emoji_status = m.Object()
		}
		if r.flags2&(1<<10) != 0 {
			r.level = m.Int()
		}
		return r
	case crc_channelForbidden:
		r := TL_channelForbidden{}
		r.flags = m.Int()
		if r.flags&(1<<5) != 0 {
			r.broadcast = true
		}
		if r.flags&(1<<8) != 0 {
			r.megagroup = true
		}
		r.id = m.Long()
		r.access_hash = m.Long()
		r.title = m.String()
		if r.flags&(1<<16) != 0 {
			r.until_date = m.Int()
		}
		return r
	case crc_contacts_resolvedPeer:
		r := TL_contacts_resolvedPeer{}
		r.peer = m.Object()
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_channelFull:
		r := TL_channelFull{}
		r.flags = m.Int()
		if r.flags&(1<<3) != 0 {
			r.can_view_participants = true
		}
		if r.flags&(1<<6) != 0 {
			r.can_set_username = true
		}
		if r.flags&(1<<7) != 0 {
			r.can_set_stickers = true
		}
		if r.flags&(1<<10) != 0 {
			r.hidden_prehistory = true
		}
		if r.flags&(1<<16) != 0 {
			r.can_set_location = true
		}
		if r.flags&(1<<19) != 0 {
			r.has_scheduled = true
		}
		if r.flags&(1<<20) != 0 {
			r.can_view_stats = true
		}
		if r.flags&(1<<22) != 0 {
			r.blocked = true
		}
		r.flags2 = m.Int()
		if r.flags2&(1<<0) != 0 {
			r.can_delete_channel = true
		}
		if r.flags2&(1<<1) != 0 {
			r.antispam = true
		}
		if r.flags2&(1<<2) != 0 {
			r.participants_hidden = true
		}
		if r.flags2&(1<<3) != 0 {
			r.translations_disabled = true
		}
		if r.flags2&(1<<5) != 0 {
			r.stories_pinned_available = true
		}
		if r.flags2&(1<<6) != 0 {
			r.view_forum_as_messages = true
		}
		r.id = m.Long()
		r.about = m.String()
		if r.flags&(1<<0) != 0 {
			r.participants_count = m.Int()
		}
		if r.flags&(1<<1) != 0 {
			r.admins_count = m.Int()
		}
		if r.flags&(1<<2) != 0 {
			r.kicked_count = m.Int()
		}
		if r.flags&(1<<2) != 0 {
			r.banned_count = m.Int()
		}
		if r.flags&(1<<13) != 0 {
			r.online_count = m.Int()
		}
		r.read_inbox_max_id = m.Int()
		r.read_outbox_max_id = m.Int()
		r.unread_count = m.Int()
		r.chat_photo = m.Object()
		r.notify_settings = m.Object()
		if r.flags&(1<<23) != 0 {
			r.exported_invite = m.Object()
		}
		r.bot_info = m.Vector()
		if r.flags&(1<<4) != 0 {
			r.migrated_from_chat_id = m.Long()
		}
		if r.flags&(1<<4) != 0 {
			r.migrated_from_max_id = m.Int()
		}
		if r.flags&(1<<5) != 0 {
			r.pinned_msg_id = m.Int()
		}
		if r.flags&(1<<8) != 0 {
			r.stickerset = m.Object()
		}
		if r.flags&(1<<9) != 0 {
			r.available_min_id = m.Int()
		}
		if r.flags&(1<<11) != 0 {
			r.folder_id = m.Int()
		}
		if r.flags&(1<<14) != 0 {
			r.linked_chat_id = m.Long()
		}
		if r.flags&(1<<15) != 0 {
			r.location = m.Object()
		}
		if r.flags&(1<<17) != 0 {
			r.slowmode_seconds = m.Int()
		}
		if r.flags&(1<<18) != 0 {
			r.slowmode_next_send_date = m.Int()
		}
		if r.flags&(1<<12) != 0 {
			r.stats_dc = m.Int()
		}
		r.pts = m.Int()
		if r.flags&(1<<21) != 0 {
			r.call = m.Object()
		}
		if r.flags&(1<<24) != 0 {
			r.ttl_period = m.Int()
		}
		if r.flags&(1<<25) != 0 {
			r.pending_suggestions = m.VectorString()
		}
		if r.flags&(1<<26) != 0 {
			r.groupcall_default_join_as = m.Object()
		}
		if r.flags&(1<<27) != 0 {
			r.theme_emoticon = m.String()
		}
		if r.flags&(1<<28) != 0 {
			r.requests_pending = m.Int()
		}
		if r.flags&(1<<28) != 0 {
			r.recent_requesters = m.VectorLong()
		}
		if r.flags&(1<<29) != 0 {
			r.default_send_as = m.Object()
		}
		if r.flags&(1<<30) != 0 {
			r.available_reactions = m.Object()
		}
		if r.flags2&(1<<4) != 0 {
			r.stories = m.Object()
		}
		if r.flags2&(1<<7) != 0 {
			r.wallpaper = m.Object()
		}
		return r
	case crc_messageRange:
		r := TL_messageRange{}
		r.min_id = m.Int()
		r.max_id = m.Int()
		return r
	case crc_messages_channelMessages:
		r := TL_messages_channelMessages{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.inexact = true
		}
		r.pts = m.Int()
		r.count = m.Int()
		if r.flags&(1<<2) != 0 {
			r.offset_id_offset = m.Int()
		}
		r.messages = m.Vector()
		r.topics = m.Vector()
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_messageActionChannelCreate:
		r := TL_messageActionChannelCreate{}
		r.title = m.String()
		return r
	case crc_updateChannelTooLong:
		r := TL_updateChannelTooLong{}
		r.flags = m.Int()
		r.channel_id = m.Long()
		if r.flags&(1<<0) != 0 {
			r.pts = m.Int()
		}
		return r
	case crc_updateChannel:
		r := TL_updateChannel{}
		r.channel_id = m.Long()
		return r
	case crc_updateNewChannelMessage:
		r := TL_updateNewChannelMessage{}
		r.message = m.Object()
		r.pts = m.Int()
		r.pts_count = m.Int()
		return r
	case crc_updateReadChannelInbox:
		r := TL_updateReadChannelInbox{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.folder_id = m.Int()
		}
		r.channel_id = m.Long()
		r.max_id = m.Int()
		r.still_unread_count = m.Int()
		r.pts = m.Int()
		return r
	case crc_updateDeleteChannelMessages:
		r := TL_updateDeleteChannelMessages{}
		r.channel_id = m.Long()
		r.messages = m.VectorInt()
		r.pts = m.Int()
		r.pts_count = m.Int()
		return r
	case crc_updateChannelMessageViews:
		r := TL_updateChannelMessageViews{}
		r.channel_id = m.Long()
		r.id = m.Int()
		r.views = m.Int()
		return r
	case crc_updates_channelDifferenceEmpty:
		r := TL_updates_channelDifferenceEmpty{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.final = true
		}
		r.pts = m.Int()
		if r.flags&(1<<1) != 0 {
			r.timeout = m.Int()
		}
		return r
	case crc_updates_channelDifferenceTooLong:
		r := TL_updates_channelDifferenceTooLong{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.final = true
		}
		if r.flags&(1<<1) != 0 {
			r.timeout = m.Int()
		}
		r.dialog = m.Object()
		r.messages = m.Vector()
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_updates_channelDifference:
		r := TL_updates_channelDifference{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.final = true
		}
		r.pts = m.Int()
		if r.flags&(1<<1) != 0 {
			r.timeout = m.Int()
		}
		r.new_messages = m.Vector()
		r.other_updates = m.Vector()
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_channelMessagesFilterEmpty:
		r := TL_channelMessagesFilterEmpty{}
		return r
	case crc_channelMessagesFilter:
		r := TL_channelMessagesFilter{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.exclude_new_messages = true
		}
		r.ranges = m.Vector()
		return r
	case crc_channelParticipant:
		r := TL_channelParticipant{}
		r.user_id = m.Long()
		r.date = m.Int()
		return r
	case crc_channelParticipantSelf:
		r := TL_channelParticipantSelf{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.via_request = true
		}
		r.user_id = m.Long()
		r.inviter_id = m.Long()
		r.date = m.Int()
		return r
	case crc_channelParticipantCreator:
		r := TL_channelParticipantCreator{}
		r.flags = m.Int()
		r.user_id = m.Long()
		r.admin_rights = m.Object()
		if r.flags&(1<<0) != 0 {
			r.rank = m.String()
		}
		return r
	case crc_channelParticipantsRecent:
		r := TL_channelParticipantsRecent{}
		return r
	case crc_channelParticipantsAdmins:
		r := TL_channelParticipantsAdmins{}
		return r
	case crc_channelParticipantsKicked:
		r := TL_channelParticipantsKicked{}
		r.q = m.String()
		return r
	case crc_channels_channelParticipants:
		r := TL_channels_channelParticipants{}
		r.count = m.Int()
		r.participants = m.Vector()
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_channels_channelParticipant:
		r := TL_channels_channelParticipant{}
		r.participant = m.Object()
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_chatParticipantCreator:
		r := TL_chatParticipantCreator{}
		r.user_id = m.Long()
		return r
	case crc_chatParticipantAdmin:
		r := TL_chatParticipantAdmin{}
		r.user_id = m.Long()
		r.inviter_id = m.Long()
		r.date = m.Int()
		return r
	case crc_updateChatParticipantAdmin:
		r := TL_updateChatParticipantAdmin{}
		r.chat_id = m.Long()
		r.user_id = m.Long()
		r.is_admin = m.Object()
		r.version = m.Int()
		return r
	case crc_messageActionChatMigrateTo:
		r := TL_messageActionChatMigrateTo{}
		r.channel_id = m.Long()
		return r
	case crc_messageActionChannelMigrateFrom:
		r := TL_messageActionChannelMigrateFrom{}
		r.title = m.String()
		r.chat_id = m.Long()
		return r
	case crc_channelParticipantsBots:
		r := TL_channelParticipantsBots{}
		return r
	case crc_help_termsOfService:
		r := TL_help_termsOfService{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.popup = true
		}
		r.id = m.Object()
		r.text = m.String()
		r.entities = m.Vector()
		if r.flags&(1<<1) != 0 {
			r.min_age_confirm = m.Int()
		}
		return r
	case crc_updateNewStickerSet:
		r := TL_updateNewStickerSet{}
		r.stickerset = m.Object()
		return r
	case crc_updateStickerSetsOrder:
		r := TL_updateStickerSetsOrder{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.masks = true
		}
		if r.flags&(1<<1) != 0 {
			r.emojis = true
		}
		r.order = m.VectorLong()
		return r
	case crc_updateStickerSets:
		r := TL_updateStickerSets{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.masks = true
		}
		if r.flags&(1<<1) != 0 {
			r.emojis = true
		}
		return r
	case crc_messages_savedGifsNotModified:
		r := TL_messages_savedGifsNotModified{}
		return r
	case crc_messages_savedGifs:
		r := TL_messages_savedGifs{}
		r.hash = m.Long()
		r.gifs = m.Vector()
		return r
	case crc_updateSavedGifs:
		r := TL_updateSavedGifs{}
		return r
	case crc_inputBotInlineMessageMediaAuto:
		r := TL_inputBotInlineMessageMediaAuto{}
		r.flags = m.Int()
		if r.flags&(1<<3) != 0 {
			r.invert_media = true
		}
		r.message = m.String()
		if r.flags&(1<<1) != 0 {
			r.entities = m.Vector()
		}
		if r.flags&(1<<2) != 0 {
			r.reply_markup = m.Object()
		}
		return r
	case crc_inputBotInlineMessageText:
		r := TL_inputBotInlineMessageText{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.no_webpage = true
		}
		if r.flags&(1<<3) != 0 {
			r.invert_media = true
		}
		r.message = m.String()
		if r.flags&(1<<1) != 0 {
			r.entities = m.Vector()
		}
		if r.flags&(1<<2) != 0 {
			r.reply_markup = m.Object()
		}
		return r
	case crc_inputBotInlineResult:
		r := TL_inputBotInlineResult{}
		r.flags = m.Int()
		r.id = m.String()
		r._type = m.String()
		if r.flags&(1<<1) != 0 {
			r.title = m.String()
		}
		if r.flags&(1<<2) != 0 {
			r.description = m.String()
		}
		if r.flags&(1<<3) != 0 {
			r.url = m.String()
		}
		if r.flags&(1<<4) != 0 {
			r.thumb = m.Object()
		}
		if r.flags&(1<<5) != 0 {
			r.content = m.Object()
		}
		r.send_message = m.Object()
		return r
	case crc_botInlineMessageMediaAuto:
		r := TL_botInlineMessageMediaAuto{}
		r.flags = m.Int()
		if r.flags&(1<<3) != 0 {
			r.invert_media = true
		}
		r.message = m.String()
		if r.flags&(1<<1) != 0 {
			r.entities = m.Vector()
		}
		if r.flags&(1<<2) != 0 {
			r.reply_markup = m.Object()
		}
		return r
	case crc_botInlineMessageText:
		r := TL_botInlineMessageText{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.no_webpage = true
		}
		if r.flags&(1<<3) != 0 {
			r.invert_media = true
		}
		r.message = m.String()
		if r.flags&(1<<1) != 0 {
			r.entities = m.Vector()
		}
		if r.flags&(1<<2) != 0 {
			r.reply_markup = m.Object()
		}
		return r
	case crc_botInlineResult:
		r := TL_botInlineResult{}
		r.flags = m.Int()
		r.id = m.String()
		r._type = m.String()
		if r.flags&(1<<1) != 0 {
			r.title = m.String()
		}
		if r.flags&(1<<2) != 0 {
			r.description = m.String()
		}
		if r.flags&(1<<3) != 0 {
			r.url = m.String()
		}
		if r.flags&(1<<4) != 0 {
			r.thumb = m.Object()
		}
		if r.flags&(1<<5) != 0 {
			r.content = m.Object()
		}
		r.send_message = m.Object()
		return r
	case crc_messages_botResults:
		r := TL_messages_botResults{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.gallery = true
		}
		r.query_id = m.Long()
		if r.flags&(1<<1) != 0 {
			r.next_offset = m.String()
		}
		if r.flags&(1<<2) != 0 {
			r.switch_pm = m.Object()
		}
		if r.flags&(1<<3) != 0 {
			r.switch_webview = m.Object()
		}
		r.results = m.Vector()
		r.cache_time = m.Int()
		r.users = m.Vector()
		return r
	case crc_updateBotInlineQuery:
		r := TL_updateBotInlineQuery{}
		r.flags = m.Int()
		r.query_id = m.Long()
		r.user_id = m.Long()
		r.query = m.String()
		if r.flags&(1<<0) != 0 {
			r.geo = m.Object()
		}
		if r.flags&(1<<1) != 0 {
			r.peer_type = m.Object()
		}
		r.offset = m.String()
		return r
	case crc_updateBotInlineSend:
		r := TL_updateBotInlineSend{}
		r.flags = m.Int()
		r.user_id = m.Long()
		r.query = m.String()
		if r.flags&(1<<0) != 0 {
			r.geo = m.Object()
		}
		r.id = m.String()
		if r.flags&(1<<1) != 0 {
			r.msg_id = m.Object()
		}
		return r
	case crc_inputMessagesFilterVoice:
		r := TL_inputMessagesFilterVoice{}
		return r
	case crc_inputMessagesFilterMusic:
		r := TL_inputMessagesFilterMusic{}
		return r
	case crc_inputPrivacyKeyChatInvite:
		r := TL_inputPrivacyKeyChatInvite{}
		return r
	case crc_privacyKeyChatInvite:
		r := TL_privacyKeyChatInvite{}
		return r
	case crc_exportedMessageLink:
		r := TL_exportedMessageLink{}
		r.link = m.String()
		r.html = m.String()
		return r
	case crc_messageFwdHeader:
		r := TL_messageFwdHeader{}
		r.flags = m.Int()
		if r.flags&(1<<7) != 0 {
			r.imported = true
		}
		if r.flags&(1<<11) != 0 {
			r.saved_out = true
		}
		if r.flags&(1<<0) != 0 {
			r.from_id = m.Object()
		}
		if r.flags&(1<<5) != 0 {
			r.from_name = m.String()
		}
		r.date = m.Int()
		if r.flags&(1<<2) != 0 {
			r.channel_post = m.Int()
		}
		if r.flags&(1<<3) != 0 {
			r.post_author = m.String()
		}
		if r.flags&(1<<4) != 0 {
			r.saved_from_peer = m.Object()
		}
		if r.flags&(1<<4) != 0 {
			r.saved_from_msg_id = m.Int()
		}
		if r.flags&(1<<8) != 0 {
			r.saved_from_id = m.Object()
		}
		if r.flags&(1<<9) != 0 {
			r.saved_from_name = m.String()
		}
		if r.flags&(1<<10) != 0 {
			r.saved_date = m.Int()
		}
		if r.flags&(1<<6) != 0 {
			r.psa_type = m.String()
		}
		return r
	case crc_updateEditChannelMessage:
		r := TL_updateEditChannelMessage{}
		r.message = m.Object()
		r.pts = m.Int()
		r.pts_count = m.Int()
		return r
	case crc_messageActionPinMessage:
		r := TL_messageActionPinMessage{}
		return r
	case crc_auth_codeTypeSms:
		r := TL_auth_codeTypeSms{}
		return r
	case crc_auth_codeTypeCall:
		r := TL_auth_codeTypeCall{}
		return r
	case crc_auth_codeTypeFlashCall:
		r := TL_auth_codeTypeFlashCall{}
		return r
	case crc_auth_sentCodeTypeApp:
		r := TL_auth_sentCodeTypeApp{}
		r.length = m.Int()
		return r
	case crc_auth_sentCodeTypeSms:
		r := TL_auth_sentCodeTypeSms{}
		r.length = m.Int()
		return r
	case crc_auth_sentCodeTypeCall:
		r := TL_auth_sentCodeTypeCall{}
		r.length = m.Int()
		return r
	case crc_auth_sentCodeTypeFlashCall:
		r := TL_auth_sentCodeTypeFlashCall{}
		r.pattern = m.String()
		return r
	case crc_keyboardButtonUrl:
		r := TL_keyboardButtonUrl{}
		r.text = m.String()
		r.url = m.String()
		return r
	case crc_keyboardButtonCallback:
		r := TL_keyboardButtonCallback{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.requires_password = true
		}
		r.text = m.String()
		r.data = m.StringBytes()
		return r
	case crc_keyboardButtonRequestPhone:
		r := TL_keyboardButtonRequestPhone{}
		r.text = m.String()
		return r
	case crc_keyboardButtonRequestGeoLocation:
		r := TL_keyboardButtonRequestGeoLocation{}
		r.text = m.String()
		return r
	case crc_keyboardButtonSwitchInline:
		r := TL_keyboardButtonSwitchInline{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.same_peer = true
		}
		r.text = m.String()
		r.query = m.String()
		if r.flags&(1<<1) != 0 {
			r.peer_types = m.Vector()
		}
		return r
	case crc_replyInlineMarkup:
		r := TL_replyInlineMarkup{}
		r.rows = m.Vector()
		return r
	case crc_messages_botCallbackAnswer:
		r := TL_messages_botCallbackAnswer{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.alert = true
		}
		if r.flags&(1<<3) != 0 {
			r.has_url = true
		}
		if r.flags&(1<<4) != 0 {
			r.native_ui = true
		}
		if r.flags&(1<<0) != 0 {
			r.message = m.String()
		}
		if r.flags&(1<<2) != 0 {
			r.url = m.String()
		}
		r.cache_time = m.Int()
		return r
	case crc_updateBotCallbackQuery:
		r := TL_updateBotCallbackQuery{}
		r.flags = m.Int()
		r.query_id = m.Long()
		r.user_id = m.Long()
		r.peer = m.Object()
		r.msg_id = m.Int()
		r.chat_instance = m.Long()
		if r.flags&(1<<0) != 0 {
			r.data = m.StringBytes()
		}
		if r.flags&(1<<1) != 0 {
			r.game_short_name = m.String()
		}
		return r
	case crc_messages_messageEditData:
		r := TL_messages_messageEditData{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.caption = true
		}
		return r
	case crc_updateEditMessage:
		r := TL_updateEditMessage{}
		r.message = m.Object()
		r.pts = m.Int()
		r.pts_count = m.Int()
		return r
	case crc_inputBotInlineMessageMediaGeo:
		r := TL_inputBotInlineMessageMediaGeo{}
		r.flags = m.Int()
		r.geo_point = m.Object()
		if r.flags&(1<<0) != 0 {
			r.heading = m.Int()
		}
		if r.flags&(1<<1) != 0 {
			r.period = m.Int()
		}
		if r.flags&(1<<3) != 0 {
			r.proximity_notification_radius = m.Int()
		}
		if r.flags&(1<<2) != 0 {
			r.reply_markup = m.Object()
		}
		return r
	case crc_inputBotInlineMessageMediaVenue:
		r := TL_inputBotInlineMessageMediaVenue{}
		r.flags = m.Int()
		r.geo_point = m.Object()
		r.title = m.String()
		r.address = m.String()
		r.provider = m.String()
		r.venue_id = m.String()
		r.venue_type = m.String()
		if r.flags&(1<<2) != 0 {
			r.reply_markup = m.Object()
		}
		return r
	case crc_inputBotInlineMessageMediaContact:
		r := TL_inputBotInlineMessageMediaContact{}
		r.flags = m.Int()
		r.phone_number = m.String()
		r.first_name = m.String()
		r.last_name = m.String()
		r.vcard = m.String()
		if r.flags&(1<<2) != 0 {
			r.reply_markup = m.Object()
		}
		return r
	case crc_botInlineMessageMediaGeo:
		r := TL_botInlineMessageMediaGeo{}
		r.flags = m.Int()
		r.geo = m.Object()
		if r.flags&(1<<0) != 0 {
			r.heading = m.Int()
		}
		if r.flags&(1<<1) != 0 {
			r.period = m.Int()
		}
		if r.flags&(1<<3) != 0 {
			r.proximity_notification_radius = m.Int()
		}
		if r.flags&(1<<2) != 0 {
			r.reply_markup = m.Object()
		}
		return r
	case crc_botInlineMessageMediaVenue:
		r := TL_botInlineMessageMediaVenue{}
		r.flags = m.Int()
		r.geo = m.Object()
		r.title = m.String()
		r.address = m.String()
		r.provider = m.String()
		r.venue_id = m.String()
		r.venue_type = m.String()
		if r.flags&(1<<2) != 0 {
			r.reply_markup = m.Object()
		}
		return r
	case crc_botInlineMessageMediaContact:
		r := TL_botInlineMessageMediaContact{}
		r.flags = m.Int()
		r.phone_number = m.String()
		r.first_name = m.String()
		r.last_name = m.String()
		r.vcard = m.String()
		if r.flags&(1<<2) != 0 {
			r.reply_markup = m.Object()
		}
		return r
	case crc_inputBotInlineResultPhoto:
		r := TL_inputBotInlineResultPhoto{}
		r.id = m.String()
		r._type = m.String()
		r.photo = m.Object()
		r.send_message = m.Object()
		return r
	case crc_inputBotInlineResultDocument:
		r := TL_inputBotInlineResultDocument{}
		r.flags = m.Int()
		r.id = m.String()
		r._type = m.String()
		if r.flags&(1<<1) != 0 {
			r.title = m.String()
		}
		if r.flags&(1<<2) != 0 {
			r.description = m.String()
		}
		r.document = m.Object()
		r.send_message = m.Object()
		return r
	case crc_botInlineMediaResult:
		r := TL_botInlineMediaResult{}
		r.flags = m.Int()
		r.id = m.String()
		r._type = m.String()
		if r.flags&(1<<0) != 0 {
			r.photo = m.Object()
		}
		if r.flags&(1<<1) != 0 {
			r.document = m.Object()
		}
		if r.flags&(1<<2) != 0 {
			r.title = m.String()
		}
		if r.flags&(1<<3) != 0 {
			r.description = m.String()
		}
		r.send_message = m.Object()
		return r
	case crc_inputBotInlineMessageID:
		r := TL_inputBotInlineMessageID{}
		r.dc_id = m.Int()
		r.id = m.Long()
		r.access_hash = m.Long()
		return r
	case crc_updateInlineBotCallbackQuery:
		r := TL_updateInlineBotCallbackQuery{}
		r.flags = m.Int()
		r.query_id = m.Long()
		r.user_id = m.Long()
		r.msg_id = m.Object()
		r.chat_instance = m.Long()
		if r.flags&(1<<0) != 0 {
			r.data = m.StringBytes()
		}
		if r.flags&(1<<1) != 0 {
			r.game_short_name = m.String()
		}
		return r
	case crc_inlineBotSwitchPM:
		r := TL_inlineBotSwitchPM{}
		r.text = m.String()
		r.start_param = m.String()
		return r
	case crc_messages_peerDialogs:
		r := TL_messages_peerDialogs{}
		r.dialogs = m.Vector()
		r.messages = m.Vector()
		r.chats = m.Vector()
		r.users = m.Vector()
		r.state = m.Object()
		return r
	case crc_topPeer:
		r := TL_topPeer{}
		r.peer = m.Object()
		r.rating = m.Double()
		return r
	case crc_topPeerCategoryBotsPM:
		r := TL_topPeerCategoryBotsPM{}
		return r
	case crc_topPeerCategoryBotsInline:
		r := TL_topPeerCategoryBotsInline{}
		return r
	case crc_topPeerCategoryCorrespondents:
		r := TL_topPeerCategoryCorrespondents{}
		return r
	case crc_topPeerCategoryGroups:
		r := TL_topPeerCategoryGroups{}
		return r
	case crc_topPeerCategoryChannels:
		r := TL_topPeerCategoryChannels{}
		return r
	case crc_topPeerCategoryPeers:
		r := TL_topPeerCategoryPeers{}
		r.category = m.Object()
		r.count = m.Int()
		r.peers = m.Vector()
		return r
	case crc_contacts_topPeersNotModified:
		r := TL_contacts_topPeersNotModified{}
		return r
	case crc_contacts_topPeers:
		r := TL_contacts_topPeers{}
		r.categories = m.Vector()
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_messageEntityMentionName:
		r := TL_messageEntityMentionName{}
		r.offset = m.Int()
		r.length = m.Int()
		r.user_id = m.Long()
		return r
	case crc_inputMessageEntityMentionName:
		r := TL_inputMessageEntityMentionName{}
		r.offset = m.Int()
		r.length = m.Int()
		r.user_id = m.Object()
		return r
	case crc_inputMessagesFilterChatPhotos:
		r := TL_inputMessagesFilterChatPhotos{}
		return r
	case crc_updateReadChannelOutbox:
		r := TL_updateReadChannelOutbox{}
		r.channel_id = m.Long()
		r.max_id = m.Int()
		return r
	case crc_updateDraftMessage:
		r := TL_updateDraftMessage{}
		r.flags = m.Int()
		r.peer = m.Object()
		if r.flags&(1<<0) != 0 {
			r.top_msg_id = m.Int()
		}
		r.draft = m.Object()
		return r
	case crc_draftMessageEmpty:
		r := TL_draftMessageEmpty{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.date = m.Int()
		}
		return r
	case crc_draftMessage:
		r := TL_draftMessage{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.no_webpage = true
		}
		if r.flags&(1<<6) != 0 {
			r.invert_media = true
		}
		if r.flags&(1<<4) != 0 {
			r.reply_to = m.Object()
		}
		r.message = m.String()
		if r.flags&(1<<3) != 0 {
			r.entities = m.Vector()
		}
		if r.flags&(1<<5) != 0 {
			r.media = m.Object()
		}
		r.date = m.Int()
		return r
	case crc_messageActionHistoryClear:
		r := TL_messageActionHistoryClear{}
		return r
	case crc_messages_featuredStickersNotModified:
		r := TL_messages_featuredStickersNotModified{}
		r.count = m.Int()
		return r
	case crc_messages_featuredStickers:
		r := TL_messages_featuredStickers{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.premium = true
		}
		r.hash = m.Long()
		r.count = m.Int()
		r.sets = m.Vector()
		r.unread = m.VectorLong()
		return r
	case crc_updateReadFeaturedStickers:
		r := TL_updateReadFeaturedStickers{}
		return r
	case crc_messages_recentStickersNotModified:
		r := TL_messages_recentStickersNotModified{}
		return r
	case crc_messages_recentStickers:
		r := TL_messages_recentStickers{}
		r.hash = m.Long()
		r.packs = m.Vector()
		r.stickers = m.Vector()
		r.dates = m.VectorInt()
		return r
	case crc_updateRecentStickers:
		r := TL_updateRecentStickers{}
		return r
	case crc_messages_archivedStickers:
		r := TL_messages_archivedStickers{}
		r.count = m.Int()
		r.sets = m.Vector()
		return r
	case crc_messages_stickerSetInstallResultSuccess:
		r := TL_messages_stickerSetInstallResultSuccess{}
		return r
	case crc_messages_stickerSetInstallResultArchive:
		r := TL_messages_stickerSetInstallResultArchive{}
		r.sets = m.Vector()
		return r
	case crc_stickerSetCovered:
		r := TL_stickerSetCovered{}
		r.set = m.Object()
		r.cover = m.Object()
		return r
	case crc_updateConfig:
		r := TL_updateConfig{}
		return r
	case crc_updatePtsChanged:
		r := TL_updatePtsChanged{}
		return r
	case crc_inputMediaPhotoExternal:
		r := TL_inputMediaPhotoExternal{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.spoiler = true
		}
		r.url = m.String()
		if r.flags&(1<<0) != 0 {
			r.ttl_seconds = m.Int()
		}
		return r
	case crc_inputMediaDocumentExternal:
		r := TL_inputMediaDocumentExternal{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.spoiler = true
		}
		r.url = m.String()
		if r.flags&(1<<0) != 0 {
			r.ttl_seconds = m.Int()
		}
		return r
	case crc_stickerSetMultiCovered:
		r := TL_stickerSetMultiCovered{}
		r.set = m.Object()
		r.covers = m.Vector()
		return r
	case crc_maskCoords:
		r := TL_maskCoords{}
		r.n = m.Int()
		r.x = m.Double()
		r.y = m.Double()
		r.zoom = m.Double()
		return r
	case crc_documentAttributeHasStickers:
		r := TL_documentAttributeHasStickers{}
		return r
	case crc_inputStickeredMediaPhoto:
		r := TL_inputStickeredMediaPhoto{}
		r.id = m.Object()
		return r
	case crc_inputStickeredMediaDocument:
		r := TL_inputStickeredMediaDocument{}
		r.id = m.Object()
		return r
	case crc_game:
		r := TL_game{}
		r.flags = m.Int()
		r.id = m.Long()
		r.access_hash = m.Long()
		r.short_name = m.String()
		r.title = m.String()
		r.description = m.String()
		r.photo = m.Object()
		if r.flags&(1<<0) != 0 {
			r.document = m.Object()
		}
		return r
	case crc_inputBotInlineResultGame:
		r := TL_inputBotInlineResultGame{}
		r.id = m.String()
		r.short_name = m.String()
		r.send_message = m.Object()
		return r
	case crc_inputBotInlineMessageGame:
		r := TL_inputBotInlineMessageGame{}
		r.flags = m.Int()
		if r.flags&(1<<2) != 0 {
			r.reply_markup = m.Object()
		}
		return r
	case crc_messageMediaGame:
		r := TL_messageMediaGame{}
		r.game = m.Object()
		return r
	case crc_inputMediaGame:
		r := TL_inputMediaGame{}
		r.id = m.Object()
		return r
	case crc_inputGameID:
		r := TL_inputGameID{}
		r.id = m.Long()
		r.access_hash = m.Long()
		return r
	case crc_inputGameShortName:
		r := TL_inputGameShortName{}
		r.bot_id = m.Object()
		r.short_name = m.String()
		return r
	case crc_keyboardButtonGame:
		r := TL_keyboardButtonGame{}
		r.text = m.String()
		return r
	case crc_messageActionGameScore:
		r := TL_messageActionGameScore{}
		r.game_id = m.Long()
		r.score = m.Int()
		return r
	case crc_highScore:
		r := TL_highScore{}
		r.pos = m.Int()
		r.user_id = m.Long()
		r.score = m.Int()
		return r
	case crc_messages_highScores:
		r := TL_messages_highScores{}
		r.scores = m.Vector()
		r.users = m.Vector()
		return r
	case crc_updates_differenceTooLong:
		r := TL_updates_differenceTooLong{}
		r.pts = m.Int()
		return r
	case crc_updateChannelWebPage:
		r := TL_updateChannelWebPage{}
		r.channel_id = m.Long()
		r.webpage = m.Object()
		r.pts = m.Int()
		r.pts_count = m.Int()
		return r
	case crc_messages_chatsSlice:
		r := TL_messages_chatsSlice{}
		r.count = m.Int()
		r.chats = m.Vector()
		return r
	case crc_textEmpty:
		r := TL_textEmpty{}
		return r
	case crc_textPlain:
		r := TL_textPlain{}
		r.text = m.String()
		return r
	case crc_textBold:
		r := TL_textBold{}
		r.text = m.Object()
		return r
	case crc_textItalic:
		r := TL_textItalic{}
		r.text = m.Object()
		return r
	case crc_textUnderline:
		r := TL_textUnderline{}
		r.text = m.Object()
		return r
	case crc_textStrike:
		r := TL_textStrike{}
		r.text = m.Object()
		return r
	case crc_textFixed:
		r := TL_textFixed{}
		r.text = m.Object()
		return r
	case crc_textUrl:
		r := TL_textUrl{}
		r.text = m.Object()
		r.url = m.String()
		r.webpage_id = m.Long()
		return r
	case crc_textEmail:
		r := TL_textEmail{}
		r.text = m.Object()
		r.email = m.String()
		return r
	case crc_textConcat:
		r := TL_textConcat{}
		r.texts = m.Vector()
		return r
	case crc_pageBlockUnsupported:
		r := TL_pageBlockUnsupported{}
		return r
	case crc_pageBlockTitle:
		r := TL_pageBlockTitle{}
		r.text = m.Object()
		return r
	case crc_pageBlockSubtitle:
		r := TL_pageBlockSubtitle{}
		r.text = m.Object()
		return r
	case crc_pageBlockAuthorDate:
		r := TL_pageBlockAuthorDate{}
		r.author = m.Object()
		r.published_date = m.Int()
		return r
	case crc_pageBlockHeader:
		r := TL_pageBlockHeader{}
		r.text = m.Object()
		return r
	case crc_pageBlockSubheader:
		r := TL_pageBlockSubheader{}
		r.text = m.Object()
		return r
	case crc_pageBlockParagraph:
		r := TL_pageBlockParagraph{}
		r.text = m.Object()
		return r
	case crc_pageBlockPreformatted:
		r := TL_pageBlockPreformatted{}
		r.text = m.Object()
		r.language = m.String()
		return r
	case crc_pageBlockFooter:
		r := TL_pageBlockFooter{}
		r.text = m.Object()
		return r
	case crc_pageBlockDivider:
		r := TL_pageBlockDivider{}
		return r
	case crc_pageBlockAnchor:
		r := TL_pageBlockAnchor{}
		r.name = m.String()
		return r
	case crc_pageBlockList:
		r := TL_pageBlockList{}
		r.items = m.Vector()
		return r
	case crc_pageBlockBlockquote:
		r := TL_pageBlockBlockquote{}
		r.text = m.Object()
		r.caption = m.Object()
		return r
	case crc_pageBlockPullquote:
		r := TL_pageBlockPullquote{}
		r.text = m.Object()
		r.caption = m.Object()
		return r
	case crc_pageBlockPhoto:
		r := TL_pageBlockPhoto{}
		r.flags = m.Int()
		r.photo_id = m.Long()
		r.caption = m.Object()
		if r.flags&(1<<0) != 0 {
			r.url = m.String()
		}
		if r.flags&(1<<0) != 0 {
			r.webpage_id = m.Long()
		}
		return r
	case crc_pageBlockVideo:
		r := TL_pageBlockVideo{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.autoplay = true
		}
		if r.flags&(1<<1) != 0 {
			r.loop = true
		}
		r.video_id = m.Long()
		r.caption = m.Object()
		return r
	case crc_pageBlockCover:
		r := TL_pageBlockCover{}
		r.cover = m.Object()
		return r
	case crc_pageBlockEmbed:
		r := TL_pageBlockEmbed{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.full_width = true
		}
		if r.flags&(1<<3) != 0 {
			r.allow_scrolling = true
		}
		if r.flags&(1<<1) != 0 {
			r.url = m.String()
		}
		if r.flags&(1<<2) != 0 {
			r.html = m.String()
		}
		if r.flags&(1<<4) != 0 {
			r.poster_photo_id = m.Long()
		}
		if r.flags&(1<<5) != 0 {
			r.w = m.Int()
		}
		if r.flags&(1<<5) != 0 {
			r.h = m.Int()
		}
		r.caption = m.Object()
		return r
	case crc_pageBlockEmbedPost:
		r := TL_pageBlockEmbedPost{}
		r.url = m.String()
		r.webpage_id = m.Long()
		r.author_photo_id = m.Long()
		r.author = m.String()
		r.date = m.Int()
		r.blocks = m.Vector()
		r.caption = m.Object()
		return r
	case crc_pageBlockCollage:
		r := TL_pageBlockCollage{}
		r.items = m.Vector()
		r.caption = m.Object()
		return r
	case crc_pageBlockSlideshow:
		r := TL_pageBlockSlideshow{}
		r.items = m.Vector()
		r.caption = m.Object()
		return r
	case crc_webPageNotModified:
		r := TL_webPageNotModified{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.cached_page_views = m.Int()
		}
		return r
	case crc_inputPrivacyKeyPhoneCall:
		r := TL_inputPrivacyKeyPhoneCall{}
		return r
	case crc_privacyKeyPhoneCall:
		r := TL_privacyKeyPhoneCall{}
		return r
	case crc_sendMessageGamePlayAction:
		r := TL_sendMessageGamePlayAction{}
		return r
	case crc_phoneCallDiscardReasonMissed:
		r := TL_phoneCallDiscardReasonMissed{}
		return r
	case crc_phoneCallDiscardReasonDisconnect:
		r := TL_phoneCallDiscardReasonDisconnect{}
		return r
	case crc_phoneCallDiscardReasonHangup:
		r := TL_phoneCallDiscardReasonHangup{}
		return r
	case crc_phoneCallDiscardReasonBusy:
		r := TL_phoneCallDiscardReasonBusy{}
		return r
	case crc_updateDialogPinned:
		r := TL_updateDialogPinned{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.pinned = true
		}
		if r.flags&(1<<1) != 0 {
			r.folder_id = m.Int()
		}
		r.peer = m.Object()
		return r
	case crc_updatePinnedDialogs:
		r := TL_updatePinnedDialogs{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.folder_id = m.Int()
		}
		if r.flags&(1<<0) != 0 {
			r.order = m.Vector()
		}
		return r
	case crc_dataJSON:
		r := TL_dataJSON{}
		r.data = m.String()
		return r
	case crc_updateBotWebhookJSON:
		r := TL_updateBotWebhookJSON{}
		r.data = m.Object()
		return r
	case crc_updateBotWebhookJSONQuery:
		r := TL_updateBotWebhookJSONQuery{}
		r.query_id = m.Long()
		r.data = m.Object()
		r.timeout = m.Int()
		return r
	case crc_labeledPrice:
		r := TL_labeledPrice{}
		r.label = m.String()
		r.amount = m.Long()
		return r
	case crc_invoice:
		r := TL_invoice{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.test = true
		}
		if r.flags&(1<<1) != 0 {
			r.name_requested = true
		}
		if r.flags&(1<<2) != 0 {
			r.phone_requested = true
		}
		if r.flags&(1<<3) != 0 {
			r.email_requested = true
		}
		if r.flags&(1<<4) != 0 {
			r.shipping_address_requested = true
		}
		if r.flags&(1<<5) != 0 {
			r.flexible = true
		}
		if r.flags&(1<<6) != 0 {
			r.phone_to_provider = true
		}
		if r.flags&(1<<7) != 0 {
			r.email_to_provider = true
		}
		if r.flags&(1<<9) != 0 {
			r.recurring = true
		}
		r.currency = m.String()
		r.prices = m.Vector()
		if r.flags&(1<<8) != 0 {
			r.max_tip_amount = m.Long()
		}
		if r.flags&(1<<8) != 0 {
			r.suggested_tip_amounts = m.VectorLong()
		}
		if r.flags&(1<<10) != 0 {
			r.terms_url = m.String()
		}
		return r
	case crc_inputMediaInvoice:
		r := TL_inputMediaInvoice{}
		r.flags = m.Int()
		r.title = m.String()
		r.description = m.String()
		if r.flags&(1<<0) != 0 {
			r.photo = m.Object()
		}
		r.invoice = m.Object()
		r.payload = m.StringBytes()
		r.provider = m.String()
		r.provider_data = m.Object()
		if r.flags&(1<<1) != 0 {
			r.start_param = m.String()
		}
		if r.flags&(1<<2) != 0 {
			r.extended_media = m.Object()
		}
		return r
	case crc_paymentCharge:
		r := TL_paymentCharge{}
		r.id = m.String()
		r.provider_charge_id = m.String()
		return r
	case crc_messageActionPaymentSentMe:
		r := TL_messageActionPaymentSentMe{}
		r.flags = m.Int()
		if r.flags&(1<<2) != 0 {
			r.recurring_init = true
		}
		if r.flags&(1<<3) != 0 {
			r.recurring_used = true
		}
		r.currency = m.String()
		r.total_amount = m.Long()
		r.payload = m.StringBytes()
		if r.flags&(1<<0) != 0 {
			r.info = m.Object()
		}
		if r.flags&(1<<1) != 0 {
			r.shipping_option_id = m.String()
		}
		r.charge = m.Object()
		return r
	case crc_messageMediaInvoice:
		r := TL_messageMediaInvoice{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.shipping_address_requested = true
		}
		if r.flags&(1<<3) != 0 {
			r.test = true
		}
		r.title = m.String()
		r.description = m.String()
		if r.flags&(1<<0) != 0 {
			r.photo = m.Object()
		}
		if r.flags&(1<<2) != 0 {
			r.receipt_msg_id = m.Int()
		}
		r.currency = m.String()
		r.total_amount = m.Long()
		r.start_param = m.String()
		if r.flags&(1<<4) != 0 {
			r.extended_media = m.Object()
		}
		return r
	case crc_postAddress:
		r := TL_postAddress{}
		r.street_line1 = m.String()
		r.street_line2 = m.String()
		r.city = m.String()
		r.state = m.String()
		r.country_iso2 = m.String()
		r.post_code = m.String()
		return r
	case crc_paymentRequestedInfo:
		r := TL_paymentRequestedInfo{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.name = m.String()
		}
		if r.flags&(1<<1) != 0 {
			r.phone = m.String()
		}
		if r.flags&(1<<2) != 0 {
			r.email = m.String()
		}
		if r.flags&(1<<3) != 0 {
			r.shipping_address = m.Object()
		}
		return r
	case crc_keyboardButtonBuy:
		r := TL_keyboardButtonBuy{}
		r.text = m.String()
		return r
	case crc_messageActionPaymentSent:
		r := TL_messageActionPaymentSent{}
		r.flags = m.Int()
		if r.flags&(1<<2) != 0 {
			r.recurring_init = true
		}
		if r.flags&(1<<3) != 0 {
			r.recurring_used = true
		}
		r.currency = m.String()
		r.total_amount = m.Long()
		if r.flags&(1<<0) != 0 {
			r.invoice_slug = m.String()
		}
		return r
	case crc_paymentSavedCredentialsCard:
		r := TL_paymentSavedCredentialsCard{}
		r.id = m.String()
		r.title = m.String()
		return r
	case crc_webDocument:
		r := TL_webDocument{}
		r.url = m.String()
		r.access_hash = m.Long()
		r.size = m.Int()
		r.mime_type = m.String()
		r.attributes = m.Vector()
		return r
	case crc_inputWebDocument:
		r := TL_inputWebDocument{}
		r.url = m.String()
		r.size = m.Int()
		r.mime_type = m.String()
		r.attributes = m.Vector()
		return r
	case crc_inputWebFileLocation:
		r := TL_inputWebFileLocation{}
		r.url = m.String()
		r.access_hash = m.Long()
		return r
	case crc_upload_webFile:
		r := TL_upload_webFile{}
		r.size = m.Int()
		r.mime_type = m.String()
		r.file_type = m.Object()
		r.mtime = m.Int()
		r.bytes = m.StringBytes()
		return r
	case crc_payments_paymentForm:
		r := TL_payments_paymentForm{}
		r.flags = m.Int()
		if r.flags&(1<<2) != 0 {
			r.can_save_credentials = true
		}
		if r.flags&(1<<3) != 0 {
			r.password_missing = true
		}
		r.form_id = m.Long()
		r.bot_id = m.Long()
		r.title = m.String()
		r.description = m.String()
		if r.flags&(1<<5) != 0 {
			r.photo = m.Object()
		}
		r.invoice = m.Object()
		r.provider_id = m.Long()
		r.url = m.String()
		if r.flags&(1<<4) != 0 {
			r.native_provider = m.String()
		}
		if r.flags&(1<<4) != 0 {
			r.native_params = m.Object()
		}
		if r.flags&(1<<6) != 0 {
			r.additional_methods = m.Vector()
		}
		if r.flags&(1<<0) != 0 {
			r.saved_info = m.Object()
		}
		if r.flags&(1<<1) != 0 {
			r.saved_credentials = m.Vector()
		}
		r.users = m.Vector()
		return r
	case crc_payments_validatedRequestedInfo:
		r := TL_payments_validatedRequestedInfo{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.id = m.String()
		}
		if r.flags&(1<<1) != 0 {
			r.shipping_options = m.Vector()
		}
		return r
	case crc_payments_paymentResult:
		r := TL_payments_paymentResult{}
		r.updates = m.Object()
		return r
	case crc_payments_paymentReceipt:
		r := TL_payments_paymentReceipt{}
		r.flags = m.Int()
		r.date = m.Int()
		r.bot_id = m.Long()
		r.provider_id = m.Long()
		r.title = m.String()
		r.description = m.String()
		if r.flags&(1<<2) != 0 {
			r.photo = m.Object()
		}
		r.invoice = m.Object()
		if r.flags&(1<<0) != 0 {
			r.info = m.Object()
		}
		if r.flags&(1<<1) != 0 {
			r.shipping = m.Object()
		}
		if r.flags&(1<<3) != 0 {
			r.tip_amount = m.Long()
		}
		r.currency = m.String()
		r.total_amount = m.Long()
		r.credentials_title = m.String()
		r.users = m.Vector()
		return r
	case crc_payments_savedInfo:
		r := TL_payments_savedInfo{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.has_saved_credentials = true
		}
		if r.flags&(1<<0) != 0 {
			r.saved_info = m.Object()
		}
		return r
	case crc_inputPaymentCredentialsSaved:
		r := TL_inputPaymentCredentialsSaved{}
		r.id = m.String()
		r.tmp_password = m.StringBytes()
		return r
	case crc_inputPaymentCredentials:
		r := TL_inputPaymentCredentials{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.save = true
		}
		r.data = m.Object()
		return r
	case crc_account_tmpPassword:
		r := TL_account_tmpPassword{}
		r.tmp_password = m.StringBytes()
		r.valid_until = m.Int()
		return r
	case crc_shippingOption:
		r := TL_shippingOption{}
		r.id = m.String()
		r.title = m.String()
		r.prices = m.Vector()
		return r
	case crc_updateBotShippingQuery:
		r := TL_updateBotShippingQuery{}
		r.query_id = m.Long()
		r.user_id = m.Long()
		r.payload = m.StringBytes()
		r.shipping_address = m.Object()
		return r
	case crc_updateBotPrecheckoutQuery:
		r := TL_updateBotPrecheckoutQuery{}
		r.flags = m.Int()
		r.query_id = m.Long()
		r.user_id = m.Long()
		r.payload = m.StringBytes()
		if r.flags&(1<<0) != 0 {
			r.info = m.Object()
		}
		if r.flags&(1<<1) != 0 {
			r.shipping_option_id = m.String()
		}
		r.currency = m.String()
		r.total_amount = m.Long()
		return r
	case crc_inputStickerSetItem:
		r := TL_inputStickerSetItem{}
		r.flags = m.Int()
		r.document = m.Object()
		r.emoji = m.String()
		if r.flags&(1<<0) != 0 {
			r.mask_coords = m.Object()
		}
		if r.flags&(1<<1) != 0 {
			r.keywords = m.String()
		}
		return r
	case crc_updatePhoneCall:
		r := TL_updatePhoneCall{}
		r.phone_call = m.Object()
		return r
	case crc_inputPhoneCall:
		r := TL_inputPhoneCall{}
		r.id = m.Long()
		r.access_hash = m.Long()
		return r
	case crc_phoneCallEmpty:
		r := TL_phoneCallEmpty{}
		r.id = m.Long()
		return r
	case crc_phoneCallWaiting:
		r := TL_phoneCallWaiting{}
		r.flags = m.Int()
		if r.flags&(1<<6) != 0 {
			r.video = true
		}
		r.id = m.Long()
		r.access_hash = m.Long()
		r.date = m.Int()
		r.admin_id = m.Long()
		r.participant_id = m.Long()
		r.protocol = m.Object()
		if r.flags&(1<<0) != 0 {
			r.receive_date = m.Int()
		}
		return r
	case crc_phoneCallRequested:
		r := TL_phoneCallRequested{}
		r.flags = m.Int()
		if r.flags&(1<<6) != 0 {
			r.video = true
		}
		r.id = m.Long()
		r.access_hash = m.Long()
		r.date = m.Int()
		r.admin_id = m.Long()
		r.participant_id = m.Long()
		r.g_a_hash = m.StringBytes()
		r.protocol = m.Object()
		return r
	case crc_phoneCallAccepted:
		r := TL_phoneCallAccepted{}
		r.flags = m.Int()
		if r.flags&(1<<6) != 0 {
			r.video = true
		}
		r.id = m.Long()
		r.access_hash = m.Long()
		r.date = m.Int()
		r.admin_id = m.Long()
		r.participant_id = m.Long()
		r.g_b = m.StringBytes()
		r.protocol = m.Object()
		return r
	case crc_phoneCall:
		r := TL_phoneCall{}
		r.flags = m.Int()
		if r.flags&(1<<5) != 0 {
			r.p2p_allowed = true
		}
		if r.flags&(1<<6) != 0 {
			r.video = true
		}
		r.id = m.Long()
		r.access_hash = m.Long()
		r.date = m.Int()
		r.admin_id = m.Long()
		r.participant_id = m.Long()
		r.g_a_or_b = m.StringBytes()
		r.key_fingerprint = m.Long()
		r.protocol = m.Object()
		r.connections = m.Vector()
		r.start_date = m.Int()
		return r
	case crc_phoneCallDiscarded:
		r := TL_phoneCallDiscarded{}
		r.flags = m.Int()
		if r.flags&(1<<2) != 0 {
			r.need_rating = true
		}
		if r.flags&(1<<3) != 0 {
			r.need_debug = true
		}
		if r.flags&(1<<6) != 0 {
			r.video = true
		}
		r.id = m.Long()
		if r.flags&(1<<0) != 0 {
			r.reason = m.Object()
		}
		if r.flags&(1<<1) != 0 {
			r.duration = m.Int()
		}
		return r
	case crc_phoneConnection:
		r := TL_phoneConnection{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.tcp = true
		}
		r.id = m.Long()
		r.ip = m.String()
		r.ipv6 = m.String()
		r.port = m.Int()
		r.peer_tag = m.StringBytes()
		return r
	case crc_phoneCallProtocol:
		r := TL_phoneCallProtocol{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.udp_p2p = true
		}
		if r.flags&(1<<1) != 0 {
			r.udp_reflector = true
		}
		r.min_layer = m.Int()
		r.max_layer = m.Int()
		r.library_versions = m.VectorString()
		return r
	case crc_phone_phoneCall:
		r := TL_phone_phoneCall{}
		r.phone_call = m.Object()
		r.users = m.Vector()
		return r
	case crc_inputMessagesFilterPhoneCalls:
		r := TL_inputMessagesFilterPhoneCalls{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.missed = true
		}
		return r
	case crc_messageActionPhoneCall:
		r := TL_messageActionPhoneCall{}
		r.flags = m.Int()
		if r.flags&(1<<2) != 0 {
			r.video = true
		}
		r.call_id = m.Long()
		if r.flags&(1<<0) != 0 {
			r.reason = m.Object()
		}
		if r.flags&(1<<1) != 0 {
			r.duration = m.Int()
		}
		return r
	case crc_inputMessagesFilterRoundVoice:
		r := TL_inputMessagesFilterRoundVoice{}
		return r
	case crc_inputMessagesFilterRoundVideo:
		r := TL_inputMessagesFilterRoundVideo{}
		return r
	case crc_sendMessageRecordRoundAction:
		r := TL_sendMessageRecordRoundAction{}
		return r
	case crc_sendMessageUploadRoundAction:
		r := TL_sendMessageUploadRoundAction{}
		r.progress = m.Int()
		return r
	case crc_upload_fileCdnRedirect:
		r := TL_upload_fileCdnRedirect{}
		r.dc_id = m.Int()
		r.file_token = m.StringBytes()
		r.encryption_key = m.StringBytes()
		r.encryption_iv = m.StringBytes()
		r.file_hashes = m.Vector()
		return r
	case crc_upload_cdnFileReuploadNeeded:
		r := TL_upload_cdnFileReuploadNeeded{}
		r.request_token = m.StringBytes()
		return r
	case crc_upload_cdnFile:
		r := TL_upload_cdnFile{}
		r.bytes = m.StringBytes()
		return r
	case crc_cdnPublicKey:
		r := TL_cdnPublicKey{}
		r.dc_id = m.Int()
		r.public_key = m.String()
		return r
	case crc_cdnConfig:
		r := TL_cdnConfig{}
		r.public_keys = m.Vector()
		return r
	case crc_pageBlockChannel:
		r := TL_pageBlockChannel{}
		r.channel = m.Object()
		return r
	case crc_langPackString:
		r := TL_langPackString{}
		r.key = m.String()
		r.value = m.String()
		return r
	case crc_langPackStringPluralized:
		r := TL_langPackStringPluralized{}
		r.flags = m.Int()
		r.key = m.String()
		if r.flags&(1<<0) != 0 {
			r.zero_value = m.String()
		}
		if r.flags&(1<<1) != 0 {
			r.one_value = m.String()
		}
		if r.flags&(1<<2) != 0 {
			r.two_value = m.String()
		}
		if r.flags&(1<<3) != 0 {
			r.few_value = m.String()
		}
		if r.flags&(1<<4) != 0 {
			r.many_value = m.String()
		}
		r.other_value = m.String()
		return r
	case crc_langPackStringDeleted:
		r := TL_langPackStringDeleted{}
		r.key = m.String()
		return r
	case crc_langPackDifference:
		r := TL_langPackDifference{}
		r.lang_code = m.String()
		r.from_version = m.Int()
		r.version = m.Int()
		r.strings = m.Vector()
		return r
	case crc_langPackLanguage:
		r := TL_langPackLanguage{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.official = true
		}
		if r.flags&(1<<2) != 0 {
			r.rtl = true
		}
		if r.flags&(1<<3) != 0 {
			r.beta = true
		}
		r.name = m.String()
		r.native_name = m.String()
		r.lang_code = m.String()
		if r.flags&(1<<1) != 0 {
			r.base_lang_code = m.String()
		}
		r.plural_code = m.String()
		r.strings_count = m.Int()
		r.translated_count = m.Int()
		r.translations_url = m.String()
		return r
	case crc_updateLangPackTooLong:
		r := TL_updateLangPackTooLong{}
		r.lang_code = m.String()
		return r
	case crc_updateLangPack:
		r := TL_updateLangPack{}
		r.difference = m.Object()
		return r
	case crc_channelParticipantAdmin:
		r := TL_channelParticipantAdmin{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.can_edit = true
		}
		if r.flags&(1<<1) != 0 {
			r.self = true
		}
		r.user_id = m.Long()
		if r.flags&(1<<1) != 0 {
			r.inviter_id = m.Long()
		}
		r.promoted_by = m.Long()
		r.date = m.Int()
		r.admin_rights = m.Object()
		if r.flags&(1<<2) != 0 {
			r.rank = m.String()
		}
		return r
	case crc_channelParticipantBanned:
		r := TL_channelParticipantBanned{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.left = true
		}
		r.peer = m.Object()
		r.kicked_by = m.Long()
		r.date = m.Int()
		r.banned_rights = m.Object()
		return r
	case crc_channelParticipantsBanned:
		r := TL_channelParticipantsBanned{}
		r.q = m.String()
		return r
	case crc_channelParticipantsSearch:
		r := TL_channelParticipantsSearch{}
		r.q = m.String()
		return r
	case crc_channelAdminLogEventActionChangeTitle:
		r := TL_channelAdminLogEventActionChangeTitle{}
		r.prev_value = m.String()
		r.new_value = m.String()
		return r
	case crc_channelAdminLogEventActionChangeAbout:
		r := TL_channelAdminLogEventActionChangeAbout{}
		r.prev_value = m.String()
		r.new_value = m.String()
		return r
	case crc_channelAdminLogEventActionChangeUsername:
		r := TL_channelAdminLogEventActionChangeUsername{}
		r.prev_value = m.String()
		r.new_value = m.String()
		return r
	case crc_channelAdminLogEventActionChangePhoto:
		r := TL_channelAdminLogEventActionChangePhoto{}
		r.prev_photo = m.Object()
		r.new_photo = m.Object()
		return r
	case crc_channelAdminLogEventActionToggleInvites:
		r := TL_channelAdminLogEventActionToggleInvites{}
		r.new_value = m.Object()
		return r
	case crc_channelAdminLogEventActionToggleSignatures:
		r := TL_channelAdminLogEventActionToggleSignatures{}
		r.new_value = m.Object()
		return r
	case crc_channelAdminLogEventActionUpdatePinned:
		r := TL_channelAdminLogEventActionUpdatePinned{}
		r.message = m.Object()
		return r
	case crc_channelAdminLogEventActionEditMessage:
		r := TL_channelAdminLogEventActionEditMessage{}
		r.prev_message = m.Object()
		r.new_message = m.Object()
		return r
	case crc_channelAdminLogEventActionDeleteMessage:
		r := TL_channelAdminLogEventActionDeleteMessage{}
		r.message = m.Object()
		return r
	case crc_channelAdminLogEventActionParticipantJoin:
		r := TL_channelAdminLogEventActionParticipantJoin{}
		return r
	case crc_channelAdminLogEventActionParticipantLeave:
		r := TL_channelAdminLogEventActionParticipantLeave{}
		return r
	case crc_channelAdminLogEventActionParticipantInvite:
		r := TL_channelAdminLogEventActionParticipantInvite{}
		r.participant = m.Object()
		return r
	case crc_channelAdminLogEventActionParticipantToggleBan:
		r := TL_channelAdminLogEventActionParticipantToggleBan{}
		r.prev_participant = m.Object()
		r.new_participant = m.Object()
		return r
	case crc_channelAdminLogEventActionParticipantToggleAdmin:
		r := TL_channelAdminLogEventActionParticipantToggleAdmin{}
		r.prev_participant = m.Object()
		r.new_participant = m.Object()
		return r
	case crc_channelAdminLogEvent:
		r := TL_channelAdminLogEvent{}
		r.id = m.Long()
		r.date = m.Int()
		r.user_id = m.Long()
		r.action = m.Object()
		return r
	case crc_channels_adminLogResults:
		r := TL_channels_adminLogResults{}
		r.events = m.Vector()
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_channelAdminLogEventsFilter:
		r := TL_channelAdminLogEventsFilter{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.join = true
		}
		if r.flags&(1<<1) != 0 {
			r.leave = true
		}
		if r.flags&(1<<2) != 0 {
			r.invite = true
		}
		if r.flags&(1<<3) != 0 {
			r.ban = true
		}
		if r.flags&(1<<4) != 0 {
			r.unban = true
		}
		if r.flags&(1<<5) != 0 {
			r.kick = true
		}
		if r.flags&(1<<6) != 0 {
			r.unkick = true
		}
		if r.flags&(1<<7) != 0 {
			r.promote = true
		}
		if r.flags&(1<<8) != 0 {
			r.demote = true
		}
		if r.flags&(1<<9) != 0 {
			r.info = true
		}
		if r.flags&(1<<10) != 0 {
			r.settings = true
		}
		if r.flags&(1<<11) != 0 {
			r.pinned = true
		}
		if r.flags&(1<<12) != 0 {
			r.edit = true
		}
		if r.flags&(1<<13) != 0 {
			r.delete = true
		}
		if r.flags&(1<<14) != 0 {
			r.group_call = true
		}
		if r.flags&(1<<15) != 0 {
			r.invites = true
		}
		if r.flags&(1<<16) != 0 {
			r.send = true
		}
		if r.flags&(1<<17) != 0 {
			r.forums = true
		}
		if r.flags&(1<<18) != 0 {
			r.sub_extend = true
		}
		return r
	case crc_topPeerCategoryPhoneCalls:
		r := TL_topPeerCategoryPhoneCalls{}
		return r
	case crc_pageBlockAudio:
		r := TL_pageBlockAudio{}
		r.audio_id = m.Long()
		r.caption = m.Object()
		return r
	case crc_popularContact:
		r := TL_popularContact{}
		r.client_id = m.Long()
		r.importers = m.Int()
		return r
	case crc_messageActionScreenshotTaken:
		r := TL_messageActionScreenshotTaken{}
		return r
	case crc_messages_favedStickersNotModified:
		r := TL_messages_favedStickersNotModified{}
		return r
	case crc_messages_favedStickers:
		r := TL_messages_favedStickers{}
		r.hash = m.Long()
		r.packs = m.Vector()
		r.stickers = m.Vector()
		return r
	case crc_updateFavedStickers:
		r := TL_updateFavedStickers{}
		return r
	case crc_updateChannelReadMessagesContents:
		r := TL_updateChannelReadMessagesContents{}
		r.flags = m.Int()
		r.channel_id = m.Long()
		if r.flags&(1<<0) != 0 {
			r.top_msg_id = m.Int()
		}
		r.messages = m.VectorInt()
		return r
	case crc_inputMessagesFilterMyMentions:
		r := TL_inputMessagesFilterMyMentions{}
		return r
	case crc_updateContactsReset:
		r := TL_updateContactsReset{}
		return r
	case crc_channelAdminLogEventActionChangeStickerSet:
		r := TL_channelAdminLogEventActionChangeStickerSet{}
		r.prev_stickerset = m.Object()
		r.new_stickerset = m.Object()
		return r
	case crc_messageActionCustomAction:
		r := TL_messageActionCustomAction{}
		r.message = m.String()
		return r
	case crc_inputPaymentCredentialsApplePay:
		r := TL_inputPaymentCredentialsApplePay{}
		r.payment_data = m.Object()
		return r
	case crc_inputMessagesFilterGeo:
		r := TL_inputMessagesFilterGeo{}
		return r
	case crc_inputMessagesFilterContacts:
		r := TL_inputMessagesFilterContacts{}
		return r
	case crc_updateChannelAvailableMessages:
		r := TL_updateChannelAvailableMessages{}
		r.channel_id = m.Long()
		r.available_min_id = m.Int()
		return r
	case crc_channelAdminLogEventActionTogglePreHistoryHidden:
		r := TL_channelAdminLogEventActionTogglePreHistoryHidden{}
		r.new_value = m.Object()
		return r
	case crc_inputMediaGeoLive:
		r := TL_inputMediaGeoLive{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.stopped = true
		}
		r.geo_point = m.Object()
		if r.flags&(1<<2) != 0 {
			r.heading = m.Int()
		}
		if r.flags&(1<<1) != 0 {
			r.period = m.Int()
		}
		if r.flags&(1<<3) != 0 {
			r.proximity_notification_radius = m.Int()
		}
		return r
	case crc_messageMediaGeoLive:
		r := TL_messageMediaGeoLive{}
		r.flags = m.Int()
		r.geo = m.Object()
		if r.flags&(1<<0) != 0 {
			r.heading = m.Int()
		}
		r.period = m.Int()
		if r.flags&(1<<1) != 0 {
			r.proximity_notification_radius = m.Int()
		}
		return r
	case crc_recentMeUrlUnknown:
		r := TL_recentMeUrlUnknown{}
		r.url = m.String()
		return r
	case crc_recentMeUrlUser:
		r := TL_recentMeUrlUser{}
		r.url = m.String()
		r.user_id = m.Long()
		return r
	case crc_recentMeUrlChat:
		r := TL_recentMeUrlChat{}
		r.url = m.String()
		r.chat_id = m.Long()
		return r
	case crc_recentMeUrlChatInvite:
		r := TL_recentMeUrlChatInvite{}
		r.url = m.String()
		r.chat_invite = m.Object()
		return r
	case crc_recentMeUrlStickerSet:
		r := TL_recentMeUrlStickerSet{}
		r.url = m.String()
		r.set = m.Object()
		return r
	case crc_help_recentMeUrls:
		r := TL_help_recentMeUrls{}
		r.urls = m.Vector()
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_channels_channelParticipantsNotModified:
		r := TL_channels_channelParticipantsNotModified{}
		return r
	case crc_messages_messagesNotModified:
		r := TL_messages_messagesNotModified{}
		r.count = m.Int()
		return r
	case crc_inputSingleMedia:
		r := TL_inputSingleMedia{}
		r.flags = m.Int()
		r.media = m.Object()
		r.random_id = m.Long()
		r.message = m.String()
		if r.flags&(1<<0) != 0 {
			r.entities = m.Vector()
		}
		return r
	case crc_webAuthorization:
		r := TL_webAuthorization{}
		r.hash = m.Long()
		r.bot_id = m.Long()
		r.domain = m.String()
		r.browser = m.String()
		r.platform = m.String()
		r.date_created = m.Int()
		r.date_active = m.Int()
		r.ip = m.String()
		r.region = m.String()
		return r
	case crc_account_webAuthorizations:
		r := TL_account_webAuthorizations{}
		r.authorizations = m.Vector()
		r.users = m.Vector()
		return r
	case crc_inputMessageID:
		r := TL_inputMessageID{}
		r.id = m.Int()
		return r
	case crc_inputMessageReplyTo:
		r := TL_inputMessageReplyTo{}
		r.id = m.Int()
		return r
	case crc_inputMessagePinned:
		r := TL_inputMessagePinned{}
		return r
	case crc_messageEntityPhone:
		r := TL_messageEntityPhone{}
		r.offset = m.Int()
		r.length = m.Int()
		return r
	case crc_messageEntityCashtag:
		r := TL_messageEntityCashtag{}
		r.offset = m.Int()
		r.length = m.Int()
		return r
	case crc_messageActionBotAllowed:
		r := TL_messageActionBotAllowed{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.attach_menu = true
		}
		if r.flags&(1<<3) != 0 {
			r.from_request = true
		}
		if r.flags&(1<<0) != 0 {
			r.domain = m.String()
		}
		if r.flags&(1<<2) != 0 {
			r.app = m.Object()
		}
		return r
	case crc_inputDialogPeer:
		r := TL_inputDialogPeer{}
		r.peer = m.Object()
		return r
	case crc_dialogPeer:
		r := TL_dialogPeer{}
		r.peer = m.Object()
		return r
	case crc_messages_foundStickerSetsNotModified:
		r := TL_messages_foundStickerSetsNotModified{}
		return r
	case crc_messages_foundStickerSets:
		r := TL_messages_foundStickerSets{}
		r.hash = m.Long()
		r.sets = m.Vector()
		return r
	case crc_fileHash:
		r := TL_fileHash{}
		r.offset = m.Long()
		r.limit = m.Int()
		r.hash = m.StringBytes()
		return r
	case crc_webDocumentNoProxy:
		r := TL_webDocumentNoProxy{}
		r.url = m.String()
		r.size = m.Int()
		r.mime_type = m.String()
		r.attributes = m.Vector()
		return r
	case crc_inputClientProxy:
		r := TL_inputClientProxy{}
		r.address = m.String()
		r.port = m.Int()
		return r
	case crc_help_termsOfServiceUpdateEmpty:
		r := TL_help_termsOfServiceUpdateEmpty{}
		r.expires = m.Int()
		return r
	case crc_help_termsOfServiceUpdate:
		r := TL_help_termsOfServiceUpdate{}
		r.expires = m.Int()
		r.terms_of_service = m.Object()
		return r
	case crc_inputSecureFileUploaded:
		r := TL_inputSecureFileUploaded{}
		r.id = m.Long()
		r.parts = m.Int()
		r.md5_checksum = m.String()
		r.file_hash = m.StringBytes()
		r.secret = m.StringBytes()
		return r
	case crc_inputSecureFile:
		r := TL_inputSecureFile{}
		r.id = m.Long()
		r.access_hash = m.Long()
		return r
	case crc_inputSecureFileLocation:
		r := TL_inputSecureFileLocation{}
		r.id = m.Long()
		r.access_hash = m.Long()
		return r
	case crc_secureFileEmpty:
		r := TL_secureFileEmpty{}
		return r
	case crc_secureFile:
		r := TL_secureFile{}
		r.id = m.Long()
		r.access_hash = m.Long()
		r.size = m.Long()
		r.dc_id = m.Int()
		r.date = m.Int()
		r.file_hash = m.StringBytes()
		r.secret = m.StringBytes()
		return r
	case crc_secureData:
		r := TL_secureData{}
		r.data = m.StringBytes()
		r.data_hash = m.StringBytes()
		r.secret = m.StringBytes()
		return r
	case crc_securePlainPhone:
		r := TL_securePlainPhone{}
		r.phone = m.String()
		return r
	case crc_securePlainEmail:
		r := TL_securePlainEmail{}
		r.email = m.String()
		return r
	case crc_secureValueTypePersonalDetails:
		r := TL_secureValueTypePersonalDetails{}
		return r
	case crc_secureValueTypePassport:
		r := TL_secureValueTypePassport{}
		return r
	case crc_secureValueTypeDriverLicense:
		r := TL_secureValueTypeDriverLicense{}
		return r
	case crc_secureValueTypeIdentityCard:
		r := TL_secureValueTypeIdentityCard{}
		return r
	case crc_secureValueTypeInternalPassport:
		r := TL_secureValueTypeInternalPassport{}
		return r
	case crc_secureValueTypeAddress:
		r := TL_secureValueTypeAddress{}
		return r
	case crc_secureValueTypeUtilityBill:
		r := TL_secureValueTypeUtilityBill{}
		return r
	case crc_secureValueTypeBankStatement:
		r := TL_secureValueTypeBankStatement{}
		return r
	case crc_secureValueTypeRentalAgreement:
		r := TL_secureValueTypeRentalAgreement{}
		return r
	case crc_secureValueTypePassportRegistration:
		r := TL_secureValueTypePassportRegistration{}
		return r
	case crc_secureValueTypeTemporaryRegistration:
		r := TL_secureValueTypeTemporaryRegistration{}
		return r
	case crc_secureValueTypePhone:
		r := TL_secureValueTypePhone{}
		return r
	case crc_secureValueTypeEmail:
		r := TL_secureValueTypeEmail{}
		return r
	case crc_secureValue:
		r := TL_secureValue{}
		r.flags = m.Int()
		r._type = m.Object()
		if r.flags&(1<<0) != 0 {
			r.data = m.Object()
		}
		if r.flags&(1<<1) != 0 {
			r.front_side = m.Object()
		}
		if r.flags&(1<<2) != 0 {
			r.reverse_side = m.Object()
		}
		if r.flags&(1<<3) != 0 {
			r.selfie = m.Object()
		}
		if r.flags&(1<<6) != 0 {
			r.translation = m.Vector()
		}
		if r.flags&(1<<4) != 0 {
			r.files = m.Vector()
		}
		if r.flags&(1<<5) != 0 {
			r.plain_data = m.Object()
		}
		r.hash = m.StringBytes()
		return r
	case crc_inputSecureValue:
		r := TL_inputSecureValue{}
		r.flags = m.Int()
		r._type = m.Object()
		if r.flags&(1<<0) != 0 {
			r.data = m.Object()
		}
		if r.flags&(1<<1) != 0 {
			r.front_side = m.Object()
		}
		if r.flags&(1<<2) != 0 {
			r.reverse_side = m.Object()
		}
		if r.flags&(1<<3) != 0 {
			r.selfie = m.Object()
		}
		if r.flags&(1<<6) != 0 {
			r.translation = m.Vector()
		}
		if r.flags&(1<<4) != 0 {
			r.files = m.Vector()
		}
		if r.flags&(1<<5) != 0 {
			r.plain_data = m.Object()
		}
		return r
	case crc_secureValueHash:
		r := TL_secureValueHash{}
		r._type = m.Object()
		r.hash = m.StringBytes()
		return r
	case crc_secureValueErrorData:
		r := TL_secureValueErrorData{}
		r._type = m.Object()
		r.data_hash = m.StringBytes()
		r.field = m.String()
		r.text = m.String()
		return r
	case crc_secureValueErrorFrontSide:
		r := TL_secureValueErrorFrontSide{}
		r._type = m.Object()
		r.file_hash = m.StringBytes()
		r.text = m.String()
		return r
	case crc_secureValueErrorReverseSide:
		r := TL_secureValueErrorReverseSide{}
		r._type = m.Object()
		r.file_hash = m.StringBytes()
		r.text = m.String()
		return r
	case crc_secureValueErrorSelfie:
		r := TL_secureValueErrorSelfie{}
		r._type = m.Object()
		r.file_hash = m.StringBytes()
		r.text = m.String()
		return r
	case crc_secureValueErrorFile:
		r := TL_secureValueErrorFile{}
		r._type = m.Object()
		r.file_hash = m.StringBytes()
		r.text = m.String()
		return r
	case crc_secureValueErrorFiles:
		r := TL_secureValueErrorFiles{}
		r._type = m.Object()
		r.file_hash = m.Vector()
		r.text = m.String()
		return r
	case crc_secureCredentialsEncrypted:
		r := TL_secureCredentialsEncrypted{}
		r.data = m.StringBytes()
		r.hash = m.StringBytes()
		r.secret = m.StringBytes()
		return r
	case crc_account_authorizationForm:
		r := TL_account_authorizationForm{}
		r.flags = m.Int()
		r.required_types = m.Vector()
		r.values = m.Vector()
		r.errors = m.Vector()
		r.users = m.Vector()
		if r.flags&(1<<0) != 0 {
			r.privacy_policy_url = m.String()
		}
		return r
	case crc_account_sentEmailCode:
		r := TL_account_sentEmailCode{}
		r.email_pattern = m.String()
		r.length = m.Int()
		return r
	case crc_messageActionSecureValuesSentMe:
		r := TL_messageActionSecureValuesSentMe{}
		r.values = m.Vector()
		r.credentials = m.Object()
		return r
	case crc_messageActionSecureValuesSent:
		r := TL_messageActionSecureValuesSent{}
		r.types = m.Vector()
		return r
	case crc_help_deepLinkInfoEmpty:
		r := TL_help_deepLinkInfoEmpty{}
		return r
	case crc_help_deepLinkInfo:
		r := TL_help_deepLinkInfo{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.update_app = true
		}
		r.message = m.String()
		if r.flags&(1<<1) != 0 {
			r.entities = m.Vector()
		}
		return r
	case crc_savedPhoneContact:
		r := TL_savedPhoneContact{}
		r.phone = m.String()
		r.first_name = m.String()
		r.last_name = m.String()
		r.date = m.Int()
		return r
	case crc_account_takeout:
		r := TL_account_takeout{}
		r.id = m.Long()
		return r
	case crc_inputTakeoutFileLocation:
		r := TL_inputTakeoutFileLocation{}
		return r
	case crc_updateDialogUnreadMark:
		r := TL_updateDialogUnreadMark{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.unread = true
		}
		r.peer = m.Object()
		return r
	case crc_messages_dialogsNotModified:
		r := TL_messages_dialogsNotModified{}
		r.count = m.Int()
		return r
	case crc_inputWebFileGeoPointLocation:
		r := TL_inputWebFileGeoPointLocation{}
		r.geo_point = m.Object()
		r.access_hash = m.Long()
		r.w = m.Int()
		r.h = m.Int()
		r.zoom = m.Int()
		r.scale = m.Int()
		return r
	case crc_contacts_topPeersDisabled:
		r := TL_contacts_topPeersDisabled{}
		return r
	case crc_inputReportReasonCopyright:
		r := TL_inputReportReasonCopyright{}
		return r
	case crc_passwordKdfAlgoUnknown:
		r := TL_passwordKdfAlgoUnknown{}
		return r
	case crc_securePasswordKdfAlgoUnknown:
		r := TL_securePasswordKdfAlgoUnknown{}
		return r
	case crc_securePasswordKdfAlgoPBKDF2HMACSHA512iter100000:
		r := TL_securePasswordKdfAlgoPBKDF2HMACSHA512iter100000{}
		r.salt = m.StringBytes()
		return r
	case crc_securePasswordKdfAlgoSHA512:
		r := TL_securePasswordKdfAlgoSHA512{}
		r.salt = m.StringBytes()
		return r
	case crc_secureSecretSettings:
		r := TL_secureSecretSettings{}
		r.secure_algo = m.Object()
		r.secure_secret = m.StringBytes()
		r.secure_secret_id = m.Long()
		return r
	case crc_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow:
		r := TL_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow{}
		r.salt1 = m.StringBytes()
		r.salt2 = m.StringBytes()
		r.g = m.Int()
		r.p = m.StringBytes()
		return r
	case crc_inputCheckPasswordEmpty:
		r := TL_inputCheckPasswordEmpty{}
		return r
	case crc_inputCheckPasswordSRP:
		r := TL_inputCheckPasswordSRP{}
		r.srp_id = m.Long()
		r.A = m.StringBytes()
		r.M1 = m.StringBytes()
		return r
	case crc_secureValueError:
		r := TL_secureValueError{}
		r._type = m.Object()
		r.hash = m.StringBytes()
		r.text = m.String()
		return r
	case crc_secureValueErrorTranslationFile:
		r := TL_secureValueErrorTranslationFile{}
		r._type = m.Object()
		r.file_hash = m.StringBytes()
		r.text = m.String()
		return r
	case crc_secureValueErrorTranslationFiles:
		r := TL_secureValueErrorTranslationFiles{}
		r._type = m.Object()
		r.file_hash = m.Vector()
		r.text = m.String()
		return r
	case crc_secureRequiredType:
		r := TL_secureRequiredType{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.native_names = true
		}
		if r.flags&(1<<1) != 0 {
			r.selfie_required = true
		}
		if r.flags&(1<<2) != 0 {
			r.translation_required = true
		}
		r._type = m.Object()
		return r
	case crc_secureRequiredTypeOneOf:
		r := TL_secureRequiredTypeOneOf{}
		r.types = m.Vector()
		return r
	case crc_help_passportConfigNotModified:
		r := TL_help_passportConfigNotModified{}
		return r
	case crc_help_passportConfig:
		r := TL_help_passportConfig{}
		r.hash = m.Int()
		r.countries_langs = m.Object()
		return r
	case crc_inputAppEvent:
		r := TL_inputAppEvent{}
		r.time = m.Double()
		r._type = m.String()
		r.peer = m.Long()
		r.data = m.Object()
		return r
	case crc_jsonObjectValue:
		r := TL_jsonObjectValue{}
		r.key = m.String()
		r.value = m.Object()
		return r
	case crc_jsonNull:
		r := TL_jsonNull{}
		return r
	case crc_jsonBool:
		r := TL_jsonBool{}
		r.value = m.Object()
		return r
	case crc_jsonNumber:
		r := TL_jsonNumber{}
		r.value = m.Double()
		return r
	case crc_jsonString:
		r := TL_jsonString{}
		r.value = m.String()
		return r
	case crc_jsonArray:
		r := TL_jsonArray{}
		r.value = m.Vector()
		return r
	case crc_jsonObject:
		r := TL_jsonObject{}
		r.value = m.Vector()
		return r
	case crc_inputNotifyBroadcasts:
		r := TL_inputNotifyBroadcasts{}
		return r
	case crc_notifyBroadcasts:
		r := TL_notifyBroadcasts{}
		return r
	case crc_textSubscript:
		r := TL_textSubscript{}
		r.text = m.Object()
		return r
	case crc_textSuperscript:
		r := TL_textSuperscript{}
		r.text = m.Object()
		return r
	case crc_textMarked:
		r := TL_textMarked{}
		r.text = m.Object()
		return r
	case crc_textPhone:
		r := TL_textPhone{}
		r.text = m.Object()
		r.phone = m.String()
		return r
	case crc_textImage:
		r := TL_textImage{}
		r.document_id = m.Long()
		r.w = m.Int()
		r.h = m.Int()
		return r
	case crc_pageBlockKicker:
		r := TL_pageBlockKicker{}
		r.text = m.Object()
		return r
	case crc_pageTableCell:
		r := TL_pageTableCell{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.header = true
		}
		if r.flags&(1<<3) != 0 {
			r.align_center = true
		}
		if r.flags&(1<<4) != 0 {
			r.align_right = true
		}
		if r.flags&(1<<5) != 0 {
			r.valign_middle = true
		}
		if r.flags&(1<<6) != 0 {
			r.valign_bottom = true
		}
		if r.flags&(1<<7) != 0 {
			r.text = m.Object()
		}
		if r.flags&(1<<1) != 0 {
			r.colspan = m.Int()
		}
		if r.flags&(1<<2) != 0 {
			r.rowspan = m.Int()
		}
		return r
	case crc_pageTableRow:
		r := TL_pageTableRow{}
		r.cells = m.Vector()
		return r
	case crc_pageBlockTable:
		r := TL_pageBlockTable{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.bordered = true
		}
		if r.flags&(1<<1) != 0 {
			r.striped = true
		}
		r.title = m.Object()
		r.rows = m.Vector()
		return r
	case crc_pageCaption:
		r := TL_pageCaption{}
		r.text = m.Object()
		r.credit = m.Object()
		return r
	case crc_pageListItemText:
		r := TL_pageListItemText{}
		r.text = m.Object()
		return r
	case crc_pageListItemBlocks:
		r := TL_pageListItemBlocks{}
		r.blocks = m.Vector()
		return r
	case crc_pageListOrderedItemText:
		r := TL_pageListOrderedItemText{}
		r.num = m.String()
		r.text = m.Object()
		return r
	case crc_pageListOrderedItemBlocks:
		r := TL_pageListOrderedItemBlocks{}
		r.num = m.String()
		r.blocks = m.Vector()
		return r
	case crc_pageBlockOrderedList:
		r := TL_pageBlockOrderedList{}
		r.items = m.Vector()
		return r
	case crc_pageBlockDetails:
		r := TL_pageBlockDetails{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.open = true
		}
		r.blocks = m.Vector()
		r.title = m.Object()
		return r
	case crc_pageRelatedArticle:
		r := TL_pageRelatedArticle{}
		r.flags = m.Int()
		r.url = m.String()
		r.webpage_id = m.Long()
		if r.flags&(1<<0) != 0 {
			r.title = m.String()
		}
		if r.flags&(1<<1) != 0 {
			r.description = m.String()
		}
		if r.flags&(1<<2) != 0 {
			r.photo_id = m.Long()
		}
		if r.flags&(1<<3) != 0 {
			r.author = m.String()
		}
		if r.flags&(1<<4) != 0 {
			r.published_date = m.Int()
		}
		return r
	case crc_pageBlockRelatedArticles:
		r := TL_pageBlockRelatedArticles{}
		r.title = m.Object()
		r.articles = m.Vector()
		return r
	case crc_pageBlockMap:
		r := TL_pageBlockMap{}
		r.geo = m.Object()
		r.zoom = m.Int()
		r.w = m.Int()
		r.h = m.Int()
		r.caption = m.Object()
		return r
	case crc_page:
		r := TL_page{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.part = true
		}
		if r.flags&(1<<1) != 0 {
			r.rtl = true
		}
		if r.flags&(1<<2) != 0 {
			r.v2 = true
		}
		r.url = m.String()
		r.blocks = m.Vector()
		r.photos = m.Vector()
		r.documents = m.Vector()
		if r.flags&(1<<3) != 0 {
			r.views = m.Int()
		}
		return r
	case crc_inputPrivacyKeyPhoneP2P:
		r := TL_inputPrivacyKeyPhoneP2P{}
		return r
	case crc_privacyKeyPhoneP2P:
		r := TL_privacyKeyPhoneP2P{}
		return r
	case crc_textAnchor:
		r := TL_textAnchor{}
		r.text = m.Object()
		r.name = m.String()
		return r
	case crc_help_supportName:
		r := TL_help_supportName{}
		r.name = m.String()
		return r
	case crc_help_userInfoEmpty:
		r := TL_help_userInfoEmpty{}
		return r
	case crc_help_userInfo:
		r := TL_help_userInfo{}
		r.message = m.String()
		r.entities = m.Vector()
		r.author = m.String()
		r.date = m.Int()
		return r
	case crc_messageActionContactSignUp:
		r := TL_messageActionContactSignUp{}
		return r
	case crc_updateMessagePoll:
		r := TL_updateMessagePoll{}
		r.flags = m.Int()
		r.poll_id = m.Long()
		if r.flags&(1<<0) != 0 {
			r.poll = m.Object()
		}
		r.results = m.Object()
		return r
	case crc_pollAnswer:
		r := TL_pollAnswer{}
		r.text = m.String()
		r.option = m.StringBytes()
		return r
	case crc_poll:
		r := TL_poll{}
		r.id = m.Long()
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.closed = true
		}
		if r.flags&(1<<1) != 0 {
			r.public_voters = true
		}
		if r.flags&(1<<2) != 0 {
			r.multiple_choice = true
		}
		if r.flags&(1<<3) != 0 {
			r.quiz = true
		}
		r.question = m.String()
		r.answers = m.Vector()
		if r.flags&(1<<4) != 0 {
			r.close_period = m.Int()
		}
		if r.flags&(1<<5) != 0 {
			r.close_date = m.Int()
		}
		return r
	case crc_pollAnswerVoters:
		r := TL_pollAnswerVoters{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.chosen = true
		}
		if r.flags&(1<<1) != 0 {
			r.correct = true
		}
		r.option = m.StringBytes()
		r.voters = m.Int()
		return r
	case crc_pollResults:
		r := TL_pollResults{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.min = true
		}
		if r.flags&(1<<1) != 0 {
			r.results = m.Vector()
		}
		if r.flags&(1<<2) != 0 {
			r.total_voters = m.Int()
		}
		if r.flags&(1<<3) != 0 {
			r.recent_voters = m.Vector()
		}
		if r.flags&(1<<4) != 0 {
			r.solution = m.String()
		}
		if r.flags&(1<<4) != 0 {
			r.solution_entities = m.Vector()
		}
		return r
	case crc_inputMediaPoll:
		r := TL_inputMediaPoll{}
		r.flags = m.Int()
		r.poll = m.Object()
		if r.flags&(1<<0) != 0 {
			r.correct_answers = m.Vector()
		}
		if r.flags&(1<<1) != 0 {
			r.solution = m.String()
		}
		if r.flags&(1<<1) != 0 {
			r.solution_entities = m.Vector()
		}
		return r
	case crc_messageMediaPoll:
		r := TL_messageMediaPoll{}
		r.poll = m.Object()
		r.results = m.Object()
		return r
	case crc_chatOnlines:
		r := TL_chatOnlines{}
		r.onlines = m.Int()
		return r
	case crc_statsURL:
		r := TL_statsURL{}
		r.url = m.String()
		return r
	case crc_photoStrippedSize:
		r := TL_photoStrippedSize{}
		r._type = m.String()
		r.bytes = m.StringBytes()
		return r
	case crc_chatAdminRights:
		r := TL_chatAdminRights{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.change_info = true
		}
		if r.flags&(1<<1) != 0 {
			r.post_messages = true
		}
		if r.flags&(1<<2) != 0 {
			r.edit_messages = true
		}
		if r.flags&(1<<3) != 0 {
			r.delete_messages = true
		}
		if r.flags&(1<<4) != 0 {
			r.ban_users = true
		}
		if r.flags&(1<<5) != 0 {
			r.invite_users = true
		}
		if r.flags&(1<<7) != 0 {
			r.pin_messages = true
		}
		if r.flags&(1<<9) != 0 {
			r.add_admins = true
		}
		if r.flags&(1<<10) != 0 {
			r.anonymous = true
		}
		if r.flags&(1<<11) != 0 {
			r.manage_call = true
		}
		if r.flags&(1<<12) != 0 {
			r.other = true
		}
		if r.flags&(1<<13) != 0 {
			r.manage_topics = true
		}
		if r.flags&(1<<14) != 0 {
			r.post_stories = true
		}
		if r.flags&(1<<15) != 0 {
			r.edit_stories = true
		}
		if r.flags&(1<<16) != 0 {
			r.delete_stories = true
		}
		return r
	case crc_chatBannedRights:
		r := TL_chatBannedRights{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.view_messages = true
		}
		if r.flags&(1<<1) != 0 {
			r.send_messages = true
		}
		if r.flags&(1<<2) != 0 {
			r.send_media = true
		}
		if r.flags&(1<<3) != 0 {
			r.send_stickers = true
		}
		if r.flags&(1<<4) != 0 {
			r.send_gifs = true
		}
		if r.flags&(1<<5) != 0 {
			r.send_games = true
		}
		if r.flags&(1<<6) != 0 {
			r.send_inline = true
		}
		if r.flags&(1<<7) != 0 {
			r.embed_links = true
		}
		if r.flags&(1<<8) != 0 {
			r.send_polls = true
		}
		if r.flags&(1<<10) != 0 {
			r.change_info = true
		}
		if r.flags&(1<<15) != 0 {
			r.invite_users = true
		}
		if r.flags&(1<<17) != 0 {
			r.pin_messages = true
		}
		if r.flags&(1<<18) != 0 {
			r.manage_topics = true
		}
		if r.flags&(1<<19) != 0 {
			r.send_photos = true
		}
		if r.flags&(1<<20) != 0 {
			r.send_videos = true
		}
		if r.flags&(1<<21) != 0 {
			r.send_roundvideos = true
		}
		if r.flags&(1<<22) != 0 {
			r.send_audios = true
		}
		if r.flags&(1<<23) != 0 {
			r.send_voices = true
		}
		if r.flags&(1<<24) != 0 {
			r.send_docs = true
		}
		if r.flags&(1<<25) != 0 {
			r.send_plain = true
		}
		r.until_date = m.Int()
		return r
	case crc_updateChatDefaultBannedRights:
		r := TL_updateChatDefaultBannedRights{}
		r.peer = m.Object()
		r.default_banned_rights = m.Object()
		r.version = m.Int()
		return r
	case crc_inputWallPaper:
		r := TL_inputWallPaper{}
		r.id = m.Long()
		r.access_hash = m.Long()
		return r
	case crc_inputWallPaperSlug:
		r := TL_inputWallPaperSlug{}
		r.slug = m.String()
		return r
	case crc_channelParticipantsContacts:
		r := TL_channelParticipantsContacts{}
		r.q = m.String()
		return r
	case crc_channelAdminLogEventActionDefaultBannedRights:
		r := TL_channelAdminLogEventActionDefaultBannedRights{}
		r.prev_banned_rights = m.Object()
		r.new_banned_rights = m.Object()
		return r
	case crc_channelAdminLogEventActionStopPoll:
		r := TL_channelAdminLogEventActionStopPoll{}
		r.message = m.Object()
		return r
	case crc_account_wallPapersNotModified:
		r := TL_account_wallPapersNotModified{}
		return r
	case crc_account_wallPapers:
		r := TL_account_wallPapers{}
		r.hash = m.Long()
		r.wallpapers = m.Vector()
		return r
	case crc_codeSettings:
		r := TL_codeSettings{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.allow_flashcall = true
		}
		if r.flags&(1<<1) != 0 {
			r.current_number = true
		}
		if r.flags&(1<<4) != 0 {
			r.allow_app_hash = true
		}
		if r.flags&(1<<5) != 0 {
			r.allow_missed_call = true
		}
		if r.flags&(1<<7) != 0 {
			r.allow_firebase = true
		}
		if r.flags&(1<<6) != 0 {
			r.logout_tokens = m.Vector()
		}
		if r.flags&(1<<8) != 0 {
			r.token = m.String()
		}
		if r.flags&(1<<8) != 0 {
			r.app_sandbox = m.Object()
		}
		return r
	case crc_wallPaperSettings:
		r := TL_wallPaperSettings{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.blur = true
		}
		if r.flags&(1<<2) != 0 {
			r.motion = true
		}
		if r.flags&(1<<0) != 0 {
			r.background_color = m.Int()
		}
		if r.flags&(1<<4) != 0 {
			r.second_background_color = m.Int()
		}
		if r.flags&(1<<5) != 0 {
			r.third_background_color = m.Int()
		}
		if r.flags&(1<<6) != 0 {
			r.fourth_background_color = m.Int()
		}
		if r.flags&(1<<3) != 0 {
			r.intensity = m.Int()
		}
		if r.flags&(1<<4) != 0 {
			r.rotation = m.Int()
		}
		if r.flags&(1<<7) != 0 {
			r.emoticon = m.String()
		}
		return r
	case crc_autoDownloadSettings:
		r := TL_autoDownloadSettings{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.disabled = true
		}
		if r.flags&(1<<1) != 0 {
			r.video_preload_large = true
		}
		if r.flags&(1<<2) != 0 {
			r.audio_preload_next = true
		}
		if r.flags&(1<<3) != 0 {
			r.phonecalls_less_data = true
		}
		if r.flags&(1<<4) != 0 {
			r.stories_preload = true
		}
		r.photo_size_max = m.Int()
		r.video_size_max = m.Long()
		r.file_size_max = m.Long()
		r.video_upload_maxbitrate = m.Int()
		r.small_queue_active_operations_max = m.Int()
		r.large_queue_active_operations_max = m.Int()
		return r
	case crc_account_autoDownloadSettings:
		r := TL_account_autoDownloadSettings{}
		r.low = m.Object()
		r.medium = m.Object()
		r.high = m.Object()
		return r
	case crc_emojiKeyword:
		r := TL_emojiKeyword{}
		r.keyword = m.String()
		r.emoticons = m.VectorString()
		return r
	case crc_emojiKeywordDeleted:
		r := TL_emojiKeywordDeleted{}
		r.keyword = m.String()
		r.emoticons = m.VectorString()
		return r
	case crc_emojiKeywordsDifference:
		r := TL_emojiKeywordsDifference{}
		r.lang_code = m.String()
		r.from_version = m.Int()
		r.version = m.Int()
		r.keywords = m.Vector()
		return r
	case crc_emojiURL:
		r := TL_emojiURL{}
		r.url = m.String()
		return r
	case crc_emojiLanguage:
		r := TL_emojiLanguage{}
		r.lang_code = m.String()
		return r
	case crc_inputPrivacyKeyForwards:
		r := TL_inputPrivacyKeyForwards{}
		return r
	case crc_privacyKeyForwards:
		r := TL_privacyKeyForwards{}
		return r
	case crc_inputPrivacyKeyProfilePhoto:
		r := TL_inputPrivacyKeyProfilePhoto{}
		return r
	case crc_privacyKeyProfilePhoto:
		r := TL_privacyKeyProfilePhoto{}
		return r
	case crc_inputPhotoFileLocation:
		r := TL_inputPhotoFileLocation{}
		r.id = m.Long()
		r.access_hash = m.Long()
		r.file_reference = m.StringBytes()
		r.thumb_size = m.String()
		return r
	case crc_inputPhotoLegacyFileLocation:
		r := TL_inputPhotoLegacyFileLocation{}
		r.id = m.Long()
		r.access_hash = m.Long()
		r.file_reference = m.StringBytes()
		r.volume_id = m.Long()
		r.local_id = m.Int()
		r.secret = m.Long()
		return r
	case crc_inputPeerPhotoFileLocation:
		r := TL_inputPeerPhotoFileLocation{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.big = true
		}
		r.peer = m.Object()
		r.photo_id = m.Long()
		return r
	case crc_inputStickerSetThumb:
		r := TL_inputStickerSetThumb{}
		r.stickerset = m.Object()
		r.thumb_version = m.Int()
		return r
	case crc_folder:
		r := TL_folder{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.autofill_new_broadcasts = true
		}
		if r.flags&(1<<1) != 0 {
			r.autofill_public_groups = true
		}
		if r.flags&(1<<2) != 0 {
			r.autofill_new_correspondents = true
		}
		r.id = m.Int()
		r.title = m.String()
		if r.flags&(1<<3) != 0 {
			r.photo = m.Object()
		}
		return r
	case crc_dialogFolder:
		r := TL_dialogFolder{}
		r.flags = m.Int()
		if r.flags&(1<<2) != 0 {
			r.pinned = true
		}
		r.folder = m.Object()
		r.peer = m.Object()
		r.top_message = m.Int()
		r.unread_muted_peers_count = m.Int()
		r.unread_unmuted_peers_count = m.Int()
		r.unread_muted_messages_count = m.Int()
		r.unread_unmuted_messages_count = m.Int()
		return r
	case crc_inputDialogPeerFolder:
		r := TL_inputDialogPeerFolder{}
		r.folder_id = m.Int()
		return r
	case crc_dialogPeerFolder:
		r := TL_dialogPeerFolder{}
		r.folder_id = m.Int()
		return r
	case crc_inputFolderPeer:
		r := TL_inputFolderPeer{}
		r.peer = m.Object()
		r.folder_id = m.Int()
		return r
	case crc_folderPeer:
		r := TL_folderPeer{}
		r.peer = m.Object()
		r.folder_id = m.Int()
		return r
	case crc_updateFolderPeers:
		r := TL_updateFolderPeers{}
		r.folder_peers = m.Vector()
		r.pts = m.Int()
		r.pts_count = m.Int()
		return r
	case crc_inputUserFromMessage:
		r := TL_inputUserFromMessage{}
		r.peer = m.Object()
		r.msg_id = m.Int()
		r.user_id = m.Long()
		return r
	case crc_inputChannelFromMessage:
		r := TL_inputChannelFromMessage{}
		r.peer = m.Object()
		r.msg_id = m.Int()
		r.channel_id = m.Long()
		return r
	case crc_inputPeerUserFromMessage:
		r := TL_inputPeerUserFromMessage{}
		r.peer = m.Object()
		r.msg_id = m.Int()
		r.user_id = m.Long()
		return r
	case crc_inputPeerChannelFromMessage:
		r := TL_inputPeerChannelFromMessage{}
		r.peer = m.Object()
		r.msg_id = m.Int()
		r.channel_id = m.Long()
		return r
	case crc_inputPrivacyKeyPhoneNumber:
		r := TL_inputPrivacyKeyPhoneNumber{}
		return r
	case crc_privacyKeyPhoneNumber:
		r := TL_privacyKeyPhoneNumber{}
		return r
	case crc_topPeerCategoryForwardUsers:
		r := TL_topPeerCategoryForwardUsers{}
		return r
	case crc_topPeerCategoryForwardChats:
		r := TL_topPeerCategoryForwardChats{}
		return r
	case crc_channelAdminLogEventActionChangeLinkedChat:
		r := TL_channelAdminLogEventActionChangeLinkedChat{}
		r.prev_value = m.Long()
		r.new_value = m.Long()
		return r
	case crc_messages_searchCounter:
		r := TL_messages_searchCounter{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.inexact = true
		}
		r.filter = m.Object()
		r.count = m.Int()
		return r
	case crc_keyboardButtonUrlAuth:
		r := TL_keyboardButtonUrlAuth{}
		r.flags = m.Int()
		r.text = m.String()
		if r.flags&(1<<0) != 0 {
			r.fwd_text = m.String()
		}
		r.url = m.String()
		r.button_id = m.Int()
		return r
	case crc_inputKeyboardButtonUrlAuth:
		r := TL_inputKeyboardButtonUrlAuth{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.request_write_access = true
		}
		r.text = m.String()
		if r.flags&(1<<1) != 0 {
			r.fwd_text = m.String()
		}
		r.url = m.String()
		r.bot = m.Object()
		return r
	case crc_urlAuthResultRequest:
		r := TL_urlAuthResultRequest{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.request_write_access = true
		}
		r.bot = m.Object()
		r.domain = m.String()
		return r
	case crc_urlAuthResultAccepted:
		r := TL_urlAuthResultAccepted{}
		r.url = m.String()
		return r
	case crc_urlAuthResultDefault:
		r := TL_urlAuthResultDefault{}
		return r
	case crc_inputPrivacyValueAllowChatParticipants:
		r := TL_inputPrivacyValueAllowChatParticipants{}
		r.chats = m.VectorLong()
		return r
	case crc_inputPrivacyValueDisallowChatParticipants:
		r := TL_inputPrivacyValueDisallowChatParticipants{}
		r.chats = m.VectorLong()
		return r
	case crc_privacyValueAllowChatParticipants:
		r := TL_privacyValueAllowChatParticipants{}
		r.chats = m.VectorLong()
		return r
	case crc_privacyValueDisallowChatParticipants:
		r := TL_privacyValueDisallowChatParticipants{}
		r.chats = m.VectorLong()
		return r
	case crc_messageEntityUnderline:
		r := TL_messageEntityUnderline{}
		r.offset = m.Int()
		r.length = m.Int()
		return r
	case crc_messageEntityStrike:
		r := TL_messageEntityStrike{}
		r.offset = m.Int()
		r.length = m.Int()
		return r
	case crc_updatePeerSettings:
		r := TL_updatePeerSettings{}
		r.peer = m.Object()
		r.settings = m.Object()
		return r
	case crc_channelLocationEmpty:
		r := TL_channelLocationEmpty{}
		return r
	case crc_channelLocation:
		r := TL_channelLocation{}
		r.geo_point = m.Object()
		r.address = m.String()
		return r
	case crc_peerLocated:
		r := TL_peerLocated{}
		r.peer = m.Object()
		r.expires = m.Int()
		r.distance = m.Int()
		return r
	case crc_updatePeerLocated:
		r := TL_updatePeerLocated{}
		r.peers = m.Vector()
		return r
	case crc_channelAdminLogEventActionChangeLocation:
		r := TL_channelAdminLogEventActionChangeLocation{}
		r.prev_value = m.Object()
		r.new_value = m.Object()
		return r
	case crc_inputReportReasonGeoIrrelevant:
		r := TL_inputReportReasonGeoIrrelevant{}
		return r
	case crc_channelAdminLogEventActionToggleSlowMode:
		r := TL_channelAdminLogEventActionToggleSlowMode{}
		r.prev_value = m.Int()
		r.new_value = m.Int()
		return r
	case crc_auth_authorizationSignUpRequired:
		r := TL_auth_authorizationSignUpRequired{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.terms_of_service = m.Object()
		}
		return r
	case crc_payments_paymentVerificationNeeded:
		r := TL_payments_paymentVerificationNeeded{}
		r.url = m.String()
		return r
	case crc_inputStickerSetAnimatedEmoji:
		r := TL_inputStickerSetAnimatedEmoji{}
		return r
	case crc_updateNewScheduledMessage:
		r := TL_updateNewScheduledMessage{}
		r.message = m.Object()
		return r
	case crc_updateDeleteScheduledMessages:
		r := TL_updateDeleteScheduledMessages{}
		r.peer = m.Object()
		r.messages = m.VectorInt()
		return r
	case crc_restrictionReason:
		r := TL_restrictionReason{}
		r.platform = m.String()
		r.reason = m.String()
		r.text = m.String()
		return r
	case crc_inputTheme:
		r := TL_inputTheme{}
		r.id = m.Long()
		r.access_hash = m.Long()
		return r
	case crc_inputThemeSlug:
		r := TL_inputThemeSlug{}
		r.slug = m.String()
		return r
	case crc_theme:
		r := TL_theme{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.creator = true
		}
		if r.flags&(1<<1) != 0 {
			r._default = true
		}
		if r.flags&(1<<5) != 0 {
			r.for_chat = true
		}
		r.id = m.Long()
		r.access_hash = m.Long()
		r.slug = m.String()
		r.title = m.String()
		if r.flags&(1<<2) != 0 {
			r.document = m.Object()
		}
		if r.flags&(1<<3) != 0 {
			r.settings = m.Vector()
		}
		if r.flags&(1<<6) != 0 {
			r.emoticon = m.String()
		}
		if r.flags&(1<<4) != 0 {
			r.installs_count = m.Int()
		}
		return r
	case crc_account_themesNotModified:
		r := TL_account_themesNotModified{}
		return r
	case crc_account_themes:
		r := TL_account_themes{}
		r.hash = m.Long()
		r.themes = m.Vector()
		return r
	case crc_updateTheme:
		r := TL_updateTheme{}
		r.theme = m.Object()
		return r
	case crc_inputPrivacyKeyAddedByPhone:
		r := TL_inputPrivacyKeyAddedByPhone{}
		return r
	case crc_privacyKeyAddedByPhone:
		r := TL_privacyKeyAddedByPhone{}
		return r
	case crc_updateGeoLiveViewed:
		r := TL_updateGeoLiveViewed{}
		r.peer = m.Object()
		r.msg_id = m.Int()
		return r
	case crc_updateLoginToken:
		r := TL_updateLoginToken{}
		return r
	case crc_auth_loginToken:
		r := TL_auth_loginToken{}
		r.expires = m.Int()
		r.token = m.StringBytes()
		return r
	case crc_auth_loginTokenMigrateTo:
		r := TL_auth_loginTokenMigrateTo{}
		r.dc_id = m.Int()
		r.token = m.StringBytes()
		return r
	case crc_auth_loginTokenSuccess:
		r := TL_auth_loginTokenSuccess{}
		r.authorization = m.Object()
		return r
	case crc_account_contentSettings:
		r := TL_account_contentSettings{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.sensitive_enabled = true
		}
		if r.flags&(1<<1) != 0 {
			r.sensitive_can_change = true
		}
		return r
	case crc_messages_inactiveChats:
		r := TL_messages_inactiveChats{}
		r.dates = m.VectorInt()
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_baseThemeClassic:
		r := TL_baseThemeClassic{}
		return r
	case crc_baseThemeDay:
		r := TL_baseThemeDay{}
		return r
	case crc_baseThemeNight:
		r := TL_baseThemeNight{}
		return r
	case crc_baseThemeTinted:
		r := TL_baseThemeTinted{}
		return r
	case crc_baseThemeArctic:
		r := TL_baseThemeArctic{}
		return r
	case crc_inputWallPaperNoFile:
		r := TL_inputWallPaperNoFile{}
		r.id = m.Long()
		return r
	case crc_wallPaperNoFile:
		r := TL_wallPaperNoFile{}
		r.id = m.Long()
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r._default = true
		}
		if r.flags&(1<<4) != 0 {
			r.dark = true
		}
		if r.flags&(1<<2) != 0 {
			r.settings = m.Object()
		}
		return r
	case crc_inputThemeSettings:
		r := TL_inputThemeSettings{}
		r.flags = m.Int()
		if r.flags&(1<<2) != 0 {
			r.message_colors_animated = true
		}
		r.base_theme = m.Object()
		r.accent_color = m.Int()
		if r.flags&(1<<3) != 0 {
			r.outbox_accent_color = m.Int()
		}
		if r.flags&(1<<0) != 0 {
			r.message_colors = m.VectorInt()
		}
		if r.flags&(1<<1) != 0 {
			r.wallpaper = m.Object()
		}
		if r.flags&(1<<1) != 0 {
			r.wallpaper_settings = m.Object()
		}
		return r
	case crc_themeSettings:
		r := TL_themeSettings{}
		r.flags = m.Int()
		if r.flags&(1<<2) != 0 {
			r.message_colors_animated = true
		}
		r.base_theme = m.Object()
		r.accent_color = m.Int()
		if r.flags&(1<<3) != 0 {
			r.outbox_accent_color = m.Int()
		}
		if r.flags&(1<<0) != 0 {
			r.message_colors = m.VectorInt()
		}
		if r.flags&(1<<1) != 0 {
			r.wallpaper = m.Object()
		}
		return r
	case crc_webPageAttributeTheme:
		r := TL_webPageAttributeTheme{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.documents = m.Vector()
		}
		if r.flags&(1<<1) != 0 {
			r.settings = m.Object()
		}
		return r
	case crc_updateMessagePollVote:
		r := TL_updateMessagePollVote{}
		r.poll_id = m.Long()
		r.peer = m.Object()
		r.options = m.Vector()
		r.qts = m.Int()
		return r
	case crc_messages_votesList:
		r := TL_messages_votesList{}
		r.flags = m.Int()
		r.count = m.Int()
		r.votes = m.Vector()
		r.chats = m.Vector()
		r.users = m.Vector()
		if r.flags&(1<<0) != 0 {
			r.next_offset = m.String()
		}
		return r
	case crc_keyboardButtonRequestPoll:
		r := TL_keyboardButtonRequestPoll{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.quiz = m.Object()
		}
		r.text = m.String()
		return r
	case crc_messageEntityBankCard:
		r := TL_messageEntityBankCard{}
		r.offset = m.Int()
		r.length = m.Int()
		return r
	case crc_bankCardOpenUrl:
		r := TL_bankCardOpenUrl{}
		r.url = m.String()
		r.name = m.String()
		return r
	case crc_payments_bankCardData:
		r := TL_payments_bankCardData{}
		r.title = m.String()
		r.open_urls = m.Vector()
		return r
	case crc_peerSelfLocated:
		r := TL_peerSelfLocated{}
		r.expires = m.Int()
		return r
	case crc_dialogFilter:
		r := TL_dialogFilter{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.contacts = true
		}
		if r.flags&(1<<1) != 0 {
			r.non_contacts = true
		}
		if r.flags&(1<<2) != 0 {
			r.groups = true
		}
		if r.flags&(1<<3) != 0 {
			r.broadcasts = true
		}
		if r.flags&(1<<4) != 0 {
			r.bots = true
		}
		if r.flags&(1<<11) != 0 {
			r.exclude_muted = true
		}
		if r.flags&(1<<12) != 0 {
			r.exclude_read = true
		}
		if r.flags&(1<<13) != 0 {
			r.exclude_archived = true
		}
		r.id = m.Int()
		r.title = m.String()
		if r.flags&(1<<25) != 0 {
			r.emoticon = m.String()
		}
		r.pinned_peers = m.Vector()
		r.include_peers = m.Vector()
		r.exclude_peers = m.Vector()
		return r
	case crc_dialogFilterSuggested:
		r := TL_dialogFilterSuggested{}
		r.filter = m.Object()
		r.description = m.String()
		return r
	case crc_updateDialogFilter:
		r := TL_updateDialogFilter{}
		r.flags = m.Int()
		r.id = m.Int()
		if r.flags&(1<<0) != 0 {
			r.filter = m.Object()
		}
		return r
	case crc_updateDialogFilterOrder:
		r := TL_updateDialogFilterOrder{}
		r.order = m.VectorInt()
		return r
	case crc_updateDialogFilters:
		r := TL_updateDialogFilters{}
		return r
	case crc_statsDateRangeDays:
		r := TL_statsDateRangeDays{}
		r.min_date = m.Int()
		r.max_date = m.Int()
		return r
	case crc_statsAbsValueAndPrev:
		r := TL_statsAbsValueAndPrev{}
		r.current = m.Double()
		r.previous = m.Double()
		return r
	case crc_statsPercentValue:
		r := TL_statsPercentValue{}
		r.part = m.Double()
		r.total = m.Double()
		return r
	case crc_statsGraphAsync:
		r := TL_statsGraphAsync{}
		r.token = m.String()
		return r
	case crc_statsGraphError:
		r := TL_statsGraphError{}
		r.error = m.String()
		return r
	case crc_statsGraph:
		r := TL_statsGraph{}
		r.flags = m.Int()
		r.json = m.Object()
		if r.flags&(1<<0) != 0 {
			r.zoom_token = m.String()
		}
		return r
	case crc_stats_broadcastStats:
		r := TL_stats_broadcastStats{}
		r.period = m.Object()
		r.followers = m.Object()
		r.views_per_post = m.Object()
		r.shares_per_post = m.Object()
		r.reactions_per_post = m.Object()
		r.views_per_story = m.Object()
		r.shares_per_story = m.Object()
		r.reactions_per_story = m.Object()
		r.enabled_notifications = m.Object()
		r.growth_graph = m.Object()
		r.followers_graph = m.Object()
		r.mute_graph = m.Object()
		r.top_hours_graph = m.Object()
		r.interactions_graph = m.Object()
		r.iv_interactions_graph = m.Object()
		r.views_by_source_graph = m.Object()
		r.new_followers_by_source_graph = m.Object()
		r.languages_graph = m.Object()
		r.reactions_by_emotion_graph = m.Object()
		r.story_interactions_graph = m.Object()
		r.story_reactions_by_emotion_graph = m.Object()
		r.recent_posts_interactions = m.Vector()
		return r
	case crc_inputMediaDice:
		r := TL_inputMediaDice{}
		r.emoticon = m.String()
		return r
	case crc_messageMediaDice:
		r := TL_messageMediaDice{}
		r.value = m.Int()
		r.emoticon = m.String()
		return r
	case crc_inputStickerSetDice:
		r := TL_inputStickerSetDice{}
		r.emoticon = m.String()
		return r
	case crc_help_promoDataEmpty:
		r := TL_help_promoDataEmpty{}
		r.expires = m.Int()
		return r
	case crc_help_promoData:
		r := TL_help_promoData{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.proxy = true
		}
		r.expires = m.Int()
		r.peer = m.Object()
		r.chats = m.Vector()
		r.users = m.Vector()
		if r.flags&(1<<1) != 0 {
			r.psa_type = m.String()
		}
		if r.flags&(1<<2) != 0 {
			r.psa_message = m.String()
		}
		return r
	case crc_videoSize:
		r := TL_videoSize{}
		r.flags = m.Int()
		r._type = m.String()
		r.w = m.Int()
		r.h = m.Int()
		r.size = m.Int()
		if r.flags&(1<<0) != 0 {
			r.video_start_ts = m.Double()
		}
		return r
	case crc_updatePhoneCallSignalingData:
		r := TL_updatePhoneCallSignalingData{}
		r.phone_call_id = m.Long()
		r.data = m.StringBytes()
		return r
	case crc_chatInvitePeek:
		r := TL_chatInvitePeek{}
		r.chat = m.Object()
		r.expires = m.Int()
		return r
	case crc_statsGroupTopPoster:
		r := TL_statsGroupTopPoster{}
		r.user_id = m.Long()
		r.messages = m.Int()
		r.avg_chars = m.Int()
		return r
	case crc_statsGroupTopAdmin:
		r := TL_statsGroupTopAdmin{}
		r.user_id = m.Long()
		r.deleted = m.Int()
		r.kicked = m.Int()
		r.banned = m.Int()
		return r
	case crc_statsGroupTopInviter:
		r := TL_statsGroupTopInviter{}
		r.user_id = m.Long()
		r.invitations = m.Int()
		return r
	case crc_stats_megagroupStats:
		r := TL_stats_megagroupStats{}
		r.period = m.Object()
		r.members = m.Object()
		r.messages = m.Object()
		r.viewers = m.Object()
		r.posters = m.Object()
		r.growth_graph = m.Object()
		r.members_graph = m.Object()
		r.new_members_by_source_graph = m.Object()
		r.languages_graph = m.Object()
		r.messages_graph = m.Object()
		r.actions_graph = m.Object()
		r.top_hours_graph = m.Object()
		r.weekdays_graph = m.Object()
		r.top_posters = m.Vector()
		r.top_admins = m.Vector()
		r.top_inviters = m.Vector()
		r.users = m.Vector()
		return r
	case crc_globalPrivacySettings:
		r := TL_globalPrivacySettings{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.archive_and_mute_new_noncontact_peers = true
		}
		if r.flags&(1<<1) != 0 {
			r.keep_archived_unmuted = true
		}
		if r.flags&(1<<2) != 0 {
			r.keep_archived_folders = true
		}
		return r
	case crc_phoneConnectionWebrtc:
		r := TL_phoneConnectionWebrtc{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.turn = true
		}
		if r.flags&(1<<1) != 0 {
			r.stun = true
		}
		r.id = m.Long()
		r.ip = m.String()
		r.ipv6 = m.String()
		r.port = m.Int()
		r.username = m.String()
		r.password = m.String()
		return r
	case crc_help_countryCode:
		r := TL_help_countryCode{}
		r.flags = m.Int()
		r.country_code = m.String()
		if r.flags&(1<<0) != 0 {
			r.prefixes = m.VectorString()
		}
		if r.flags&(1<<1) != 0 {
			r.patterns = m.VectorString()
		}
		return r
	case crc_help_country:
		r := TL_help_country{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.hidden = true
		}
		r.iso2 = m.String()
		r.default_name = m.String()
		if r.flags&(1<<1) != 0 {
			r.name = m.String()
		}
		r.country_codes = m.Vector()
		return r
	case crc_help_countriesListNotModified:
		r := TL_help_countriesListNotModified{}
		return r
	case crc_help_countriesList:
		r := TL_help_countriesList{}
		r.countries = m.Vector()
		r.hash = m.Int()
		return r
	case crc_messageViews:
		r := TL_messageViews{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.views = m.Int()
		}
		if r.flags&(1<<1) != 0 {
			r.forwards = m.Int()
		}
		if r.flags&(1<<2) != 0 {
			r.replies = m.Object()
		}
		return r
	case crc_updateChannelMessageForwards:
		r := TL_updateChannelMessageForwards{}
		r.channel_id = m.Long()
		r.id = m.Int()
		r.forwards = m.Int()
		return r
	case crc_photoSizeProgressive:
		r := TL_photoSizeProgressive{}
		r._type = m.String()
		r.w = m.Int()
		r.h = m.Int()
		r.sizes = m.VectorInt()
		return r
	case crc_messages_messageViews:
		r := TL_messages_messageViews{}
		r.views = m.Vector()
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_updateReadChannelDiscussionInbox:
		r := TL_updateReadChannelDiscussionInbox{}
		r.flags = m.Int()
		r.channel_id = m.Long()
		r.top_msg_id = m.Int()
		r.read_max_id = m.Int()
		if r.flags&(1<<0) != 0 {
			r.broadcast_id = m.Long()
		}
		if r.flags&(1<<0) != 0 {
			r.broadcast_post = m.Int()
		}
		return r
	case crc_updateReadChannelDiscussionOutbox:
		r := TL_updateReadChannelDiscussionOutbox{}
		r.channel_id = m.Long()
		r.top_msg_id = m.Int()
		r.read_max_id = m.Int()
		return r
	case crc_messages_discussionMessage:
		r := TL_messages_discussionMessage{}
		r.flags = m.Int()
		r.messages = m.Vector()
		if r.flags&(1<<0) != 0 {
			r.max_id = m.Int()
		}
		if r.flags&(1<<1) != 0 {
			r.read_inbox_max_id = m.Int()
		}
		if r.flags&(1<<2) != 0 {
			r.read_outbox_max_id = m.Int()
		}
		r.unread_count = m.Int()
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_messageReplyHeader:
		r := TL_messageReplyHeader{}
		r.flags = m.Int()
		if r.flags&(1<<2) != 0 {
			r.reply_to_scheduled = true
		}
		if r.flags&(1<<3) != 0 {
			r.forum_topic = true
		}
		if r.flags&(1<<9) != 0 {
			r.quote = true
		}
		if r.flags&(1<<4) != 0 {
			r.reply_to_msg_id = m.Int()
		}
		if r.flags&(1<<0) != 0 {
			r.reply_to_peer_id = m.Object()
		}
		if r.flags&(1<<5) != 0 {
			r.reply_from = m.Object()
		}
		if r.flags&(1<<8) != 0 {
			r.reply_media = m.Object()
		}
		if r.flags&(1<<1) != 0 {
			r.reply_to_top_id = m.Int()
		}
		if r.flags&(1<<6) != 0 {
			r.quote_text = m.String()
		}
		if r.flags&(1<<7) != 0 {
			r.quote_entities = m.Vector()
		}
		if r.flags&(1<<10) != 0 {
			r.quote_offset = m.Int()
		}
		return r
	case crc_messageReplies:
		r := TL_messageReplies{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.comments = true
		}
		r.replies = m.Int()
		r.replies_pts = m.Int()
		if r.flags&(1<<1) != 0 {
			r.recent_repliers = m.Vector()
		}
		if r.flags&(1<<0) != 0 {
			r.channel_id = m.Long()
		}
		if r.flags&(1<<2) != 0 {
			r.max_id = m.Int()
		}
		if r.flags&(1<<3) != 0 {
			r.read_max_id = m.Int()
		}
		return r
	case crc_updatePeerBlocked:
		r := TL_updatePeerBlocked{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.blocked = true
		}
		if r.flags&(1<<1) != 0 {
			r.blocked_my_stories_from = true
		}
		r.peer_id = m.Object()
		return r
	case crc_peerBlocked:
		r := TL_peerBlocked{}
		r.peer_id = m.Object()
		r.date = m.Int()
		return r
	case crc_updateChannelUserTyping:
		r := TL_updateChannelUserTyping{}
		r.flags = m.Int()
		r.channel_id = m.Long()
		if r.flags&(1<<0) != 0 {
			r.top_msg_id = m.Int()
		}
		r.from_id = m.Object()
		r.action = m.Object()
		return r
	case crc_inputMessageCallbackQuery:
		r := TL_inputMessageCallbackQuery{}
		r.id = m.Int()
		r.query_id = m.Long()
		return r
	case crc_channelParticipantLeft:
		r := TL_channelParticipantLeft{}
		r.peer = m.Object()
		return r
	case crc_channelParticipantsMentions:
		r := TL_channelParticipantsMentions{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.q = m.String()
		}
		if r.flags&(1<<1) != 0 {
			r.top_msg_id = m.Int()
		}
		return r
	case crc_updatePinnedMessages:
		r := TL_updatePinnedMessages{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.pinned = true
		}
		r.peer = m.Object()
		r.messages = m.VectorInt()
		r.pts = m.Int()
		r.pts_count = m.Int()
		return r
	case crc_updatePinnedChannelMessages:
		r := TL_updatePinnedChannelMessages{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.pinned = true
		}
		r.channel_id = m.Long()
		r.messages = m.VectorInt()
		r.pts = m.Int()
		r.pts_count = m.Int()
		return r
	case crc_inputMessagesFilterPinned:
		r := TL_inputMessagesFilterPinned{}
		return r
	case crc_stats_messageStats:
		r := TL_stats_messageStats{}
		r.views_graph = m.Object()
		r.reactions_by_emotion_graph = m.Object()
		return r
	case crc_messageActionGeoProximityReached:
		r := TL_messageActionGeoProximityReached{}
		r.from_id = m.Object()
		r.to_id = m.Object()
		r.distance = m.Int()
		return r
	case crc_photoPathSize:
		r := TL_photoPathSize{}
		r._type = m.String()
		r.bytes = m.StringBytes()
		return r
	case crc_speakingInGroupCallAction:
		r := TL_speakingInGroupCallAction{}
		return r
	case crc_groupCallDiscarded:
		r := TL_groupCallDiscarded{}
		r.id = m.Long()
		r.access_hash = m.Long()
		r.duration = m.Int()
		return r
	case crc_groupCall:
		r := TL_groupCall{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.join_muted = true
		}
		if r.flags&(1<<2) != 0 {
			r.can_change_join_muted = true
		}
		if r.flags&(1<<6) != 0 {
			r.join_date_asc = true
		}
		if r.flags&(1<<8) != 0 {
			r.schedule_start_subscribed = true
		}
		if r.flags&(1<<9) != 0 {
			r.can_start_video = true
		}
		if r.flags&(1<<11) != 0 {
			r.record_video_active = true
		}
		if r.flags&(1<<12) != 0 {
			r.rtmp_stream = true
		}
		if r.flags&(1<<13) != 0 {
			r.listeners_hidden = true
		}
		r.id = m.Long()
		r.access_hash = m.Long()
		r.participants_count = m.Int()
		if r.flags&(1<<3) != 0 {
			r.title = m.String()
		}
		if r.flags&(1<<4) != 0 {
			r.stream_dc_id = m.Int()
		}
		if r.flags&(1<<5) != 0 {
			r.record_start_date = m.Int()
		}
		if r.flags&(1<<7) != 0 {
			r.schedule_date = m.Int()
		}
		if r.flags&(1<<10) != 0 {
			r.unmuted_video_count = m.Int()
		}
		r.unmuted_video_limit = m.Int()
		r.version = m.Int()
		return r
	case crc_inputGroupCall:
		r := TL_inputGroupCall{}
		r.id = m.Long()
		r.access_hash = m.Long()
		return r
	case crc_messageActionGroupCall:
		r := TL_messageActionGroupCall{}
		r.flags = m.Int()
		r.call = m.Object()
		if r.flags&(1<<0) != 0 {
			r.duration = m.Int()
		}
		return r
	case crc_messageActionInviteToGroupCall:
		r := TL_messageActionInviteToGroupCall{}
		r.call = m.Object()
		r.users = m.VectorLong()
		return r
	case crc_groupCallParticipant:
		r := TL_groupCallParticipant{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.muted = true
		}
		if r.flags&(1<<1) != 0 {
			r.left = true
		}
		if r.flags&(1<<2) != 0 {
			r.can_self_unmute = true
		}
		if r.flags&(1<<4) != 0 {
			r.just_joined = true
		}
		if r.flags&(1<<5) != 0 {
			r.versioned = true
		}
		if r.flags&(1<<8) != 0 {
			r.min = true
		}
		if r.flags&(1<<9) != 0 {
			r.muted_by_you = true
		}
		if r.flags&(1<<10) != 0 {
			r.volume_by_admin = true
		}
		if r.flags&(1<<12) != 0 {
			r.self = true
		}
		if r.flags&(1<<15) != 0 {
			r.video_joined = true
		}
		r.peer = m.Object()
		r.date = m.Int()
		if r.flags&(1<<3) != 0 {
			r.active_date = m.Int()
		}
		r.source = m.Int()
		if r.flags&(1<<7) != 0 {
			r.volume = m.Int()
		}
		if r.flags&(1<<11) != 0 {
			r.about = m.String()
		}
		if r.flags&(1<<13) != 0 {
			r.raise_hand_rating = m.Long()
		}
		if r.flags&(1<<6) != 0 {
			r.video = m.Object()
		}
		if r.flags&(1<<14) != 0 {
			r.presentation = m.Object()
		}
		return r
	case crc_updateChat:
		r := TL_updateChat{}
		r.chat_id = m.Long()
		return r
	case crc_updateGroupCallParticipants:
		r := TL_updateGroupCallParticipants{}
		r.call = m.Object()
		r.participants = m.Vector()
		r.version = m.Int()
		return r
	case crc_updateGroupCall:
		r := TL_updateGroupCall{}
		r.chat_id = m.Long()
		r.call = m.Object()
		return r
	case crc_phone_groupCall:
		r := TL_phone_groupCall{}
		r.call = m.Object()
		r.participants = m.Vector()
		r.participants_next_offset = m.String()
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_phone_groupParticipants:
		r := TL_phone_groupParticipants{}
		r.count = m.Int()
		r.participants = m.Vector()
		r.next_offset = m.String()
		r.chats = m.Vector()
		r.users = m.Vector()
		r.version = m.Int()
		return r
	case crc_inlineQueryPeerTypeSameBotPM:
		r := TL_inlineQueryPeerTypeSameBotPM{}
		return r
	case crc_inlineQueryPeerTypePM:
		r := TL_inlineQueryPeerTypePM{}
		return r
	case crc_inlineQueryPeerTypeChat:
		r := TL_inlineQueryPeerTypeChat{}
		return r
	case crc_inlineQueryPeerTypeMegagroup:
		r := TL_inlineQueryPeerTypeMegagroup{}
		return r
	case crc_inlineQueryPeerTypeBroadcast:
		r := TL_inlineQueryPeerTypeBroadcast{}
		return r
	case crc_channelAdminLogEventActionStartGroupCall:
		r := TL_channelAdminLogEventActionStartGroupCall{}
		r.call = m.Object()
		return r
	case crc_channelAdminLogEventActionDiscardGroupCall:
		r := TL_channelAdminLogEventActionDiscardGroupCall{}
		r.call = m.Object()
		return r
	case crc_channelAdminLogEventActionParticipantMute:
		r := TL_channelAdminLogEventActionParticipantMute{}
		r.participant = m.Object()
		return r
	case crc_channelAdminLogEventActionParticipantUnmute:
		r := TL_channelAdminLogEventActionParticipantUnmute{}
		r.participant = m.Object()
		return r
	case crc_channelAdminLogEventActionToggleGroupCallSetting:
		r := TL_channelAdminLogEventActionToggleGroupCallSetting{}
		r.join_muted = m.Object()
		return r
	case crc_inputPaymentCredentialsGooglePay:
		r := TL_inputPaymentCredentialsGooglePay{}
		r.payment_token = m.Object()
		return r
	case crc_messages_historyImport:
		r := TL_messages_historyImport{}
		r.id = m.Long()
		return r
	case crc_sendMessageHistoryImportAction:
		r := TL_sendMessageHistoryImportAction{}
		r.progress = m.Int()
		return r
	case crc_messages_historyImportParsed:
		r := TL_messages_historyImportParsed{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.pm = true
		}
		if r.flags&(1<<1) != 0 {
			r.group = true
		}
		if r.flags&(1<<2) != 0 {
			r.title = m.String()
		}
		return r
	case crc_inputReportReasonFake:
		r := TL_inputReportReasonFake{}
		return r
	case crc_messages_affectedFoundMessages:
		r := TL_messages_affectedFoundMessages{}
		r.pts = m.Int()
		r.pts_count = m.Int()
		r.offset = m.Int()
		r.messages = m.VectorInt()
		return r
	case crc_messageActionSetMessagesTTL:
		r := TL_messageActionSetMessagesTTL{}
		r.flags = m.Int()
		r.period = m.Int()
		if r.flags&(1<<0) != 0 {
			r.auto_setting_from = m.Long()
		}
		return r
	case crc_updatePeerHistoryTTL:
		r := TL_updatePeerHistoryTTL{}
		r.flags = m.Int()
		r.peer = m.Object()
		if r.flags&(1<<0) != 0 {
			r.ttl_period = m.Int()
		}
		return r
	case crc_updateChatParticipant:
		r := TL_updateChatParticipant{}
		r.flags = m.Int()
		r.chat_id = m.Long()
		r.date = m.Int()
		r.actor_id = m.Long()
		r.user_id = m.Long()
		if r.flags&(1<<0) != 0 {
			r.prev_participant = m.Object()
		}
		if r.flags&(1<<1) != 0 {
			r.new_participant = m.Object()
		}
		if r.flags&(1<<2) != 0 {
			r.invite = m.Object()
		}
		r.qts = m.Int()
		return r
	case crc_updateChannelParticipant:
		r := TL_updateChannelParticipant{}
		r.flags = m.Int()
		if r.flags&(1<<3) != 0 {
			r.via_chatlist = true
		}
		r.channel_id = m.Long()
		r.date = m.Int()
		r.actor_id = m.Long()
		r.user_id = m.Long()
		if r.flags&(1<<0) != 0 {
			r.prev_participant = m.Object()
		}
		if r.flags&(1<<1) != 0 {
			r.new_participant = m.Object()
		}
		if r.flags&(1<<2) != 0 {
			r.invite = m.Object()
		}
		r.qts = m.Int()
		return r
	case crc_updateBotStopped:
		r := TL_updateBotStopped{}
		r.user_id = m.Long()
		r.date = m.Int()
		r.stopped = m.Object()
		r.qts = m.Int()
		return r
	case crc_chatInviteImporter:
		r := TL_chatInviteImporter{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.requested = true
		}
		if r.flags&(1<<3) != 0 {
			r.via_chatlist = true
		}
		r.user_id = m.Long()
		r.date = m.Int()
		if r.flags&(1<<2) != 0 {
			r.about = m.String()
		}
		if r.flags&(1<<1) != 0 {
			r.approved_by = m.Long()
		}
		return r
	case crc_messages_exportedChatInvites:
		r := TL_messages_exportedChatInvites{}
		r.count = m.Int()
		r.invites = m.Vector()
		r.users = m.Vector()
		return r
	case crc_messages_exportedChatInvite:
		r := TL_messages_exportedChatInvite{}
		r.invite = m.Object()
		r.users = m.Vector()
		return r
	case crc_messages_exportedChatInviteReplaced:
		r := TL_messages_exportedChatInviteReplaced{}
		r.invite = m.Object()
		r.new_invite = m.Object()
		r.users = m.Vector()
		return r
	case crc_messages_chatInviteImporters:
		r := TL_messages_chatInviteImporters{}
		r.count = m.Int()
		r.importers = m.Vector()
		r.users = m.Vector()
		return r
	case crc_chatAdminWithInvites:
		r := TL_chatAdminWithInvites{}
		r.admin_id = m.Long()
		r.invites_count = m.Int()
		r.revoked_invites_count = m.Int()
		return r
	case crc_messages_chatAdminsWithInvites:
		r := TL_messages_chatAdminsWithInvites{}
		r.admins = m.Vector()
		r.users = m.Vector()
		return r
	case crc_channelAdminLogEventActionParticipantJoinByInvite:
		r := TL_channelAdminLogEventActionParticipantJoinByInvite{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.via_chatlist = true
		}
		r.invite = m.Object()
		return r
	case crc_channelAdminLogEventActionExportedInviteDelete:
		r := TL_channelAdminLogEventActionExportedInviteDelete{}
		r.invite = m.Object()
		return r
	case crc_channelAdminLogEventActionExportedInviteRevoke:
		r := TL_channelAdminLogEventActionExportedInviteRevoke{}
		r.invite = m.Object()
		return r
	case crc_channelAdminLogEventActionExportedInviteEdit:
		r := TL_channelAdminLogEventActionExportedInviteEdit{}
		r.prev_invite = m.Object()
		r.new_invite = m.Object()
		return r
	case crc_channelAdminLogEventActionParticipantVolume:
		r := TL_channelAdminLogEventActionParticipantVolume{}
		r.participant = m.Object()
		return r
	case crc_channelAdminLogEventActionChangeHistoryTTL:
		r := TL_channelAdminLogEventActionChangeHistoryTTL{}
		r.prev_value = m.Int()
		r.new_value = m.Int()
		return r
	case crc_messages_checkedHistoryImportPeer:
		r := TL_messages_checkedHistoryImportPeer{}
		r.confirm_text = m.String()
		return r
	case crc_inputGroupCallStream:
		r := TL_inputGroupCallStream{}
		r.flags = m.Int()
		r.call = m.Object()
		r.time_ms = m.Long()
		r.scale = m.Int()
		if r.flags&(1<<0) != 0 {
			r.video_channel = m.Int()
		}
		if r.flags&(1<<0) != 0 {
			r.video_quality = m.Int()
		}
		return r
	case crc_phone_joinAsPeers:
		r := TL_phone_joinAsPeers{}
		r.peers = m.Vector()
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_phone_exportedGroupCallInvite:
		r := TL_phone_exportedGroupCallInvite{}
		r.link = m.String()
		return r
	case crc_inputBotInlineMessageMediaInvoice:
		r := TL_inputBotInlineMessageMediaInvoice{}
		r.flags = m.Int()
		r.title = m.String()
		r.description = m.String()
		if r.flags&(1<<0) != 0 {
			r.photo = m.Object()
		}
		r.invoice = m.Object()
		r.payload = m.StringBytes()
		r.provider = m.String()
		r.provider_data = m.Object()
		if r.flags&(1<<2) != 0 {
			r.reply_markup = m.Object()
		}
		return r
	case crc_botInlineMessageMediaInvoice:
		r := TL_botInlineMessageMediaInvoice{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.shipping_address_requested = true
		}
		if r.flags&(1<<3) != 0 {
			r.test = true
		}
		r.title = m.String()
		r.description = m.String()
		if r.flags&(1<<0) != 0 {
			r.photo = m.Object()
		}
		r.currency = m.String()
		r.total_amount = m.Long()
		if r.flags&(1<<2) != 0 {
			r.reply_markup = m.Object()
		}
		return r
	case crc_messageActionGroupCallScheduled:
		r := TL_messageActionGroupCallScheduled{}
		r.call = m.Object()
		r.schedule_date = m.Int()
		return r
	case crc_groupCallParticipantVideoSourceGroup:
		r := TL_groupCallParticipantVideoSourceGroup{}
		r.semantics = m.String()
		r.sources = m.VectorInt()
		return r
	case crc_groupCallParticipantVideo:
		r := TL_groupCallParticipantVideo{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.paused = true
		}
		r.endpoint = m.String()
		r.source_groups = m.Vector()
		if r.flags&(1<<1) != 0 {
			r.audio_source = m.Int()
		}
		return r
	case crc_updateGroupCallConnection:
		r := TL_updateGroupCallConnection{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.presentation = true
		}
		r.params = m.Object()
		return r
	case crc_stickers_suggestedShortName:
		r := TL_stickers_suggestedShortName{}
		r.short_name = m.String()
		return r
	case crc_botCommandScopeDefault:
		r := TL_botCommandScopeDefault{}
		return r
	case crc_botCommandScopeUsers:
		r := TL_botCommandScopeUsers{}
		return r
	case crc_botCommandScopeChats:
		r := TL_botCommandScopeChats{}
		return r
	case crc_botCommandScopeChatAdmins:
		r := TL_botCommandScopeChatAdmins{}
		return r
	case crc_botCommandScopePeer:
		r := TL_botCommandScopePeer{}
		r.peer = m.Object()
		return r
	case crc_botCommandScopePeerAdmins:
		r := TL_botCommandScopePeerAdmins{}
		r.peer = m.Object()
		return r
	case crc_botCommandScopePeerUser:
		r := TL_botCommandScopePeerUser{}
		r.peer = m.Object()
		r.user_id = m.Object()
		return r
	case crc_account_resetPasswordFailedWait:
		r := TL_account_resetPasswordFailedWait{}
		r.retry_date = m.Int()
		return r
	case crc_account_resetPasswordRequestedWait:
		r := TL_account_resetPasswordRequestedWait{}
		r.until_date = m.Int()
		return r
	case crc_account_resetPasswordOk:
		r := TL_account_resetPasswordOk{}
		return r
	case crc_updateBotCommands:
		r := TL_updateBotCommands{}
		r.peer = m.Object()
		r.bot_id = m.Long()
		r.commands = m.Vector()
		return r
	case crc_messageActionSetChatTheme:
		r := TL_messageActionSetChatTheme{}
		r.emoticon = m.String()
		return r
	case crc_sendMessageChooseStickerAction:
		r := TL_sendMessageChooseStickerAction{}
		return r
	case crc_sponsoredMessage:
		r := TL_sponsoredMessage{}
		r.flags = m.Int()
		if r.flags&(1<<5) != 0 {
			r.recommended = true
		}
		if r.flags&(1<<6) != 0 {
			r.show_peer_photo = true
		}
		r.random_id = m.StringBytes()
		if r.flags&(1<<3) != 0 {
			r.from_id = m.Object()
		}
		if r.flags&(1<<4) != 0 {
			r.chat_invite = m.Object()
		}
		if r.flags&(1<<4) != 0 {
			r.chat_invite_hash = m.String()
		}
		if r.flags&(1<<2) != 0 {
			r.channel_post = m.Int()
		}
		if r.flags&(1<<0) != 0 {
			r.start_param = m.String()
		}
		if r.flags&(1<<9) != 0 {
			r.webpage = m.Object()
		}
		if r.flags&(1<<10) != 0 {
			r.app = m.Object()
		}
		r.message = m.String()
		if r.flags&(1<<1) != 0 {
			r.entities = m.Vector()
		}
		if r.flags&(1<<11) != 0 {
			r.button_text = m.String()
		}
		if r.flags&(1<<7) != 0 {
			r.sponsor_info = m.String()
		}
		if r.flags&(1<<8) != 0 {
			r.additional_info = m.String()
		}
		return r
	case crc_messages_sponsoredMessages:
		r := TL_messages_sponsoredMessages{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.posts_between = m.Int()
		}
		r.messages = m.Vector()
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_inputStickerSetAnimatedEmojiAnimations:
		r := TL_inputStickerSetAnimatedEmojiAnimations{}
		return r
	case crc_sendMessageEmojiInteraction:
		r := TL_sendMessageEmojiInteraction{}
		r.emoticon = m.String()
		r.msg_id = m.Int()
		r.interaction = m.Object()
		return r
	case crc_sendMessageEmojiInteractionSeen:
		r := TL_sendMessageEmojiInteractionSeen{}
		r.emoticon = m.String()
		return r
	case crc_inputBotInlineMessageID64:
		r := TL_inputBotInlineMessageID64{}
		r.dc_id = m.Int()
		r.owner_id = m.Long()
		r.id = m.Int()
		r.access_hash = m.Long()
		return r
	case crc_searchResultsCalendarPeriod:
		r := TL_searchResultsCalendarPeriod{}
		r.date = m.Int()
		r.min_msg_id = m.Int()
		r.max_msg_id = m.Int()
		r.count = m.Int()
		return r
	case crc_messages_searchResultsCalendar:
		r := TL_messages_searchResultsCalendar{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.inexact = true
		}
		r.count = m.Int()
		r.min_date = m.Int()
		r.min_msg_id = m.Int()
		if r.flags&(1<<1) != 0 {
			r.offset_id_offset = m.Int()
		}
		r.periods = m.Vector()
		r.messages = m.Vector()
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_searchResultPosition:
		r := TL_searchResultPosition{}
		r.msg_id = m.Int()
		r.date = m.Int()
		r.offset = m.Int()
		return r
	case crc_messages_searchResultsPositions:
		r := TL_messages_searchResultsPositions{}
		r.count = m.Int()
		r.positions = m.Vector()
		return r
	case crc_messageActionChatJoinedByRequest:
		r := TL_messageActionChatJoinedByRequest{}
		return r
	case crc_updatePendingJoinRequests:
		r := TL_updatePendingJoinRequests{}
		r.peer = m.Object()
		r.requests_pending = m.Int()
		r.recent_requesters = m.VectorLong()
		return r
	case crc_updateBotChatInviteRequester:
		r := TL_updateBotChatInviteRequester{}
		r.peer = m.Object()
		r.date = m.Int()
		r.user_id = m.Long()
		r.about = m.String()
		r.invite = m.Object()
		r.qts = m.Int()
		return r
	case crc_channelAdminLogEventActionParticipantJoinByRequest:
		r := TL_channelAdminLogEventActionParticipantJoinByRequest{}
		r.invite = m.Object()
		r.approved_by = m.Long()
		return r
	case crc_inputKeyboardButtonUserProfile:
		r := TL_inputKeyboardButtonUserProfile{}
		r.text = m.String()
		r.user_id = m.Object()
		return r
	case crc_keyboardButtonUserProfile:
		r := TL_keyboardButtonUserProfile{}
		r.text = m.String()
		r.user_id = m.Long()
		return r
	case crc_channels_sendAsPeers:
		r := TL_channels_sendAsPeers{}
		r.peers = m.Vector()
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_channelAdminLogEventActionToggleNoForwards:
		r := TL_channelAdminLogEventActionToggleNoForwards{}
		r.new_value = m.Object()
		return r
	case crc_messages_stickerSetNotModified:
		r := TL_messages_stickerSetNotModified{}
		return r
	case crc_users_userFull:
		r := TL_users_userFull{}
		r.full_user = m.Object()
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_messages_peerSettings:
		r := TL_messages_peerSettings{}
		r.settings = m.Object()
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_channelAdminLogEventActionSendMessage:
		r := TL_channelAdminLogEventActionSendMessage{}
		r.message = m.Object()
		return r
	case crc_auth_codeTypeMissedCall:
		r := TL_auth_codeTypeMissedCall{}
		return r
	case crc_auth_sentCodeTypeMissedCall:
		r := TL_auth_sentCodeTypeMissedCall{}
		r.prefix = m.String()
		r.length = m.Int()
		return r
	case crc_auth_loggedOut:
		r := TL_auth_loggedOut{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.future_auth_token = m.StringBytes()
		}
		return r
	case crc_updateMessageReactions:
		r := TL_updateMessageReactions{}
		r.flags = m.Int()
		r.peer = m.Object()
		r.msg_id = m.Int()
		if r.flags&(1<<0) != 0 {
			r.top_msg_id = m.Int()
		}
		r.reactions = m.Object()
		return r
	case crc_reactionCount:
		r := TL_reactionCount{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.chosen_order = m.Int()
		}
		r.reaction = m.Object()
		r.count = m.Int()
		return r
	case crc_messageReactions:
		r := TL_messageReactions{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.min = true
		}
		if r.flags&(1<<2) != 0 {
			r.can_see_list = true
		}
		r.results = m.Vector()
		if r.flags&(1<<1) != 0 {
			r.recent_reactions = m.Vector()
		}
		return r
	case crc_messages_messageReactionsList:
		r := TL_messages_messageReactionsList{}
		r.flags = m.Int()
		r.count = m.Int()
		r.reactions = m.Vector()
		r.chats = m.Vector()
		r.users = m.Vector()
		if r.flags&(1<<0) != 0 {
			r.next_offset = m.String()
		}
		return r
	case crc_availableReaction:
		r := TL_availableReaction{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.inactive = true
		}
		if r.flags&(1<<2) != 0 {
			r.premium = true
		}
		r.reaction = m.String()
		r.title = m.String()
		r.static_icon = m.Object()
		r.appear_animation = m.Object()
		r.select_animation = m.Object()
		r.activate_animation = m.Object()
		r.effect_animation = m.Object()
		if r.flags&(1<<1) != 0 {
			r.around_animation = m.Object()
		}
		if r.flags&(1<<1) != 0 {
			r.center_icon = m.Object()
		}
		return r
	case crc_messages_availableReactionsNotModified:
		r := TL_messages_availableReactionsNotModified{}
		return r
	case crc_messages_availableReactions:
		r := TL_messages_availableReactions{}
		r.hash = m.Int()
		r.reactions = m.Vector()
		return r
	case crc_messageEntitySpoiler:
		r := TL_messageEntitySpoiler{}
		r.offset = m.Int()
		r.length = m.Int()
		return r
	case crc_channelAdminLogEventActionChangeAvailableReactions:
		r := TL_channelAdminLogEventActionChangeAvailableReactions{}
		r.prev_value = m.Object()
		r.new_value = m.Object()
		return r
	case crc_messagePeerReaction:
		r := TL_messagePeerReaction{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.big = true
		}
		if r.flags&(1<<1) != 0 {
			r.unread = true
		}
		if r.flags&(1<<2) != 0 {
			r.my = true
		}
		r.peer_id = m.Object()
		r.date = m.Int()
		r.reaction = m.Object()
		return r
	case crc_groupCallStreamChannel:
		r := TL_groupCallStreamChannel{}
		r.channel = m.Int()
		r.scale = m.Int()
		r.last_timestamp_ms = m.Long()
		return r
	case crc_phone_groupCallStreamChannels:
		r := TL_phone_groupCallStreamChannels{}
		r.channels = m.Vector()
		return r
	case crc_inputReportReasonIllegalDrugs:
		r := TL_inputReportReasonIllegalDrugs{}
		return r
	case crc_inputReportReasonPersonalDetails:
		r := TL_inputReportReasonPersonalDetails{}
		return r
	case crc_phone_groupCallStreamRtmpUrl:
		r := TL_phone_groupCallStreamRtmpUrl{}
		r.url = m.String()
		r.key = m.String()
		return r
	case crc_attachMenuBotIconColor:
		r := TL_attachMenuBotIconColor{}
		r.name = m.String()
		r.color = m.Int()
		return r
	case crc_attachMenuBotIcon:
		r := TL_attachMenuBotIcon{}
		r.flags = m.Int()
		r.name = m.String()
		r.icon = m.Object()
		if r.flags&(1<<0) != 0 {
			r.colors = m.Vector()
		}
		return r
	case crc_attachMenuBot:
		r := TL_attachMenuBot{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.inactive = true
		}
		if r.flags&(1<<1) != 0 {
			r.has_settings = true
		}
		if r.flags&(1<<2) != 0 {
			r.request_write_access = true
		}
		if r.flags&(1<<3) != 0 {
			r.show_in_attach_menu = true
		}
		if r.flags&(1<<4) != 0 {
			r.show_in_side_menu = true
		}
		if r.flags&(1<<5) != 0 {
			r.side_menu_disclaimer_needed = true
		}
		r.bot_id = m.Long()
		r.short_name = m.String()
		if r.flags&(1<<3) != 0 {
			r.peer_types = m.Vector()
		}
		r.icons = m.Vector()
		return r
	case crc_attachMenuBotsNotModified:
		r := TL_attachMenuBotsNotModified{}
		return r
	case crc_attachMenuBots:
		r := TL_attachMenuBots{}
		r.hash = m.Long()
		r.bots = m.Vector()
		r.users = m.Vector()
		return r
	case crc_attachMenuBotsBot:
		r := TL_attachMenuBotsBot{}
		r.bot = m.Object()
		r.users = m.Vector()
		return r
	case crc_updateAttachMenuBots:
		r := TL_updateAttachMenuBots{}
		return r
	case crc_webViewResultUrl:
		r := TL_webViewResultUrl{}
		r.query_id = m.Long()
		r.url = m.String()
		return r
	case crc_simpleWebViewResultUrl:
		r := TL_simpleWebViewResultUrl{}
		r.url = m.String()
		return r
	case crc_webViewMessageSent:
		r := TL_webViewMessageSent{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.msg_id = m.Object()
		}
		return r
	case crc_updateWebViewResultSent:
		r := TL_updateWebViewResultSent{}
		r.query_id = m.Long()
		return r
	case crc_keyboardButtonWebView:
		r := TL_keyboardButtonWebView{}
		r.text = m.String()
		r.url = m.String()
		return r
	case crc_keyboardButtonSimpleWebView:
		r := TL_keyboardButtonSimpleWebView{}
		r.text = m.String()
		r.url = m.String()
		return r
	case crc_messageActionWebViewDataSentMe:
		r := TL_messageActionWebViewDataSentMe{}
		r.text = m.String()
		r.data = m.String()
		return r
	case crc_messageActionWebViewDataSent:
		r := TL_messageActionWebViewDataSent{}
		r.text = m.String()
		return r
	case crc_updateBotMenuButton:
		r := TL_updateBotMenuButton{}
		r.bot_id = m.Long()
		r.button = m.Object()
		return r
	case crc_botMenuButtonDefault:
		r := TL_botMenuButtonDefault{}
		return r
	case crc_botMenuButtonCommands:
		r := TL_botMenuButtonCommands{}
		return r
	case crc_botMenuButton:
		r := TL_botMenuButton{}
		r.text = m.String()
		r.url = m.String()
		return r
	case crc_account_savedRingtonesNotModified:
		r := TL_account_savedRingtonesNotModified{}
		return r
	case crc_account_savedRingtones:
		r := TL_account_savedRingtones{}
		r.hash = m.Long()
		r.ringtones = m.Vector()
		return r
	case crc_updateSavedRingtones:
		r := TL_updateSavedRingtones{}
		return r
	case crc_notificationSoundDefault:
		r := TL_notificationSoundDefault{}
		return r
	case crc_notificationSoundNone:
		r := TL_notificationSoundNone{}
		return r
	case crc_notificationSoundLocal:
		r := TL_notificationSoundLocal{}
		r.title = m.String()
		r.data = m.String()
		return r
	case crc_notificationSoundRingtone:
		r := TL_notificationSoundRingtone{}
		r.id = m.Long()
		return r
	case crc_account_savedRingtone:
		r := TL_account_savedRingtone{}
		return r
	case crc_account_savedRingtoneConverted:
		r := TL_account_savedRingtoneConverted{}
		r.document = m.Object()
		return r
	case crc_attachMenuPeerTypeSameBotPM:
		r := TL_attachMenuPeerTypeSameBotPM{}
		return r
	case crc_attachMenuPeerTypeBotPM:
		r := TL_attachMenuPeerTypeBotPM{}
		return r
	case crc_attachMenuPeerTypePM:
		r := TL_attachMenuPeerTypePM{}
		return r
	case crc_attachMenuPeerTypeChat:
		r := TL_attachMenuPeerTypeChat{}
		return r
	case crc_attachMenuPeerTypeBroadcast:
		r := TL_attachMenuPeerTypeBroadcast{}
		return r
	case crc_chatInvitePublicJoinRequests:
		r := TL_chatInvitePublicJoinRequests{}
		return r
	case crc_inputInvoiceMessage:
		r := TL_inputInvoiceMessage{}
		r.peer = m.Object()
		r.msg_id = m.Int()
		return r
	case crc_inputInvoiceSlug:
		r := TL_inputInvoiceSlug{}
		r.slug = m.String()
		return r
	case crc_payments_exportedInvoice:
		r := TL_payments_exportedInvoice{}
		r.url = m.String()
		return r
	case crc_updateTranscribedAudio:
		r := TL_updateTranscribedAudio{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.pending = true
		}
		r.peer = m.Object()
		r.msg_id = m.Int()
		r.transcription_id = m.Long()
		r.text = m.String()
		return r
	case crc_messages_transcribedAudio:
		r := TL_messages_transcribedAudio{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.pending = true
		}
		r.transcription_id = m.Long()
		r.text = m.String()
		if r.flags&(1<<1) != 0 {
			r.trial_remains_num = m.Int()
		}
		if r.flags&(1<<1) != 0 {
			r.trial_remains_until_date = m.Int()
		}
		return r
	case crc_dialogFilterDefault:
		r := TL_dialogFilterDefault{}
		return r
	case crc_help_premiumPromo:
		r := TL_help_premiumPromo{}
		r.status_text = m.String()
		r.status_entities = m.Vector()
		r.video_sections = m.VectorString()
		r.videos = m.Vector()
		r.period_options = m.Vector()
		r.users = m.Vector()
		return r
	case crc_messageEntityCustomEmoji:
		r := TL_messageEntityCustomEmoji{}
		r.offset = m.Int()
		r.length = m.Int()
		r.document_id = m.Long()
		return r
	case crc_documentAttributeCustomEmoji:
		r := TL_documentAttributeCustomEmoji{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.free = true
		}
		if r.flags&(1<<1) != 0 {
			r.text_color = true
		}
		r.alt = m.String()
		r.stickerset = m.Object()
		return r
	case crc_stickerSetFullCovered:
		r := TL_stickerSetFullCovered{}
		r.set = m.Object()
		r.packs = m.Vector()
		r.keywords = m.Vector()
		r.documents = m.Vector()
		return r
	case crc_inputStorePaymentPremiumSubscription:
		r := TL_inputStorePaymentPremiumSubscription{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.restore = true
		}
		if r.flags&(1<<1) != 0 {
			r.upgrade = true
		}
		return r
	case crc_inputStorePaymentGiftPremium:
		r := TL_inputStorePaymentGiftPremium{}
		r.user_id = m.Object()
		r.currency = m.String()
		r.amount = m.Long()
		return r
	case crc_messageActionGiftPremium:
		r := TL_messageActionGiftPremium{}
		r.flags = m.Int()
		r.currency = m.String()
		r.amount = m.Long()
		r.months = m.Int()
		if r.flags&(1<<0) != 0 {
			r.crypto_currency = m.String()
		}
		if r.flags&(1<<0) != 0 {
			r.crypto_amount = m.Long()
		}
		return r
	case crc_premiumGiftOption:
		r := TL_premiumGiftOption{}
		r.flags = m.Int()
		r.months = m.Int()
		r.currency = m.String()
		r.amount = m.Long()
		r.bot_url = m.String()
		if r.flags&(1<<0) != 0 {
			r.store_product = m.String()
		}
		return r
	case crc_inputStickerSetPremiumGifts:
		r := TL_inputStickerSetPremiumGifts{}
		return r
	case crc_updateReadFeaturedEmojiStickers:
		r := TL_updateReadFeaturedEmojiStickers{}
		return r
	case crc_inputPrivacyKeyVoiceMessages:
		r := TL_inputPrivacyKeyVoiceMessages{}
		return r
	case crc_privacyKeyVoiceMessages:
		r := TL_privacyKeyVoiceMessages{}
		return r
	case crc_paymentFormMethod:
		r := TL_paymentFormMethod{}
		r.url = m.String()
		r.title = m.String()
		return r
	case crc_inputWebFileAudioAlbumThumbLocation:
		r := TL_inputWebFileAudioAlbumThumbLocation{}
		r.flags = m.Int()
		if r.flags&(1<<2) != 0 {
			r.small = true
		}
		if r.flags&(1<<0) != 0 {
			r.document = m.Object()
		}
		if r.flags&(1<<1) != 0 {
			r.title = m.String()
		}
		if r.flags&(1<<1) != 0 {
			r.performer = m.String()
		}
		return r
	case crc_emojiStatusEmpty:
		r := TL_emojiStatusEmpty{}
		return r
	case crc_emojiStatus:
		r := TL_emojiStatus{}
		r.document_id = m.Long()
		return r
	case crc_emojiStatusUntil:
		r := TL_emojiStatusUntil{}
		r.document_id = m.Long()
		r.until = m.Int()
		return r
	case crc_updateUserEmojiStatus:
		r := TL_updateUserEmojiStatus{}
		r.user_id = m.Long()
		r.emoji_status = m.Object()
		return r
	case crc_updateRecentEmojiStatuses:
		r := TL_updateRecentEmojiStatuses{}
		return r
	case crc_account_emojiStatusesNotModified:
		r := TL_account_emojiStatusesNotModified{}
		return r
	case crc_account_emojiStatuses:
		r := TL_account_emojiStatuses{}
		r.hash = m.Long()
		r.statuses = m.Vector()
		return r
	case crc_reactionEmpty:
		r := TL_reactionEmpty{}
		return r
	case crc_reactionEmoji:
		r := TL_reactionEmoji{}
		r.emoticon = m.String()
		return r
	case crc_reactionCustomEmoji:
		r := TL_reactionCustomEmoji{}
		r.document_id = m.Long()
		return r
	case crc_chatReactionsNone:
		r := TL_chatReactionsNone{}
		return r
	case crc_chatReactionsAll:
		r := TL_chatReactionsAll{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.allow_custom = true
		}
		return r
	case crc_chatReactionsSome:
		r := TL_chatReactionsSome{}
		r.reactions = m.Vector()
		return r
	case crc_messages_reactionsNotModified:
		r := TL_messages_reactionsNotModified{}
		return r
	case crc_messages_reactions:
		r := TL_messages_reactions{}
		r.hash = m.Long()
		r.reactions = m.Vector()
		return r
	case crc_updateRecentReactions:
		r := TL_updateRecentReactions{}
		return r
	case crc_updateMoveStickerSetToTop:
		r := TL_updateMoveStickerSetToTop{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.masks = true
		}
		if r.flags&(1<<1) != 0 {
			r.emojis = true
		}
		r.stickerset = m.Long()
		return r
	case crc_auth_sentCodeTypeEmailCode:
		r := TL_auth_sentCodeTypeEmailCode{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.apple_signin_allowed = true
		}
		if r.flags&(1<<1) != 0 {
			r.google_signin_allowed = true
		}
		r.email_pattern = m.String()
		r.length = m.Int()
		if r.flags&(1<<3) != 0 {
			r.reset_available_period = m.Int()
		}
		if r.flags&(1<<4) != 0 {
			r.reset_pending_date = m.Int()
		}
		return r
	case crc_auth_sentCodeTypeSetUpEmailRequired:
		r := TL_auth_sentCodeTypeSetUpEmailRequired{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.apple_signin_allowed = true
		}
		if r.flags&(1<<1) != 0 {
			r.google_signin_allowed = true
		}
		return r
	case crc_emailVerifyPurposeLoginSetup:
		r := TL_emailVerifyPurposeLoginSetup{}
		r.phone_number = m.String()
		r.phone_code_hash = m.String()
		return r
	case crc_emailVerifyPurposeLoginChange:
		r := TL_emailVerifyPurposeLoginChange{}
		return r
	case crc_emailVerifyPurposePassport:
		r := TL_emailVerifyPurposePassport{}
		return r
	case crc_emailVerificationCode:
		r := TL_emailVerificationCode{}
		r.code = m.String()
		return r
	case crc_emailVerificationGoogle:
		r := TL_emailVerificationGoogle{}
		r.token = m.String()
		return r
	case crc_emailVerificationApple:
		r := TL_emailVerificationApple{}
		r.token = m.String()
		return r
	case crc_account_emailVerified:
		r := TL_account_emailVerified{}
		r.email = m.String()
		return r
	case crc_account_emailVerifiedLogin:
		r := TL_account_emailVerifiedLogin{}
		r.email = m.String()
		r.sent_code = m.Object()
		return r
	case crc_premiumSubscriptionOption:
		r := TL_premiumSubscriptionOption{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.current = true
		}
		if r.flags&(1<<2) != 0 {
			r.can_purchase_upgrade = true
		}
		if r.flags&(1<<3) != 0 {
			r.transaction = m.String()
		}
		r.months = m.Int()
		r.currency = m.String()
		r.amount = m.Long()
		r.bot_url = m.String()
		if r.flags&(1<<0) != 0 {
			r.store_product = m.String()
		}
		return r
	case crc_inputStickerSetEmojiGenericAnimations:
		r := TL_inputStickerSetEmojiGenericAnimations{}
		return r
	case crc_inputStickerSetEmojiDefaultStatuses:
		r := TL_inputStickerSetEmojiDefaultStatuses{}
		return r
	case crc_sendAsPeer:
		r := TL_sendAsPeer{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.premium_required = true
		}
		r.peer = m.Object()
		return r
	case crc_messageExtendedMediaPreview:
		r := TL_messageExtendedMediaPreview{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.w = m.Int()
		}
		if r.flags&(1<<0) != 0 {
			r.h = m.Int()
		}
		if r.flags&(1<<1) != 0 {
			r.thumb = m.Object()
		}
		if r.flags&(1<<2) != 0 {
			r.video_duration = m.Int()
		}
		return r
	case crc_messageExtendedMedia:
		r := TL_messageExtendedMedia{}
		r.media = m.Object()
		return r
	case crc_updateMessageExtendedMedia:
		r := TL_updateMessageExtendedMedia{}
		r.peer = m.Object()
		r.msg_id = m.Int()
		r.extended_media = m.Object()
		return r
	case crc_stickerKeyword:
		r := TL_stickerKeyword{}
		r.document_id = m.Long()
		r.keyword = m.VectorString()
		return r
	case crc_username:
		r := TL_username{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.editable = true
		}
		if r.flags&(1<<1) != 0 {
			r.active = true
		}
		r.username = m.String()
		return r
	case crc_channelAdminLogEventActionChangeUsernames:
		r := TL_channelAdminLogEventActionChangeUsernames{}
		r.prev_value = m.VectorString()
		r.new_value = m.VectorString()
		return r
	case crc_channelAdminLogEventActionToggleForum:
		r := TL_channelAdminLogEventActionToggleForum{}
		r.new_value = m.Object()
		return r
	case crc_channelAdminLogEventActionCreateTopic:
		r := TL_channelAdminLogEventActionCreateTopic{}
		r.topic = m.Object()
		return r
	case crc_channelAdminLogEventActionEditTopic:
		r := TL_channelAdminLogEventActionEditTopic{}
		r.prev_topic = m.Object()
		r.new_topic = m.Object()
		return r
	case crc_channelAdminLogEventActionDeleteTopic:
		r := TL_channelAdminLogEventActionDeleteTopic{}
		r.topic = m.Object()
		return r
	case crc_channelAdminLogEventActionPinTopic:
		r := TL_channelAdminLogEventActionPinTopic{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.prev_topic = m.Object()
		}
		if r.flags&(1<<1) != 0 {
			r.new_topic = m.Object()
		}
		return r
	case crc_forumTopicDeleted:
		r := TL_forumTopicDeleted{}
		r.id = m.Int()
		return r
	case crc_forumTopic:
		r := TL_forumTopic{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.my = true
		}
		if r.flags&(1<<2) != 0 {
			r.closed = true
		}
		if r.flags&(1<<3) != 0 {
			r.pinned = true
		}
		if r.flags&(1<<5) != 0 {
			r.short = true
		}
		if r.flags&(1<<6) != 0 {
			r.hidden = true
		}
		r.id = m.Int()
		r.date = m.Int()
		r.title = m.String()
		r.icon_color = m.Int()
		if r.flags&(1<<0) != 0 {
			r.icon_emoji_id = m.Long()
		}
		r.top_message = m.Int()
		r.read_inbox_max_id = m.Int()
		r.read_outbox_max_id = m.Int()
		r.unread_count = m.Int()
		r.unread_mentions_count = m.Int()
		r.unread_reactions_count = m.Int()
		r.from_id = m.Object()
		r.notify_settings = m.Object()
		if r.flags&(1<<4) != 0 {
			r.draft = m.Object()
		}
		return r
	case crc_messages_forumTopics:
		r := TL_messages_forumTopics{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.order_by_create_date = true
		}
		r.count = m.Int()
		r.topics = m.Vector()
		r.messages = m.Vector()
		r.chats = m.Vector()
		r.users = m.Vector()
		r.pts = m.Int()
		return r
	case crc_messageActionTopicCreate:
		r := TL_messageActionTopicCreate{}
		r.flags = m.Int()
		r.title = m.String()
		r.icon_color = m.Int()
		if r.flags&(1<<0) != 0 {
			r.icon_emoji_id = m.Long()
		}
		return r
	case crc_messageActionTopicEdit:
		r := TL_messageActionTopicEdit{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.title = m.String()
		}
		if r.flags&(1<<1) != 0 {
			r.icon_emoji_id = m.Long()
		}
		if r.flags&(1<<2) != 0 {
			r.closed = m.Object()
		}
		if r.flags&(1<<3) != 0 {
			r.hidden = m.Object()
		}
		return r
	case crc_updateChannelPinnedTopic:
		r := TL_updateChannelPinnedTopic{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.pinned = true
		}
		r.channel_id = m.Long()
		r.topic_id = m.Int()
		return r
	case crc_inputNotifyForumTopic:
		r := TL_inputNotifyForumTopic{}
		r.peer = m.Object()
		r.top_msg_id = m.Int()
		return r
	case crc_notifyForumTopic:
		r := TL_notifyForumTopic{}
		r.peer = m.Object()
		r.top_msg_id = m.Int()
		return r
	case crc_inputStickerSetEmojiDefaultTopicIcons:
		r := TL_inputStickerSetEmojiDefaultTopicIcons{}
		return r
	case crc_messages_sponsoredMessagesEmpty:
		r := TL_messages_sponsoredMessagesEmpty{}
		return r
	case crc_updateChannelPinnedTopics:
		r := TL_updateChannelPinnedTopics{}
		r.flags = m.Int()
		r.channel_id = m.Long()
		if r.flags&(1<<0) != 0 {
			r.order = m.VectorInt()
		}
		return r
	case crc_defaultHistoryTTL:
		r := TL_defaultHistoryTTL{}
		r.period = m.Int()
		return r
	case crc_auth_codeTypeFragmentSms:
		r := TL_auth_codeTypeFragmentSms{}
		return r
	case crc_auth_sentCodeTypeFragmentSms:
		r := TL_auth_sentCodeTypeFragmentSms{}
		r.url = m.String()
		r.length = m.Int()
		return r
	case crc_exportedContactToken:
		r := TL_exportedContactToken{}
		r.url = m.String()
		r.expires = m.Int()
		return r
	case crc_channelAdminLogEventActionToggleAntiSpam:
		r := TL_channelAdminLogEventActionToggleAntiSpam{}
		r.new_value = m.Object()
		return r
	case crc_messageActionSuggestProfilePhoto:
		r := TL_messageActionSuggestProfilePhoto{}
		r.photo = m.Object()
		return r
	case crc_stickerSetNoCovered:
		r := TL_stickerSetNoCovered{}
		r.set = m.Object()
		return r
	case crc_updateUser:
		r := TL_updateUser{}
		r.user_id = m.Long()
		return r
	case crc_auth_sentCodeSuccess:
		r := TL_auth_sentCodeSuccess{}
		r.authorization = m.Object()
		return r
	case crc_messageActionRequestedPeer:
		r := TL_messageActionRequestedPeer{}
		r.button_id = m.Int()
		r.peers = m.Vector()
		return r
	case crc_requestPeerTypeUser:
		r := TL_requestPeerTypeUser{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.bot = m.Object()
		}
		if r.flags&(1<<1) != 0 {
			r.premium = m.Object()
		}
		return r
	case crc_requestPeerTypeChat:
		r := TL_requestPeerTypeChat{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.creator = true
		}
		if r.flags&(1<<5) != 0 {
			r.bot_participant = true
		}
		if r.flags&(1<<3) != 0 {
			r.has_username = m.Object()
		}
		if r.flags&(1<<4) != 0 {
			r.forum = m.Object()
		}
		if r.flags&(1<<1) != 0 {
			r.user_admin_rights = m.Object()
		}
		if r.flags&(1<<2) != 0 {
			r.bot_admin_rights = m.Object()
		}
		return r
	case crc_requestPeerTypeBroadcast:
		r := TL_requestPeerTypeBroadcast{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.creator = true
		}
		if r.flags&(1<<3) != 0 {
			r.has_username = m.Object()
		}
		if r.flags&(1<<1) != 0 {
			r.user_admin_rights = m.Object()
		}
		if r.flags&(1<<2) != 0 {
			r.bot_admin_rights = m.Object()
		}
		return r
	case crc_keyboardButtonRequestPeer:
		r := TL_keyboardButtonRequestPeer{}
		r.text = m.String()
		r.button_id = m.Int()
		r.peer_type = m.Object()
		r.max_quantity = m.Int()
		return r
	case crc_emojiListNotModified:
		r := TL_emojiListNotModified{}
		return r
	case crc_emojiList:
		r := TL_emojiList{}
		r.hash = m.Long()
		r.document_id = m.VectorLong()
		return r
	case crc_auth_sentCodeTypeFirebaseSms:
		r := TL_auth_sentCodeTypeFirebaseSms{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.nonce = m.StringBytes()
		}
		if r.flags&(1<<1) != 0 {
			r.receipt = m.String()
		}
		if r.flags&(1<<1) != 0 {
			r.push_timeout = m.Int()
		}
		r.length = m.Int()
		return r
	case crc_emojiGroup:
		r := TL_emojiGroup{}
		r.title = m.String()
		r.icon_emoji_id = m.Long()
		r.emoticons = m.VectorString()
		return r
	case crc_messages_emojiGroupsNotModified:
		r := TL_messages_emojiGroupsNotModified{}
		return r
	case crc_messages_emojiGroups:
		r := TL_messages_emojiGroups{}
		r.hash = m.Int()
		r.groups = m.Vector()
		return r
	case crc_videoSizeEmojiMarkup:
		r := TL_videoSizeEmojiMarkup{}
		r.emoji_id = m.Long()
		r.background_colors = m.VectorInt()
		return r
	case crc_videoSizeStickerMarkup:
		r := TL_videoSizeStickerMarkup{}
		r.stickerset = m.Object()
		r.sticker_id = m.Long()
		r.background_colors = m.VectorInt()
		return r
	case crc_textWithEntities:
		r := TL_textWithEntities{}
		r.text = m.String()
		r.entities = m.Vector()
		return r
	case crc_messages_translateResult:
		r := TL_messages_translateResult{}
		r.result = m.Vector()
		return r
	case crc_autoSaveSettings:
		r := TL_autoSaveSettings{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.photos = true
		}
		if r.flags&(1<<1) != 0 {
			r.videos = true
		}
		if r.flags&(1<<2) != 0 {
			r.video_max_size = m.Long()
		}
		return r
	case crc_autoSaveException:
		r := TL_autoSaveException{}
		r.peer = m.Object()
		r.settings = m.Object()
		return r
	case crc_account_autoSaveSettings:
		r := TL_account_autoSaveSettings{}
		r.users_settings = m.Object()
		r.chats_settings = m.Object()
		r.broadcasts_settings = m.Object()
		r.exceptions = m.Vector()
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_updateAutoSaveSettings:
		r := TL_updateAutoSaveSettings{}
		return r
	case crc_help_appConfigNotModified:
		r := TL_help_appConfigNotModified{}
		return r
	case crc_help_appConfig:
		r := TL_help_appConfig{}
		r.hash = m.Int()
		r.config = m.Object()
		return r
	case crc_inputBotAppID:
		r := TL_inputBotAppID{}
		r.id = m.Long()
		r.access_hash = m.Long()
		return r
	case crc_inputBotAppShortName:
		r := TL_inputBotAppShortName{}
		r.bot_id = m.Object()
		r.short_name = m.String()
		return r
	case crc_botAppNotModified:
		r := TL_botAppNotModified{}
		return r
	case crc_botApp:
		r := TL_botApp{}
		r.flags = m.Int()
		r.id = m.Long()
		r.access_hash = m.Long()
		r.short_name = m.String()
		r.title = m.String()
		r.description = m.String()
		r.photo = m.Object()
		if r.flags&(1<<0) != 0 {
			r.document = m.Object()
		}
		r.hash = m.Long()
		return r
	case crc_messages_botApp:
		r := TL_messages_botApp{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.inactive = true
		}
		if r.flags&(1<<1) != 0 {
			r.request_write_access = true
		}
		if r.flags&(1<<2) != 0 {
			r.has_settings = true
		}
		r.app = m.Object()
		return r
	case crc_appWebViewResultUrl:
		r := TL_appWebViewResultUrl{}
		r.url = m.String()
		return r
	case crc_inlineBotWebView:
		r := TL_inlineBotWebView{}
		r.text = m.String()
		r.url = m.String()
		return r
	case crc_readParticipantDate:
		r := TL_readParticipantDate{}
		r.user_id = m.Long()
		r.date = m.Int()
		return r
	case crc_updateGroupInvitePrivacyForbidden:
		r := TL_updateGroupInvitePrivacyForbidden{}
		r.user_id = m.Long()
		return r
	case crc_dialogFilterChatlist:
		r := TL_dialogFilterChatlist{}
		r.flags = m.Int()
		if r.flags&(1<<26) != 0 {
			r.has_my_invites = true
		}
		r.id = m.Int()
		r.title = m.String()
		if r.flags&(1<<25) != 0 {
			r.emoticon = m.String()
		}
		r.pinned_peers = m.Vector()
		r.include_peers = m.Vector()
		return r
	case crc_inputChatlistDialogFilter:
		r := TL_inputChatlistDialogFilter{}
		r.filter_id = m.Int()
		return r
	case crc_exportedChatlistInvite:
		r := TL_exportedChatlistInvite{}
		r.flags = m.Int()
		r.title = m.String()
		r.url = m.String()
		r.peers = m.Vector()
		return r
	case crc_chatlists_exportedChatlistInvite:
		r := TL_chatlists_exportedChatlistInvite{}
		r.filter = m.Object()
		r.invite = m.Object()
		return r
	case crc_chatlists_exportedInvites:
		r := TL_chatlists_exportedInvites{}
		r.invites = m.Vector()
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_chatlists_chatlistInviteAlready:
		r := TL_chatlists_chatlistInviteAlready{}
		r.filter_id = m.Int()
		r.missing_peers = m.Vector()
		r.already_peers = m.Vector()
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_chatlists_chatlistInvite:
		r := TL_chatlists_chatlistInvite{}
		r.flags = m.Int()
		r.title = m.String()
		if r.flags&(1<<0) != 0 {
			r.emoticon = m.String()
		}
		r.peers = m.Vector()
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_chatlists_chatlistUpdates:
		r := TL_chatlists_chatlistUpdates{}
		r.missing_peers = m.Vector()
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_messageActionSetChatWallPaper:
		r := TL_messageActionSetChatWallPaper{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.same = true
		}
		if r.flags&(1<<1) != 0 {
			r.for_both = true
		}
		r.wallpaper = m.Object()
		return r
	case crc_bots_botInfo:
		r := TL_bots_botInfo{}
		r.name = m.String()
		r.about = m.String()
		r.description = m.String()
		return r
	case crc_inlineQueryPeerTypeBotPM:
		r := TL_inlineQueryPeerTypeBotPM{}
		return r
	case crc_messagePeerVote:
		r := TL_messagePeerVote{}
		r.peer = m.Object()
		r.option = m.StringBytes()
		r.date = m.Int()
		return r
	case crc_messagePeerVoteInputOption:
		r := TL_messagePeerVoteInputOption{}
		r.peer = m.Object()
		r.date = m.Int()
		return r
	case crc_messagePeerVoteMultiple:
		r := TL_messagePeerVoteMultiple{}
		r.peer = m.Object()
		r.options = m.Vector()
		r.date = m.Int()
		return r
	case crc_inputPrivacyKeyAbout:
		r := TL_inputPrivacyKeyAbout{}
		return r
	case crc_privacyKeyAbout:
		r := TL_privacyKeyAbout{}
		return r
	case crc_sponsoredWebPage:
		r := TL_sponsoredWebPage{}
		r.flags = m.Int()
		r.url = m.String()
		r.site_name = m.String()
		if r.flags&(1<<0) != 0 {
			r.photo = m.Object()
		}
		return r
	case crc_storyViews:
		r := TL_storyViews{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.has_viewers = true
		}
		r.views_count = m.Int()
		if r.flags&(1<<2) != 0 {
			r.forwards_count = m.Int()
		}
		if r.flags&(1<<3) != 0 {
			r.reactions = m.Vector()
		}
		if r.flags&(1<<4) != 0 {
			r.reactions_count = m.Int()
		}
		if r.flags&(1<<0) != 0 {
			r.recent_viewers = m.VectorLong()
		}
		return r
	case crc_storyItemDeleted:
		r := TL_storyItemDeleted{}
		r.id = m.Int()
		return r
	case crc_storyItemSkipped:
		r := TL_storyItemSkipped{}
		r.flags = m.Int()
		if r.flags&(1<<8) != 0 {
			r.close_friends = true
		}
		r.id = m.Int()
		r.date = m.Int()
		r.expire_date = m.Int()
		return r
	case crc_storyItem:
		r := TL_storyItem{}
		r.flags = m.Int()
		if r.flags&(1<<5) != 0 {
			r.pinned = true
		}
		if r.flags&(1<<7) != 0 {
			r.public = true
		}
		if r.flags&(1<<8) != 0 {
			r.close_friends = true
		}
		if r.flags&(1<<9) != 0 {
			r.min = true
		}
		if r.flags&(1<<10) != 0 {
			r.noforwards = true
		}
		if r.flags&(1<<11) != 0 {
			r.edited = true
		}
		if r.flags&(1<<12) != 0 {
			r.contacts = true
		}
		if r.flags&(1<<13) != 0 {
			r.selected_contacts = true
		}
		if r.flags&(1<<16) != 0 {
			r.out = true
		}
		r.id = m.Int()
		r.date = m.Int()
		if r.flags&(1<<17) != 0 {
			r.fwd_from = m.Object()
		}
		r.expire_date = m.Int()
		if r.flags&(1<<0) != 0 {
			r.caption = m.String()
		}
		if r.flags&(1<<1) != 0 {
			r.entities = m.Vector()
		}
		r.media = m.Object()
		if r.flags&(1<<14) != 0 {
			r.media_areas = m.Vector()
		}
		if r.flags&(1<<2) != 0 {
			r.privacy = m.Vector()
		}
		if r.flags&(1<<3) != 0 {
			r.views = m.Object()
		}
		if r.flags&(1<<15) != 0 {
			r.sent_reaction = m.Object()
		}
		return r
	case crc_updateStory:
		r := TL_updateStory{}
		r.peer = m.Object()
		r.story = m.Object()
		return r
	case crc_updateReadStories:
		r := TL_updateReadStories{}
		r.peer = m.Object()
		r.max_id = m.Int()
		return r
	case crc_stories_allStoriesNotModified:
		r := TL_stories_allStoriesNotModified{}
		r.flags = m.Int()
		r.state = m.String()
		r.stealth_mode = m.Object()
		return r
	case crc_stories_allStories:
		r := TL_stories_allStories{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.has_more = true
		}
		r.count = m.Int()
		r.state = m.String()
		r.peer_stories = m.Vector()
		r.chats = m.Vector()
		r.users = m.Vector()
		r.stealth_mode = m.Object()
		return r
	case crc_stories_stories:
		r := TL_stories_stories{}
		r.count = m.Int()
		r.stories = m.Vector()
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_inputPrivacyValueAllowCloseFriends:
		r := TL_inputPrivacyValueAllowCloseFriends{}
		return r
	case crc_privacyValueAllowCloseFriends:
		r := TL_privacyValueAllowCloseFriends{}
		return r
	case crc_storyView:
		r := TL_storyView{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.blocked = true
		}
		if r.flags&(1<<1) != 0 {
			r.blocked_my_stories_from = true
		}
		r.user_id = m.Long()
		r.date = m.Int()
		if r.flags&(1<<2) != 0 {
			r.reaction = m.Object()
		}
		return r
	case crc_stories_storyViewsList:
		r := TL_stories_storyViewsList{}
		r.flags = m.Int()
		r.count = m.Int()
		r.views_count = m.Int()
		r.forwards_count = m.Int()
		r.reactions_count = m.Int()
		r.views = m.Vector()
		r.chats = m.Vector()
		r.users = m.Vector()
		if r.flags&(1<<0) != 0 {
			r.next_offset = m.String()
		}
		return r
	case crc_stories_storyViews:
		r := TL_stories_storyViews{}
		r.views = m.Vector()
		r.users = m.Vector()
		return r
	case crc_inputReplyToMessage:
		r := TL_inputReplyToMessage{}
		r.flags = m.Int()
		r.reply_to_msg_id = m.Int()
		if r.flags&(1<<0) != 0 {
			r.top_msg_id = m.Int()
		}
		if r.flags&(1<<1) != 0 {
			r.reply_to_peer_id = m.Object()
		}
		if r.flags&(1<<2) != 0 {
			r.quote_text = m.String()
		}
		if r.flags&(1<<3) != 0 {
			r.quote_entities = m.Vector()
		}
		if r.flags&(1<<4) != 0 {
			r.quote_offset = m.Int()
		}
		return r
	case crc_inputReplyToStory:
		r := TL_inputReplyToStory{}
		r.user_id = m.Object()
		r.story_id = m.Int()
		return r
	case crc_messageReplyStoryHeader:
		r := TL_messageReplyStoryHeader{}
		r.user_id = m.Long()
		r.story_id = m.Int()
		return r
	case crc_updateStoryID:
		r := TL_updateStoryID{}
		r.id = m.Int()
		r.random_id = m.Long()
		return r
	case crc_exportedStoryLink:
		r := TL_exportedStoryLink{}
		r.link = m.String()
		return r
	case crc_inputMediaStory:
		r := TL_inputMediaStory{}
		r.peer = m.Object()
		r.id = m.Int()
		return r
	case crc_messageMediaStory:
		r := TL_messageMediaStory{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.via_mention = true
		}
		r.peer = m.Object()
		r.id = m.Int()
		if r.flags&(1<<0) != 0 {
			r.story = m.Object()
		}
		return r
	case crc_webPageAttributeStory:
		r := TL_webPageAttributeStory{}
		r.flags = m.Int()
		r.peer = m.Object()
		r.id = m.Int()
		if r.flags&(1<<0) != 0 {
			r.story = m.Object()
		}
		return r
	case crc_storiesStealthMode:
		r := TL_storiesStealthMode{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.active_until_date = m.Int()
		}
		if r.flags&(1<<1) != 0 {
			r.cooldown_until_date = m.Int()
		}
		return r
	case crc_updateStoriesStealthMode:
		r := TL_updateStoriesStealthMode{}
		r.stealth_mode = m.Object()
		return r
	case crc_mediaAreaCoordinates:
		r := TL_mediaAreaCoordinates{}
		r.x = m.Double()
		r.y = m.Double()
		r.w = m.Double()
		r.h = m.Double()
		r.rotation = m.Double()
		return r
	case crc_mediaAreaVenue:
		r := TL_mediaAreaVenue{}
		r.coordinates = m.Object()
		r.geo = m.Object()
		r.title = m.String()
		r.address = m.String()
		r.provider = m.String()
		r.venue_id = m.String()
		r.venue_type = m.String()
		return r
	case crc_inputMediaAreaVenue:
		r := TL_inputMediaAreaVenue{}
		r.coordinates = m.Object()
		r.query_id = m.Long()
		r.result_id = m.String()
		return r
	case crc_mediaAreaGeoPoint:
		r := TL_mediaAreaGeoPoint{}
		r.coordinates = m.Object()
		r.geo = m.Object()
		return r
	case crc_updateSentStoryReaction:
		r := TL_updateSentStoryReaction{}
		r.peer = m.Object()
		r.story_id = m.Int()
		r.reaction = m.Object()
		return r
	case crc_mediaAreaSuggestedReaction:
		r := TL_mediaAreaSuggestedReaction{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.dark = true
		}
		if r.flags&(1<<1) != 0 {
			r.flipped = true
		}
		r.coordinates = m.Object()
		r.reaction = m.Object()
		return r
	case crc_peerStories:
		r := TL_peerStories{}
		r.flags = m.Int()
		r.peer = m.Object()
		if r.flags&(1<<0) != 0 {
			r.max_read_id = m.Int()
		}
		r.stories = m.Vector()
		return r
	case crc_stories_peerStories:
		r := TL_stories_peerStories{}
		r.stories = m.Object()
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_messages_webPage:
		r := TL_messages_webPage{}
		r.webpage = m.Object()
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_inputStorePaymentPremiumGiftCode:
		r := TL_inputStorePaymentPremiumGiftCode{}
		r.flags = m.Int()
		r.users = m.Vector()
		if r.flags&(1<<0) != 0 {
			r.boost_peer = m.Object()
		}
		r.currency = m.String()
		r.amount = m.Long()
		return r
	case crc_inputStorePaymentPremiumGiveaway:
		r := TL_inputStorePaymentPremiumGiveaway{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.only_new_subscribers = true
		}
		if r.flags&(1<<3) != 0 {
			r.winners_are_visible = true
		}
		r.boost_peer = m.Object()
		if r.flags&(1<<1) != 0 {
			r.additional_peers = m.Vector()
		}
		if r.flags&(1<<2) != 0 {
			r.countries_iso2 = m.VectorString()
		}
		if r.flags&(1<<4) != 0 {
			r.prize_description = m.String()
		}
		r.random_id = m.Long()
		r.until_date = m.Int()
		r.currency = m.String()
		r.amount = m.Long()
		return r
	case crc_inputInvoicePremiumGiftCode:
		r := TL_inputInvoicePremiumGiftCode{}
		r.purpose = m.Object()
		r.option = m.Object()
		return r
	case crc_premiumGiftCodeOption:
		r := TL_premiumGiftCodeOption{}
		r.flags = m.Int()
		r.users = m.Int()
		r.months = m.Int()
		if r.flags&(1<<0) != 0 {
			r.store_product = m.String()
		}
		if r.flags&(1<<1) != 0 {
			r.store_quantity = m.Int()
		}
		r.currency = m.String()
		r.amount = m.Long()
		return r
	case crc_payments_checkedGiftCode:
		r := TL_payments_checkedGiftCode{}
		r.flags = m.Int()
		if r.flags&(1<<2) != 0 {
			r.via_giveaway = true
		}
		if r.flags&(1<<4) != 0 {
			r.from_id = m.Object()
		}
		if r.flags&(1<<3) != 0 {
			r.giveaway_msg_id = m.Int()
		}
		if r.flags&(1<<0) != 0 {
			r.to_id = m.Long()
		}
		r.date = m.Int()
		r.months = m.Int()
		if r.flags&(1<<1) != 0 {
			r.used_date = m.Int()
		}
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_messageMediaGiveaway:
		r := TL_messageMediaGiveaway{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.only_new_subscribers = true
		}
		if r.flags&(1<<2) != 0 {
			r.winners_are_visible = true
		}
		r.channels = m.VectorLong()
		if r.flags&(1<<1) != 0 {
			r.countries_iso2 = m.VectorString()
		}
		if r.flags&(1<<3) != 0 {
			r.prize_description = m.String()
		}
		r.quantity = m.Int()
		r.months = m.Int()
		r.until_date = m.Int()
		return r
	case crc_messageActionGiftCode:
		r := TL_messageActionGiftCode{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.via_giveaway = true
		}
		if r.flags&(1<<2) != 0 {
			r.unclaimed = true
		}
		if r.flags&(1<<1) != 0 {
			r.boost_peer = m.Object()
		}
		r.months = m.Int()
		r.slug = m.String()
		if r.flags&(1<<2) != 0 {
			r.currency = m.String()
		}
		if r.flags&(1<<2) != 0 {
			r.amount = m.Long()
		}
		if r.flags&(1<<3) != 0 {
			r.crypto_currency = m.String()
		}
		if r.flags&(1<<3) != 0 {
			r.crypto_amount = m.Long()
		}
		return r
	case crc_messageActionGiveawayLaunch:
		r := TL_messageActionGiveawayLaunch{}
		return r
	case crc_payments_giveawayInfo:
		r := TL_payments_giveawayInfo{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.participating = true
		}
		if r.flags&(1<<3) != 0 {
			r.preparing_results = true
		}
		r.start_date = m.Int()
		if r.flags&(1<<1) != 0 {
			r.joined_too_early_date = m.Int()
		}
		if r.flags&(1<<2) != 0 {
			r.admin_disallowed_chat_id = m.Long()
		}
		if r.flags&(1<<4) != 0 {
			r.disallowed_country = m.String()
		}
		return r
	case crc_payments_giveawayInfoResults:
		r := TL_payments_giveawayInfoResults{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.winner = true
		}
		if r.flags&(1<<1) != 0 {
			r.refunded = true
		}
		r.start_date = m.Int()
		if r.flags&(1<<0) != 0 {
			r.gift_code_slug = m.String()
		}
		r.finish_date = m.Int()
		r.winners_count = m.Int()
		r.activated_count = m.Int()
		return r
	case crc_messageEntityBlockquote:
		r := TL_messageEntityBlockquote{}
		r.offset = m.Int()
		r.length = m.Int()
		return r
	case crc_prepaidGiveaway:
		r := TL_prepaidGiveaway{}
		r.id = m.Long()
		r.months = m.Int()
		r.quantity = m.Int()
		r.date = m.Int()
		return r
	case crc_inputMediaWebPage:
		r := TL_inputMediaWebPage{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.force_large_media = true
		}
		if r.flags&(1<<1) != 0 {
			r.force_small_media = true
		}
		if r.flags&(1<<2) != 0 {
			r.optional = true
		}
		r.url = m.String()
		return r
	case crc_inputBotInlineMessageMediaWebPage:
		r := TL_inputBotInlineMessageMediaWebPage{}
		r.flags = m.Int()
		if r.flags&(1<<3) != 0 {
			r.invert_media = true
		}
		if r.flags&(1<<4) != 0 {
			r.force_large_media = true
		}
		if r.flags&(1<<5) != 0 {
			r.force_small_media = true
		}
		if r.flags&(1<<6) != 0 {
			r.optional = true
		}
		r.message = m.String()
		if r.flags&(1<<1) != 0 {
			r.entities = m.Vector()
		}
		r.url = m.String()
		if r.flags&(1<<2) != 0 {
			r.reply_markup = m.Object()
		}
		return r
	case crc_botInlineMessageMediaWebPage:
		r := TL_botInlineMessageMediaWebPage{}
		r.flags = m.Int()
		if r.flags&(1<<3) != 0 {
			r.invert_media = true
		}
		if r.flags&(1<<4) != 0 {
			r.force_large_media = true
		}
		if r.flags&(1<<5) != 0 {
			r.force_small_media = true
		}
		if r.flags&(1<<7) != 0 {
			r.manual = true
		}
		if r.flags&(1<<8) != 0 {
			r.safe = true
		}
		r.message = m.String()
		if r.flags&(1<<1) != 0 {
			r.entities = m.Vector()
		}
		r.url = m.String()
		if r.flags&(1<<2) != 0 {
			r.reply_markup = m.Object()
		}
		return r
	case crc_boost:
		r := TL_boost{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.gift = true
		}
		if r.flags&(1<<2) != 0 {
			r.giveaway = true
		}
		if r.flags&(1<<3) != 0 {
			r.unclaimed = true
		}
		r.id = m.String()
		if r.flags&(1<<0) != 0 {
			r.user_id = m.Long()
		}
		if r.flags&(1<<2) != 0 {
			r.giveaway_msg_id = m.Int()
		}
		r.date = m.Int()
		r.expires = m.Int()
		if r.flags&(1<<4) != 0 {
			r.used_gift_slug = m.String()
		}
		if r.flags&(1<<5) != 0 {
			r.multiplier = m.Int()
		}
		return r
	case crc_premium_boostsList:
		r := TL_premium_boostsList{}
		r.flags = m.Int()
		r.count = m.Int()
		r.boosts = m.Vector()
		if r.flags&(1<<0) != 0 {
			r.next_offset = m.String()
		}
		r.users = m.Vector()
		return r
	case crc_myBoost:
		r := TL_myBoost{}
		r.flags = m.Int()
		r.slot = m.Int()
		if r.flags&(1<<0) != 0 {
			r.peer = m.Object()
		}
		r.date = m.Int()
		r.expires = m.Int()
		if r.flags&(1<<1) != 0 {
			r.cooldown_until_date = m.Int()
		}
		return r
	case crc_premium_myBoosts:
		r := TL_premium_myBoosts{}
		r.my_boosts = m.Vector()
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_premium_boostsStatus:
		r := TL_premium_boostsStatus{}
		r.flags = m.Int()
		if r.flags&(1<<2) != 0 {
			r.my_boost = true
		}
		r.level = m.Int()
		r.current_level_boosts = m.Int()
		r.boosts = m.Int()
		if r.flags&(1<<4) != 0 {
			r.gift_boosts = m.Int()
		}
		if r.flags&(1<<0) != 0 {
			r.next_level_boosts = m.Int()
		}
		if r.flags&(1<<1) != 0 {
			r.premium_audience = m.Object()
		}
		r.boost_url = m.String()
		if r.flags&(1<<3) != 0 {
			r.prepaid_giveaways = m.Vector()
		}
		if r.flags&(1<<2) != 0 {
			r.my_boost_slots = m.VectorInt()
		}
		return r
	case crc_updateBotChatBoost:
		r := TL_updateBotChatBoost{}
		r.peer = m.Object()
		r.boost = m.Object()
		r.qts = m.Int()
		return r
	case crc_updateChannelViewForumAsMessages:
		r := TL_updateChannelViewForumAsMessages{}
		r.channel_id = m.Long()
		r.enabled = m.Object()
		return r
	case crc_messageActionGiveawayResults:
		r := TL_messageActionGiveawayResults{}
		r.winners_count = m.Int()
		r.unclaimed_count = m.Int()
		return r
	case crc_updatePeerWallpaper:
		r := TL_updatePeerWallpaper{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.wallpaper_overridden = true
		}
		r.peer = m.Object()
		if r.flags&(1<<0) != 0 {
			r.wallpaper = m.Object()
		}
		return r
	case crc_storyFwdHeader:
		r := TL_storyFwdHeader{}
		r.flags = m.Int()
		if r.flags&(1<<3) != 0 {
			r.modified = true
		}
		if r.flags&(1<<0) != 0 {
			r.from = m.Object()
		}
		if r.flags&(1<<1) != 0 {
			r.from_name = m.String()
		}
		if r.flags&(1<<2) != 0 {
			r.story_id = m.Int()
		}
		return r
	case crc_postInteractionCountersMessage:
		r := TL_postInteractionCountersMessage{}
		r.msg_id = m.Int()
		r.views = m.Int()
		r.forwards = m.Int()
		r.reactions = m.Int()
		return r
	case crc_postInteractionCountersStory:
		r := TL_postInteractionCountersStory{}
		r.story_id = m.Int()
		r.views = m.Int()
		r.forwards = m.Int()
		r.reactions = m.Int()
		return r
	case crc_stats_storyStats:
		r := TL_stats_storyStats{}
		r.views_graph = m.Object()
		r.reactions_by_emotion_graph = m.Object()
		return r
	case crc_publicForwardMessage:
		r := TL_publicForwardMessage{}
		r.message = m.Object()
		return r
	case crc_publicForwardStory:
		r := TL_publicForwardStory{}
		r.peer = m.Object()
		r.story = m.Object()
		return r
	case crc_stats_publicForwards:
		r := TL_stats_publicForwards{}
		r.flags = m.Int()
		r.count = m.Int()
		r.forwards = m.Vector()
		if r.flags&(1<<0) != 0 {
			r.next_offset = m.String()
		}
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_peerColor:
		r := TL_peerColor{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.color = m.Int()
		}
		if r.flags&(1<<1) != 0 {
			r.background_emoji_id = m.Long()
		}
		return r
	case crc_help_peerColorSet:
		r := TL_help_peerColorSet{}
		r.colors = m.VectorInt()
		return r
	case crc_help_peerColorProfileSet:
		r := TL_help_peerColorProfileSet{}
		r.palette_colors = m.VectorInt()
		r.bg_colors = m.VectorInt()
		r.story_colors = m.VectorInt()
		return r
	case crc_help_peerColorOption:
		r := TL_help_peerColorOption{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.hidden = true
		}
		r.color_id = m.Int()
		if r.flags&(1<<1) != 0 {
			r.colors = m.Object()
		}
		if r.flags&(1<<2) != 0 {
			r.dark_colors = m.Object()
		}
		if r.flags&(1<<3) != 0 {
			r.channel_min_level = m.Int()
		}
		return r
	case crc_help_peerColorsNotModified:
		r := TL_help_peerColorsNotModified{}
		return r
	case crc_help_peerColors:
		r := TL_help_peerColors{}
		r.hash = m.Int()
		r.colors = m.Vector()
		return r
	case crc_messageMediaGiveawayResults:
		r := TL_messageMediaGiveawayResults{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.only_new_subscribers = true
		}
		if r.flags&(1<<2) != 0 {
			r.refunded = true
		}
		r.channel_id = m.Long()
		if r.flags&(1<<3) != 0 {
			r.additional_peers_count = m.Int()
		}
		r.launch_msg_id = m.Int()
		r.winners_count = m.Int()
		r.unclaimed_count = m.Int()
		r.winners = m.VectorLong()
		r.months = m.Int()
		if r.flags&(1<<1) != 0 {
			r.prize_description = m.String()
		}
		r.until_date = m.Int()
		return r
	case crc_storyReaction:
		r := TL_storyReaction{}
		r.peer_id = m.Object()
		r.date = m.Int()
		r.reaction = m.Object()
		return r
	case crc_storyReactionPublicForward:
		r := TL_storyReactionPublicForward{}
		r.message = m.Object()
		return r
	case crc_storyReactionPublicRepost:
		r := TL_storyReactionPublicRepost{}
		r.peer_id = m.Object()
		r.story = m.Object()
		return r
	case crc_stories_storyReactionsList:
		r := TL_stories_storyReactionsList{}
		r.flags = m.Int()
		r.count = m.Int()
		r.reactions = m.Vector()
		r.chats = m.Vector()
		r.users = m.Vector()
		if r.flags&(1<<0) != 0 {
			r.next_offset = m.String()
		}
		return r
	case crc_storyViewPublicForward:
		r := TL_storyViewPublicForward{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.blocked = true
		}
		if r.flags&(1<<1) != 0 {
			r.blocked_my_stories_from = true
		}
		r.message = m.Object()
		return r
	case crc_storyViewPublicRepost:
		r := TL_storyViewPublicRepost{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.blocked = true
		}
		if r.flags&(1<<1) != 0 {
			r.blocked_my_stories_from = true
		}
		r.peer_id = m.Object()
		r.story = m.Object()
		return r
	case crc_channelAdminLogEventActionChangePeerColor:
		r := TL_channelAdminLogEventActionChangePeerColor{}
		r.prev_value = m.Object()
		r.new_value = m.Object()
		return r
	case crc_channelAdminLogEventActionChangeProfilePeerColor:
		r := TL_channelAdminLogEventActionChangeProfilePeerColor{}
		r.prev_value = m.Object()
		r.new_value = m.Object()
		return r
	case crc_channelAdminLogEventActionChangeWallpaper:
		r := TL_channelAdminLogEventActionChangeWallpaper{}
		r.prev_value = m.Object()
		r.new_value = m.Object()
		return r
	case crc_channelAdminLogEventActionChangeEmojiStatus:
		r := TL_channelAdminLogEventActionChangeEmojiStatus{}
		r.prev_value = m.Object()
		r.new_value = m.Object()
		return r
	case crc_inputStickerSetEmojiChannelDefaultStatuses:
		r := TL_inputStickerSetEmojiChannelDefaultStatuses{}
		return r
	case crc_mediaAreaChannelPost:
		r := TL_mediaAreaChannelPost{}
		r.coordinates = m.Object()
		r.channel_id = m.Long()
		r.msg_id = m.Int()
		return r
	case crc_inputMediaAreaChannelPost:
		r := TL_inputMediaAreaChannelPost{}
		r.coordinates = m.Object()
		r.channel = m.Object()
		r.msg_id = m.Int()
		return r
	case crc_updateBotMessageReaction:
		r := TL_updateBotMessageReaction{}
		r.peer = m.Object()
		r.msg_id = m.Int()
		r.date = m.Int()
		r.actor = m.Object()
		r.old_reactions = m.Vector()
		r.new_reactions = m.Vector()
		r.qts = m.Int()
		return r
	case crc_updateBotMessageReactions:
		r := TL_updateBotMessageReactions{}
		r.peer = m.Object()
		r.msg_id = m.Int()
		r.date = m.Int()
		r.reactions = m.Vector()
		r.qts = m.Int()
		return r
	case crc_savedDialog:
		r := TL_savedDialog{}
		r.flags = m.Int()
		if r.flags&(1<<2) != 0 {
			r.pinned = true
		}
		r.peer = m.Object()
		r.top_message = m.Int()
		return r
	case crc_updateSavedDialogPinned:
		r := TL_updateSavedDialogPinned{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.pinned = true
		}
		r.peer = m.Object()
		return r
	case crc_updatePinnedSavedDialogs:
		r := TL_updatePinnedSavedDialogs{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.order = m.Vector()
		}
		return r
	case crc_messages_savedDialogs:
		r := TL_messages_savedDialogs{}
		r.dialogs = m.Vector()
		r.messages = m.Vector()
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_messages_savedDialogsSlice:
		r := TL_messages_savedDialogsSlice{}
		r.count = m.Int()
		r.dialogs = m.Vector()
		r.messages = m.Vector()
		r.chats = m.Vector()
		r.users = m.Vector()
		return r
	case crc_messages_savedDialogsNotModified:
		r := TL_messages_savedDialogsNotModified{}
		r.count = m.Int()
		return r
	case crc_invokeAfterMsg:
		r := TL_invokeAfterMsg{}
		r.msg_id = m.Long()
		r.query = m.Object()
		return r
	case crc_invokeAfterMsgs:
		r := TL_invokeAfterMsgs{}
		r.msg_ids = m.VectorLong()
		r.query = m.Object()
		return r
	case crc_auth_sendCode:
		r := TL_auth_sendCode{}
		r.phone_number = m.String()
		r.api_id = m.Int()
		r.api_hash = m.String()
		r.settings = m.Object()
		return r
	case crc_auth_signUp:
		r := TL_auth_signUp{}
		r.phone_number = m.String()
		r.phone_code_hash = m.String()
		r.first_name = m.String()
		r.last_name = m.String()
		return r
	case crc_auth_signIn:
		r := TL_auth_signIn{}
		r.flags = m.Int()
		r.phone_number = m.String()
		r.phone_code_hash = m.String()
		if r.flags&(1<<0) != 0 {
			r.phone_code = m.String()
		}
		if r.flags&(1<<1) != 0 {
			r.email_verification = m.Object()
		}
		return r
	case crc_auth_logOut:
		r := TL_auth_logOut{}
		return r
	case crc_auth_resetAuthorizations:
		r := TL_auth_resetAuthorizations{}
		return r
	case crc_auth_exportAuthorization:
		r := TL_auth_exportAuthorization{}
		r.dc_id = m.Int()
		return r
	case crc_auth_importAuthorization:
		r := TL_auth_importAuthorization{}
		r.id = m.Long()
		r.bytes = m.StringBytes()
		return r
	case crc_auth_bindTempAuthKey:
		r := TL_auth_bindTempAuthKey{}
		r.perm_auth_key_id = m.Long()
		r.nonce = m.Long()
		r.expires_at = m.Int()
		r.encrypted_message = m.StringBytes()
		return r
	case crc_account_registerDevice:
		r := TL_account_registerDevice{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.no_muted = true
		}
		r.token_type = m.Int()
		r.token = m.String()
		r.app_sandbox = m.Object()
		r.secret = m.StringBytes()
		r.other_uids = m.VectorLong()
		return r
	case crc_account_unregisterDevice:
		r := TL_account_unregisterDevice{}
		r.token_type = m.Int()
		r.token = m.String()
		r.other_uids = m.VectorLong()
		return r
	case crc_account_updateNotifySettings:
		r := TL_account_updateNotifySettings{}
		r.peer = m.Object()
		r.settings = m.Object()
		return r
	case crc_account_getNotifySettings:
		r := TL_account_getNotifySettings{}
		r.peer = m.Object()
		return r
	case crc_account_resetNotifySettings:
		r := TL_account_resetNotifySettings{}
		return r
	case crc_account_updateProfile:
		r := TL_account_updateProfile{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.first_name = m.String()
		}
		if r.flags&(1<<1) != 0 {
			r.last_name = m.String()
		}
		if r.flags&(1<<2) != 0 {
			r.about = m.String()
		}
		return r
	case crc_account_updateStatus:
		r := TL_account_updateStatus{}
		r.offline = m.Object()
		return r
	case crc_account_getWallPapers:
		r := TL_account_getWallPapers{}
		r.hash = m.Long()
		return r
	case crc_account_reportPeer:
		r := TL_account_reportPeer{}
		r.peer = m.Object()
		r.reason = m.Object()
		r.message = m.String()
		return r
	case crc_users_getUsers:
		r := TL_users_getUsers{}
		r.id = m.Vector()
		return r
	case crc_users_getFullUser:
		r := TL_users_getFullUser{}
		r.id = m.Object()
		return r
	case crc_contacts_getContactIDs:
		r := TL_contacts_getContactIDs{}
		r.hash = m.Long()
		return r
	case crc_contacts_getStatuses:
		r := TL_contacts_getStatuses{}
		return r
	case crc_contacts_getContacts:
		r := TL_contacts_getContacts{}
		r.hash = m.Long()
		return r
	case crc_contacts_importContacts:
		r := TL_contacts_importContacts{}
		r.contacts = m.Vector()
		return r
	case crc_contacts_deleteContacts:
		r := TL_contacts_deleteContacts{}
		r.id = m.Vector()
		return r
	case crc_contacts_deleteByPhones:
		r := TL_contacts_deleteByPhones{}
		r.phones = m.VectorString()
		return r
	case crc_contacts_block:
		r := TL_contacts_block{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.my_stories_from = true
		}
		r.id = m.Object()
		return r
	case crc_contacts_unblock:
		r := TL_contacts_unblock{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.my_stories_from = true
		}
		r.id = m.Object()
		return r
	case crc_contacts_getBlocked:
		r := TL_contacts_getBlocked{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.my_stories_from = true
		}
		r.offset = m.Int()
		r.limit = m.Int()
		return r
	case crc_messages_getMessages:
		r := TL_messages_getMessages{}
		r.id = m.Vector()
		return r
	case crc_messages_getDialogs:
		r := TL_messages_getDialogs{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.exclude_pinned = true
		}
		if r.flags&(1<<1) != 0 {
			r.folder_id = m.Int()
		}
		r.offset_date = m.Int()
		r.offset_id = m.Int()
		r.offset_peer = m.Object()
		r.limit = m.Int()
		r.hash = m.Long()
		return r
	case crc_messages_getHistory:
		r := TL_messages_getHistory{}
		r.peer = m.Object()
		r.offset_id = m.Int()
		r.offset_date = m.Int()
		r.add_offset = m.Int()
		r.limit = m.Int()
		r.max_id = m.Int()
		r.min_id = m.Int()
		r.hash = m.Long()
		return r
	case crc_messages_search:
		r := TL_messages_search{}
		r.flags = m.Int()
		r.peer = m.Object()
		r.q = m.String()
		if r.flags&(1<<0) != 0 {
			r.from_id = m.Object()
		}
		if r.flags&(1<<2) != 0 {
			r.saved_peer_id = m.Object()
		}
		if r.flags&(1<<1) != 0 {
			r.top_msg_id = m.Int()
		}
		r.filter = m.Object()
		r.min_date = m.Int()
		r.max_date = m.Int()
		r.offset_id = m.Int()
		r.add_offset = m.Int()
		r.limit = m.Int()
		r.max_id = m.Int()
		r.min_id = m.Int()
		r.hash = m.Long()
		return r
	case crc_messages_readHistory:
		r := TL_messages_readHistory{}
		r.peer = m.Object()
		r.max_id = m.Int()
		return r
	case crc_messages_deleteHistory:
		r := TL_messages_deleteHistory{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.just_clear = true
		}
		if r.flags&(1<<1) != 0 {
			r.revoke = true
		}
		r.peer = m.Object()
		r.max_id = m.Int()
		if r.flags&(1<<2) != 0 {
			r.min_date = m.Int()
		}
		if r.flags&(1<<3) != 0 {
			r.max_date = m.Int()
		}
		return r
	case crc_messages_deleteMessages:
		r := TL_messages_deleteMessages{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.revoke = true
		}
		r.id = m.VectorInt()
		return r
	case crc_messages_receivedMessages:
		r := TL_messages_receivedMessages{}
		r.max_id = m.Int()
		return r
	case crc_messages_setTyping:
		r := TL_messages_setTyping{}
		r.flags = m.Int()
		r.peer = m.Object()
		if r.flags&(1<<0) != 0 {
			r.top_msg_id = m.Int()
		}
		r.action = m.Object()
		return r
	case crc_messages_sendMessage:
		r := TL_messages_sendMessage{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.no_webpage = true
		}
		if r.flags&(1<<5) != 0 {
			r.silent = true
		}
		if r.flags&(1<<6) != 0 {
			r.background = true
		}
		if r.flags&(1<<7) != 0 {
			r.clear_draft = true
		}
		if r.flags&(1<<14) != 0 {
			r.noforwards = true
		}
		if r.flags&(1<<15) != 0 {
			r.update_stickersets_order = true
		}
		if r.flags&(1<<16) != 0 {
			r.invert_media = true
		}
		r.peer = m.Object()
		if r.flags&(1<<0) != 0 {
			r.reply_to = m.Object()
		}
		r.message = m.String()
		r.random_id = m.Long()
		if r.flags&(1<<2) != 0 {
			r.reply_markup = m.Object()
		}
		if r.flags&(1<<3) != 0 {
			r.entities = m.Vector()
		}
		if r.flags&(1<<10) != 0 {
			r.schedule_date = m.Int()
		}
		if r.flags&(1<<13) != 0 {
			r.send_as = m.Object()
		}
		return r
	case crc_messages_sendMedia:
		r := TL_messages_sendMedia{}
		r.flags = m.Int()
		if r.flags&(1<<5) != 0 {
			r.silent = true
		}
		if r.flags&(1<<6) != 0 {
			r.background = true
		}
		if r.flags&(1<<7) != 0 {
			r.clear_draft = true
		}
		if r.flags&(1<<14) != 0 {
			r.noforwards = true
		}
		if r.flags&(1<<15) != 0 {
			r.update_stickersets_order = true
		}
		if r.flags&(1<<16) != 0 {
			r.invert_media = true
		}
		r.peer = m.Object()
		if r.flags&(1<<0) != 0 {
			r.reply_to = m.Object()
		}
		r.media = m.Object()
		r.message = m.String()
		r.random_id = m.Long()
		if r.flags&(1<<2) != 0 {
			r.reply_markup = m.Object()
		}
		if r.flags&(1<<3) != 0 {
			r.entities = m.Vector()
		}
		if r.flags&(1<<10) != 0 {
			r.schedule_date = m.Int()
		}
		if r.flags&(1<<13) != 0 {
			r.send_as = m.Object()
		}
		return r
	case crc_messages_forwardMessages:
		r := TL_messages_forwardMessages{}
		r.flags = m.Int()
		if r.flags&(1<<5) != 0 {
			r.silent = true
		}
		if r.flags&(1<<6) != 0 {
			r.background = true
		}
		if r.flags&(1<<8) != 0 {
			r.with_my_score = true
		}
		if r.flags&(1<<11) != 0 {
			r.drop_author = true
		}
		if r.flags&(1<<12) != 0 {
			r.drop_media_captions = true
		}
		if r.flags&(1<<14) != 0 {
			r.noforwards = true
		}
		r.from_peer = m.Object()
		r.id = m.VectorInt()
		r.random_id = m.VectorLong()
		r.to_peer = m.Object()
		if r.flags&(1<<9) != 0 {
			r.top_msg_id = m.Int()
		}
		if r.flags&(1<<10) != 0 {
			r.schedule_date = m.Int()
		}
		if r.flags&(1<<13) != 0 {
			r.send_as = m.Object()
		}
		return r
	case crc_messages_reportSpam:
		r := TL_messages_reportSpam{}
		r.peer = m.Object()
		return r
	case crc_messages_getPeerSettings:
		r := TL_messages_getPeerSettings{}
		r.peer = m.Object()
		return r
	case crc_messages_report:
		r := TL_messages_report{}
		r.peer = m.Object()
		r.id = m.VectorInt()
		r.reason = m.Object()
		r.message = m.String()
		return r
	case crc_messages_getChats:
		r := TL_messages_getChats{}
		r.id = m.VectorLong()
		return r
	case crc_messages_getFullChat:
		r := TL_messages_getFullChat{}
		r.chat_id = m.Long()
		return r
	case crc_messages_editChatTitle:
		r := TL_messages_editChatTitle{}
		r.chat_id = m.Long()
		r.title = m.String()
		return r
	case crc_messages_editChatPhoto:
		r := TL_messages_editChatPhoto{}
		r.chat_id = m.Long()
		r.photo = m.Object()
		return r
	case crc_messages_addChatUser:
		r := TL_messages_addChatUser{}
		r.chat_id = m.Long()
		r.user_id = m.Object()
		r.fwd_limit = m.Int()
		return r
	case crc_messages_deleteChatUser:
		r := TL_messages_deleteChatUser{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.revoke_history = true
		}
		r.chat_id = m.Long()
		r.user_id = m.Object()
		return r
	case crc_messages_createChat:
		r := TL_messages_createChat{}
		r.flags = m.Int()
		r.users = m.Vector()
		r.title = m.String()
		if r.flags&(1<<0) != 0 {
			r.ttl_period = m.Int()
		}
		return r
	case crc_updates_getState:
		r := TL_updates_getState{}
		return r
	case crc_updates_getDifference:
		r := TL_updates_getDifference{}
		r.flags = m.Int()
		r.pts = m.Int()
		if r.flags&(1<<1) != 0 {
			r.pts_limit = m.Int()
		}
		if r.flags&(1<<0) != 0 {
			r.pts_total_limit = m.Int()
		}
		r.date = m.Int()
		r.qts = m.Int()
		if r.flags&(1<<2) != 0 {
			r.qts_limit = m.Int()
		}
		return r
	case crc_photos_updateProfilePhoto:
		r := TL_photos_updateProfilePhoto{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.fallback = true
		}
		if r.flags&(1<<1) != 0 {
			r.bot = m.Object()
		}
		r.id = m.Object()
		return r
	case crc_photos_uploadProfilePhoto:
		r := TL_photos_uploadProfilePhoto{}
		r.flags = m.Int()
		if r.flags&(1<<3) != 0 {
			r.fallback = true
		}
		if r.flags&(1<<5) != 0 {
			r.bot = m.Object()
		}
		if r.flags&(1<<0) != 0 {
			r.file = m.Object()
		}
		if r.flags&(1<<1) != 0 {
			r.video = m.Object()
		}
		if r.flags&(1<<2) != 0 {
			r.video_start_ts = m.Double()
		}
		if r.flags&(1<<4) != 0 {
			r.video_emoji_markup = m.Object()
		}
		return r
	case crc_photos_deletePhotos:
		r := TL_photos_deletePhotos{}
		r.id = m.Vector()
		return r
	case crc_upload_saveFilePart:
		r := TL_upload_saveFilePart{}
		r.file_id = m.Long()
		r.file_part = m.Int()
		r.bytes = m.StringBytes()
		return r
	case crc_upload_getFile:
		r := TL_upload_getFile{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.precise = true
		}
		if r.flags&(1<<1) != 0 {
			r.cdn_supported = true
		}
		r.location = m.Object()
		r.offset = m.Long()
		r.limit = m.Int()
		return r
	case crc_help_getConfig:
		r := TL_help_getConfig{}
		return r
	case crc_help_getNearestDc:
		r := TL_help_getNearestDc{}
		return r
	case crc_help_getAppUpdate:
		r := TL_help_getAppUpdate{}
		r.source = m.String()
		return r
	case crc_help_getInviteText:
		r := TL_help_getInviteText{}
		return r
	case crc_photos_getUserPhotos:
		r := TL_photos_getUserPhotos{}
		r.user_id = m.Object()
		r.offset = m.Int()
		r.max_id = m.Long()
		r.limit = m.Int()
		return r
	case crc_messages_getDhConfig:
		r := TL_messages_getDhConfig{}
		r.version = m.Int()
		r.random_length = m.Int()
		return r
	case crc_messages_requestEncryption:
		r := TL_messages_requestEncryption{}
		r.user_id = m.Object()
		r.random_id = m.Int()
		r.g_a = m.StringBytes()
		return r
	case crc_messages_acceptEncryption:
		r := TL_messages_acceptEncryption{}
		r.peer = m.Object()
		r.g_b = m.StringBytes()
		r.key_fingerprint = m.Long()
		return r
	case crc_messages_discardEncryption:
		r := TL_messages_discardEncryption{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.delete_history = true
		}
		r.chat_id = m.Int()
		return r
	case crc_messages_setEncryptedTyping:
		r := TL_messages_setEncryptedTyping{}
		r.peer = m.Object()
		r.typing = m.Object()
		return r
	case crc_messages_readEncryptedHistory:
		r := TL_messages_readEncryptedHistory{}
		r.peer = m.Object()
		r.max_date = m.Int()
		return r
	case crc_messages_sendEncrypted:
		r := TL_messages_sendEncrypted{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.silent = true
		}
		r.peer = m.Object()
		r.random_id = m.Long()
		r.data = m.StringBytes()
		return r
	case crc_messages_sendEncryptedFile:
		r := TL_messages_sendEncryptedFile{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.silent = true
		}
		r.peer = m.Object()
		r.random_id = m.Long()
		r.data = m.StringBytes()
		r.file = m.Object()
		return r
	case crc_messages_sendEncryptedService:
		r := TL_messages_sendEncryptedService{}
		r.peer = m.Object()
		r.random_id = m.Long()
		r.data = m.StringBytes()
		return r
	case crc_messages_receivedQueue:
		r := TL_messages_receivedQueue{}
		r.max_qts = m.Int()
		return r
	case crc_messages_reportEncryptedSpam:
		r := TL_messages_reportEncryptedSpam{}
		r.peer = m.Object()
		return r
	case crc_upload_saveBigFilePart:
		r := TL_upload_saveBigFilePart{}
		r.file_id = m.Long()
		r.file_part = m.Int()
		r.file_total_parts = m.Int()
		r.bytes = m.StringBytes()
		return r
	case crc_initConnection:
		r := TL_initConnection{}
		r.flags = m.Int()
		r.api_id = m.Int()
		r.device_model = m.String()
		r.system_version = m.String()
		r.app_version = m.String()
		r.system_lang_code = m.String()
		r.lang_pack = m.String()
		r.lang_code = m.String()
		if r.flags&(1<<0) != 0 {
			r.proxy = m.Object()
		}
		if r.flags&(1<<1) != 0 {
			r.params = m.Object()
		}
		r.query = m.Object()
		return r
	case crc_help_getSupport:
		r := TL_help_getSupport{}
		return r
	case crc_messages_readMessageContents:
		r := TL_messages_readMessageContents{}
		r.id = m.VectorInt()
		return r
	case crc_account_checkUsername:
		r := TL_account_checkUsername{}
		r.username = m.String()
		return r
	case crc_account_updateUsername:
		r := TL_account_updateUsername{}
		r.username = m.String()
		return r
	case crc_contacts_search:
		r := TL_contacts_search{}
		r.q = m.String()
		r.limit = m.Int()
		return r
	case crc_account_getPrivacy:
		r := TL_account_getPrivacy{}
		r.key = m.Object()
		return r
	case crc_account_setPrivacy:
		r := TL_account_setPrivacy{}
		r.key = m.Object()
		r.rules = m.Vector()
		return r
	case crc_account_deleteAccount:
		r := TL_account_deleteAccount{}
		r.flags = m.Int()
		r.reason = m.String()
		if r.flags&(1<<0) != 0 {
			r.password = m.Object()
		}
		return r
	case crc_account_getAccountTTL:
		r := TL_account_getAccountTTL{}
		return r
	case crc_account_setAccountTTL:
		r := TL_account_setAccountTTL{}
		r.ttl = m.Object()
		return r
	case crc_invokeWithLayer:
		r := TL_invokeWithLayer{}
		r.layer = m.Int()
		r.query = m.Object()
		return r
	case crc_contacts_resolveUsername:
		r := TL_contacts_resolveUsername{}
		r.username = m.String()
		return r
	case crc_account_sendChangePhoneCode:
		r := TL_account_sendChangePhoneCode{}
		r.phone_number = m.String()
		r.settings = m.Object()
		return r
	case crc_account_changePhone:
		r := TL_account_changePhone{}
		r.phone_number = m.String()
		r.phone_code_hash = m.String()
		r.phone_code = m.String()
		return r
	case crc_messages_getStickers:
		r := TL_messages_getStickers{}
		r.emoticon = m.String()
		r.hash = m.Long()
		return r
	case crc_messages_getAllStickers:
		r := TL_messages_getAllStickers{}
		r.hash = m.Long()
		return r
	case crc_account_updateDeviceLocked:
		r := TL_account_updateDeviceLocked{}
		r.period = m.Int()
		return r
	case crc_auth_importBotAuthorization:
		r := TL_auth_importBotAuthorization{}
		r.flags = m.Int()
		r.api_id = m.Int()
		r.api_hash = m.String()
		r.bot_auth_token = m.String()
		return r
	case crc_messages_getWebPagePreview:
		r := TL_messages_getWebPagePreview{}
		r.flags = m.Int()
		r.message = m.String()
		if r.flags&(1<<3) != 0 {
			r.entities = m.Vector()
		}
		return r
	case crc_account_getAuthorizations:
		r := TL_account_getAuthorizations{}
		return r
	case crc_account_resetAuthorization:
		r := TL_account_resetAuthorization{}
		r.hash = m.Long()
		return r
	case crc_account_getPassword:
		r := TL_account_getPassword{}
		return r
	case crc_account_getPasswordSettings:
		r := TL_account_getPasswordSettings{}
		r.password = m.Object()
		return r
	case crc_account_updatePasswordSettings:
		r := TL_account_updatePasswordSettings{}
		r.password = m.Object()
		r.new_settings = m.Object()
		return r
	case crc_auth_checkPassword:
		r := TL_auth_checkPassword{}
		r.password = m.Object()
		return r
	case crc_auth_requestPasswordRecovery:
		r := TL_auth_requestPasswordRecovery{}
		return r
	case crc_auth_recoverPassword:
		r := TL_auth_recoverPassword{}
		r.flags = m.Int()
		r.code = m.String()
		if r.flags&(1<<0) != 0 {
			r.new_settings = m.Object()
		}
		return r
	case crc_invokeWithoutUpdates:
		r := TL_invokeWithoutUpdates{}
		r.query = m.Object()
		return r
	case crc_messages_exportChatInvite:
		r := TL_messages_exportChatInvite{}
		r.flags = m.Int()
		if r.flags&(1<<2) != 0 {
			r.legacy_revoke_permanent = true
		}
		if r.flags&(1<<3) != 0 {
			r.request_needed = true
		}
		r.peer = m.Object()
		if r.flags&(1<<0) != 0 {
			r.expire_date = m.Int()
		}
		if r.flags&(1<<1) != 0 {
			r.usage_limit = m.Int()
		}
		if r.flags&(1<<4) != 0 {
			r.title = m.String()
		}
		return r
	case crc_messages_checkChatInvite:
		r := TL_messages_checkChatInvite{}
		r.hash = m.String()
		return r
	case crc_messages_importChatInvite:
		r := TL_messages_importChatInvite{}
		r.hash = m.String()
		return r
	case crc_messages_getStickerSet:
		r := TL_messages_getStickerSet{}
		r.stickerset = m.Object()
		r.hash = m.Int()
		return r
	case crc_messages_installStickerSet:
		r := TL_messages_installStickerSet{}
		r.stickerset = m.Object()
		r.archived = m.Object()
		return r
	case crc_messages_uninstallStickerSet:
		r := TL_messages_uninstallStickerSet{}
		r.stickerset = m.Object()
		return r
	case crc_messages_startBot:
		r := TL_messages_startBot{}
		r.bot = m.Object()
		r.peer = m.Object()
		r.random_id = m.Long()
		r.start_param = m.String()
		return r
	case crc_messages_getMessagesViews:
		r := TL_messages_getMessagesViews{}
		r.peer = m.Object()
		r.id = m.VectorInt()
		r.increment = m.Object()
		return r
	case crc_channels_readHistory:
		r := TL_channels_readHistory{}
		r.channel = m.Object()
		r.max_id = m.Int()
		return r
	case crc_channels_deleteMessages:
		r := TL_channels_deleteMessages{}
		r.channel = m.Object()
		r.id = m.VectorInt()
		return r
	case crc_channels_reportSpam:
		r := TL_channels_reportSpam{}
		r.channel = m.Object()
		r.participant = m.Object()
		r.id = m.VectorInt()
		return r
	case crc_channels_getMessages:
		r := TL_channels_getMessages{}
		r.channel = m.Object()
		r.id = m.Vector()
		return r
	case crc_channels_getParticipants:
		r := TL_channels_getParticipants{}
		r.channel = m.Object()
		r.filter = m.Object()
		r.offset = m.Int()
		r.limit = m.Int()
		r.hash = m.Long()
		return r
	case crc_channels_getParticipant:
		r := TL_channels_getParticipant{}
		r.channel = m.Object()
		r.participant = m.Object()
		return r
	case crc_channels_getChannels:
		r := TL_channels_getChannels{}
		r.id = m.Vector()
		return r
	case crc_channels_getFullChannel:
		r := TL_channels_getFullChannel{}
		r.channel = m.Object()
		return r
	case crc_channels_createChannel:
		r := TL_channels_createChannel{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.broadcast = true
		}
		if r.flags&(1<<1) != 0 {
			r.megagroup = true
		}
		if r.flags&(1<<3) != 0 {
			r.for_import = true
		}
		if r.flags&(1<<5) != 0 {
			r.forum = true
		}
		r.title = m.String()
		r.about = m.String()
		if r.flags&(1<<2) != 0 {
			r.geo_point = m.Object()
		}
		if r.flags&(1<<2) != 0 {
			r.address = m.String()
		}
		if r.flags&(1<<4) != 0 {
			r.ttl_period = m.Int()
		}
		return r
	case crc_channels_editAdmin:
		r := TL_channels_editAdmin{}
		r.channel = m.Object()
		r.user_id = m.Object()
		r.admin_rights = m.Object()
		r.rank = m.String()
		return r
	case crc_channels_editTitle:
		r := TL_channels_editTitle{}
		r.channel = m.Object()
		r.title = m.String()
		return r
	case crc_channels_editPhoto:
		r := TL_channels_editPhoto{}
		r.channel = m.Object()
		r.photo = m.Object()
		return r
	case crc_channels_checkUsername:
		r := TL_channels_checkUsername{}
		r.channel = m.Object()
		r.username = m.String()
		return r
	case crc_channels_updateUsername:
		r := TL_channels_updateUsername{}
		r.channel = m.Object()
		r.username = m.String()
		return r
	case crc_channels_joinChannel:
		r := TL_channels_joinChannel{}
		r.channel = m.Object()
		return r
	case crc_channels_leaveChannel:
		r := TL_channels_leaveChannel{}
		r.channel = m.Object()
		return r
	case crc_channels_inviteToChannel:
		r := TL_channels_inviteToChannel{}
		r.channel = m.Object()
		r.users = m.Vector()
		return r
	case crc_channels_deleteChannel:
		r := TL_channels_deleteChannel{}
		r.channel = m.Object()
		return r
	case crc_updates_getChannelDifference:
		r := TL_updates_getChannelDifference{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.force = true
		}
		r.channel = m.Object()
		r.filter = m.Object()
		r.pts = m.Int()
		r.limit = m.Int()
		return r
	case crc_messages_editChatAdmin:
		r := TL_messages_editChatAdmin{}
		r.chat_id = m.Long()
		r.user_id = m.Object()
		r.is_admin = m.Object()
		return r
	case crc_messages_migrateChat:
		r := TL_messages_migrateChat{}
		r.chat_id = m.Long()
		return r
	case crc_messages_searchGlobal:
		r := TL_messages_searchGlobal{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.broadcasts_only = true
		}
		if r.flags&(1<<0) != 0 {
			r.folder_id = m.Int()
		}
		r.q = m.String()
		r.filter = m.Object()
		r.min_date = m.Int()
		r.max_date = m.Int()
		r.offset_rate = m.Int()
		r.offset_peer = m.Object()
		r.offset_id = m.Int()
		r.limit = m.Int()
		return r
	case crc_messages_reorderStickerSets:
		r := TL_messages_reorderStickerSets{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.masks = true
		}
		if r.flags&(1<<1) != 0 {
			r.emojis = true
		}
		r.order = m.VectorLong()
		return r
	case crc_messages_getDocumentByHash:
		r := TL_messages_getDocumentByHash{}
		r.sha256 = m.StringBytes()
		r.size = m.Long()
		r.mime_type = m.String()
		return r
	case crc_messages_getSavedGifs:
		r := TL_messages_getSavedGifs{}
		r.hash = m.Long()
		return r
	case crc_messages_saveGif:
		r := TL_messages_saveGif{}
		r.id = m.Object()
		r.unsave = m.Object()
		return r
	case crc_messages_getInlineBotResults:
		r := TL_messages_getInlineBotResults{}
		r.flags = m.Int()
		r.bot = m.Object()
		r.peer = m.Object()
		if r.flags&(1<<0) != 0 {
			r.geo_point = m.Object()
		}
		r.query = m.String()
		r.offset = m.String()
		return r
	case crc_messages_setInlineBotResults:
		r := TL_messages_setInlineBotResults{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.gallery = true
		}
		if r.flags&(1<<1) != 0 {
			r.private = true
		}
		r.query_id = m.Long()
		r.results = m.Vector()
		r.cache_time = m.Int()
		if r.flags&(1<<2) != 0 {
			r.next_offset = m.String()
		}
		if r.flags&(1<<3) != 0 {
			r.switch_pm = m.Object()
		}
		if r.flags&(1<<4) != 0 {
			r.switch_webview = m.Object()
		}
		return r
	case crc_messages_sendInlineBotResult:
		r := TL_messages_sendInlineBotResult{}
		r.flags = m.Int()
		if r.flags&(1<<5) != 0 {
			r.silent = true
		}
		if r.flags&(1<<6) != 0 {
			r.background = true
		}
		if r.flags&(1<<7) != 0 {
			r.clear_draft = true
		}
		if r.flags&(1<<11) != 0 {
			r.hide_via = true
		}
		r.peer = m.Object()
		if r.flags&(1<<0) != 0 {
			r.reply_to = m.Object()
		}
		r.random_id = m.Long()
		r.query_id = m.Long()
		r.id = m.String()
		if r.flags&(1<<10) != 0 {
			r.schedule_date = m.Int()
		}
		if r.flags&(1<<13) != 0 {
			r.send_as = m.Object()
		}
		return r
	case crc_channels_exportMessageLink:
		r := TL_channels_exportMessageLink{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.grouped = true
		}
		if r.flags&(1<<1) != 0 {
			r.thread = true
		}
		r.channel = m.Object()
		r.id = m.Int()
		return r
	case crc_channels_toggleSignatures:
		r := TL_channels_toggleSignatures{}
		r.channel = m.Object()
		r.enabled = m.Object()
		return r
	case crc_auth_resendCode:
		r := TL_auth_resendCode{}
		r.phone_number = m.String()
		r.phone_code_hash = m.String()
		return r
	case crc_auth_cancelCode:
		r := TL_auth_cancelCode{}
		r.phone_number = m.String()
		r.phone_code_hash = m.String()
		return r
	case crc_messages_getMessageEditData:
		r := TL_messages_getMessageEditData{}
		r.peer = m.Object()
		r.id = m.Int()
		return r
	case crc_messages_editMessage:
		r := TL_messages_editMessage{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.no_webpage = true
		}
		if r.flags&(1<<16) != 0 {
			r.invert_media = true
		}
		r.peer = m.Object()
		r.id = m.Int()
		if r.flags&(1<<11) != 0 {
			r.message = m.String()
		}
		if r.flags&(1<<14) != 0 {
			r.media = m.Object()
		}
		if r.flags&(1<<2) != 0 {
			r.reply_markup = m.Object()
		}
		if r.flags&(1<<3) != 0 {
			r.entities = m.Vector()
		}
		if r.flags&(1<<15) != 0 {
			r.schedule_date = m.Int()
		}
		return r
	case crc_messages_editInlineBotMessage:
		r := TL_messages_editInlineBotMessage{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.no_webpage = true
		}
		if r.flags&(1<<16) != 0 {
			r.invert_media = true
		}
		r.id = m.Object()
		if r.flags&(1<<11) != 0 {
			r.message = m.String()
		}
		if r.flags&(1<<14) != 0 {
			r.media = m.Object()
		}
		if r.flags&(1<<2) != 0 {
			r.reply_markup = m.Object()
		}
		if r.flags&(1<<3) != 0 {
			r.entities = m.Vector()
		}
		return r
	case crc_messages_getBotCallbackAnswer:
		r := TL_messages_getBotCallbackAnswer{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.game = true
		}
		r.peer = m.Object()
		r.msg_id = m.Int()
		if r.flags&(1<<0) != 0 {
			r.data = m.StringBytes()
		}
		if r.flags&(1<<2) != 0 {
			r.password = m.Object()
		}
		return r
	case crc_messages_setBotCallbackAnswer:
		r := TL_messages_setBotCallbackAnswer{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.alert = true
		}
		r.query_id = m.Long()
		if r.flags&(1<<0) != 0 {
			r.message = m.String()
		}
		if r.flags&(1<<2) != 0 {
			r.url = m.String()
		}
		r.cache_time = m.Int()
		return r
	case crc_contacts_getTopPeers:
		r := TL_contacts_getTopPeers{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.correspondents = true
		}
		if r.flags&(1<<1) != 0 {
			r.bots_pm = true
		}
		if r.flags&(1<<2) != 0 {
			r.bots_inline = true
		}
		if r.flags&(1<<3) != 0 {
			r.phone_calls = true
		}
		if r.flags&(1<<4) != 0 {
			r.forward_users = true
		}
		if r.flags&(1<<5) != 0 {
			r.forward_chats = true
		}
		if r.flags&(1<<10) != 0 {
			r.groups = true
		}
		if r.flags&(1<<15) != 0 {
			r.channels = true
		}
		if r.flags&(1<<16) != 0 {
			r.bots_app = true
		}
		r.offset = m.Int()
		r.limit = m.Int()
		r.hash = m.Long()
		return r
	case crc_contacts_resetTopPeerRating:
		r := TL_contacts_resetTopPeerRating{}
		r.category = m.Object()
		r.peer = m.Object()
		return r
	case crc_messages_getPeerDialogs:
		r := TL_messages_getPeerDialogs{}
		r.peers = m.Vector()
		return r
	case crc_messages_saveDraft:
		r := TL_messages_saveDraft{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.no_webpage = true
		}
		if r.flags&(1<<6) != 0 {
			r.invert_media = true
		}
		if r.flags&(1<<4) != 0 {
			r.reply_to = m.Object()
		}
		r.peer = m.Object()
		r.message = m.String()
		if r.flags&(1<<3) != 0 {
			r.entities = m.Vector()
		}
		if r.flags&(1<<5) != 0 {
			r.media = m.Object()
		}
		return r
	case crc_messages_getAllDrafts:
		r := TL_messages_getAllDrafts{}
		return r
	case crc_messages_getFeaturedStickers:
		r := TL_messages_getFeaturedStickers{}
		r.hash = m.Long()
		return r
	case crc_messages_readFeaturedStickers:
		r := TL_messages_readFeaturedStickers{}
		r.id = m.VectorLong()
		return r
	case crc_messages_getRecentStickers:
		r := TL_messages_getRecentStickers{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.attached = true
		}
		r.hash = m.Long()
		return r
	case crc_messages_saveRecentSticker:
		r := TL_messages_saveRecentSticker{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.attached = true
		}
		r.id = m.Object()
		r.unsave = m.Object()
		return r
	case crc_messages_clearRecentStickers:
		r := TL_messages_clearRecentStickers{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.attached = true
		}
		return r
	case crc_messages_getArchivedStickers:
		r := TL_messages_getArchivedStickers{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.masks = true
		}
		if r.flags&(1<<1) != 0 {
			r.emojis = true
		}
		r.offset_id = m.Long()
		r.limit = m.Int()
		return r
	case crc_account_sendConfirmPhoneCode:
		r := TL_account_sendConfirmPhoneCode{}
		r.hash = m.String()
		r.settings = m.Object()
		return r
	case crc_account_confirmPhone:
		r := TL_account_confirmPhone{}
		r.phone_code_hash = m.String()
		r.phone_code = m.String()
		return r
	case crc_channels_getAdminedPublicChannels:
		r := TL_channels_getAdminedPublicChannels{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.by_location = true
		}
		if r.flags&(1<<1) != 0 {
			r.check_limit = true
		}
		return r
	case crc_messages_getMaskStickers:
		r := TL_messages_getMaskStickers{}
		r.hash = m.Long()
		return r
	case crc_messages_getAttachedStickers:
		r := TL_messages_getAttachedStickers{}
		r.media = m.Object()
		return r
	case crc_auth_dropTempAuthKeys:
		r := TL_auth_dropTempAuthKeys{}
		r.except_auth_keys = m.VectorLong()
		return r
	case crc_messages_setGameScore:
		r := TL_messages_setGameScore{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.edit_message = true
		}
		if r.flags&(1<<1) != 0 {
			r.force = true
		}
		r.peer = m.Object()
		r.id = m.Int()
		r.user_id = m.Object()
		r.score = m.Int()
		return r
	case crc_messages_setInlineGameScore:
		r := TL_messages_setInlineGameScore{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.edit_message = true
		}
		if r.flags&(1<<1) != 0 {
			r.force = true
		}
		r.id = m.Object()
		r.user_id = m.Object()
		r.score = m.Int()
		return r
	case crc_messages_getGameHighScores:
		r := TL_messages_getGameHighScores{}
		r.peer = m.Object()
		r.id = m.Int()
		r.user_id = m.Object()
		return r
	case crc_messages_getInlineGameHighScores:
		r := TL_messages_getInlineGameHighScores{}
		r.id = m.Object()
		r.user_id = m.Object()
		return r
	case crc_messages_getCommonChats:
		r := TL_messages_getCommonChats{}
		r.user_id = m.Object()
		r.max_id = m.Long()
		r.limit = m.Int()
		return r
	case crc_help_setBotUpdatesStatus:
		r := TL_help_setBotUpdatesStatus{}
		r.pending_updates_count = m.Int()
		r.message = m.String()
		return r
	case crc_messages_getWebPage:
		r := TL_messages_getWebPage{}
		r.url = m.String()
		r.hash = m.Int()
		return r
	case crc_messages_toggleDialogPin:
		r := TL_messages_toggleDialogPin{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.pinned = true
		}
		r.peer = m.Object()
		return r
	case crc_messages_reorderPinnedDialogs:
		r := TL_messages_reorderPinnedDialogs{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.force = true
		}
		r.folder_id = m.Int()
		r.order = m.Vector()
		return r
	case crc_messages_getPinnedDialogs:
		r := TL_messages_getPinnedDialogs{}
		r.folder_id = m.Int()
		return r
	case crc_bots_sendCustomRequest:
		r := TL_bots_sendCustomRequest{}
		r.custom_method = m.String()
		r.params = m.Object()
		return r
	case crc_bots_answerWebhookJSONQuery:
		r := TL_bots_answerWebhookJSONQuery{}
		r.query_id = m.Long()
		r.data = m.Object()
		return r
	case crc_upload_getWebFile:
		r := TL_upload_getWebFile{}
		r.location = m.Object()
		r.offset = m.Int()
		r.limit = m.Int()
		return r
	case crc_payments_getPaymentForm:
		r := TL_payments_getPaymentForm{}
		r.flags = m.Int()
		r.invoice = m.Object()
		if r.flags&(1<<0) != 0 {
			r.theme_params = m.Object()
		}
		return r
	case crc_payments_getPaymentReceipt:
		r := TL_payments_getPaymentReceipt{}
		r.peer = m.Object()
		r.msg_id = m.Int()
		return r
	case crc_payments_validateRequestedInfo:
		r := TL_payments_validateRequestedInfo{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.save = true
		}
		r.invoice = m.Object()
		r.info = m.Object()
		return r
	case crc_payments_sendPaymentForm:
		r := TL_payments_sendPaymentForm{}
		r.flags = m.Int()
		r.form_id = m.Long()
		r.invoice = m.Object()
		if r.flags&(1<<0) != 0 {
			r.requested_info_id = m.String()
		}
		if r.flags&(1<<1) != 0 {
			r.shipping_option_id = m.String()
		}
		r.credentials = m.Object()
		if r.flags&(1<<2) != 0 {
			r.tip_amount = m.Long()
		}
		return r
	case crc_account_getTmpPassword:
		r := TL_account_getTmpPassword{}
		r.password = m.Object()
		r.period = m.Int()
		return r
	case crc_payments_getSavedInfo:
		r := TL_payments_getSavedInfo{}
		return r
	case crc_payments_clearSavedInfo:
		r := TL_payments_clearSavedInfo{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.credentials = true
		}
		if r.flags&(1<<1) != 0 {
			r.info = true
		}
		return r
	case crc_messages_setBotShippingResults:
		r := TL_messages_setBotShippingResults{}
		r.flags = m.Int()
		r.query_id = m.Long()
		if r.flags&(1<<0) != 0 {
			r.error = m.String()
		}
		if r.flags&(1<<1) != 0 {
			r.shipping_options = m.Vector()
		}
		return r
	case crc_messages_setBotPrecheckoutResults:
		r := TL_messages_setBotPrecheckoutResults{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.success = true
		}
		r.query_id = m.Long()
		if r.flags&(1<<0) != 0 {
			r.error = m.String()
		}
		return r
	case crc_stickers_createStickerSet:
		r := TL_stickers_createStickerSet{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.masks = true
		}
		if r.flags&(1<<1) != 0 {
			r.animated = true
		}
		if r.flags&(1<<4) != 0 {
			r.videos = true
		}
		if r.flags&(1<<5) != 0 {
			r.emojis = true
		}
		if r.flags&(1<<6) != 0 {
			r.text_color = true
		}
		r.user_id = m.Object()
		r.title = m.String()
		r.short_name = m.String()
		if r.flags&(1<<2) != 0 {
			r.thumb = m.Object()
		}
		r.stickers = m.Vector()
		if r.flags&(1<<3) != 0 {
			r.software = m.String()
		}
		return r
	case crc_stickers_removeStickerFromSet:
		r := TL_stickers_removeStickerFromSet{}
		r.sticker = m.Object()
		return r
	case crc_stickers_changeStickerPosition:
		r := TL_stickers_changeStickerPosition{}
		r.sticker = m.Object()
		r.position = m.Int()
		return r
	case crc_stickers_addStickerToSet:
		r := TL_stickers_addStickerToSet{}
		r.stickerset = m.Object()
		r.sticker = m.Object()
		return r
	case crc_messages_uploadMedia:
		r := TL_messages_uploadMedia{}
		r.peer = m.Object()
		r.media = m.Object()
		return r
	case crc_phone_getCallConfig:
		r := TL_phone_getCallConfig{}
		return r
	case crc_phone_requestCall:
		r := TL_phone_requestCall{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.video = true
		}
		r.user_id = m.Object()
		r.random_id = m.Int()
		r.g_a_hash = m.StringBytes()
		r.protocol = m.Object()
		return r
	case crc_phone_acceptCall:
		r := TL_phone_acceptCall{}
		r.peer = m.Object()
		r.g_b = m.StringBytes()
		r.protocol = m.Object()
		return r
	case crc_phone_confirmCall:
		r := TL_phone_confirmCall{}
		r.peer = m.Object()
		r.g_a = m.StringBytes()
		r.key_fingerprint = m.Long()
		r.protocol = m.Object()
		return r
	case crc_phone_receivedCall:
		r := TL_phone_receivedCall{}
		r.peer = m.Object()
		return r
	case crc_phone_discardCall:
		r := TL_phone_discardCall{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.video = true
		}
		r.peer = m.Object()
		r.duration = m.Int()
		r.reason = m.Object()
		r.connection_id = m.Long()
		return r
	case crc_phone_setCallRating:
		r := TL_phone_setCallRating{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.user_initiative = true
		}
		r.peer = m.Object()
		r.rating = m.Int()
		r.comment = m.String()
		return r
	case crc_phone_saveCallDebug:
		r := TL_phone_saveCallDebug{}
		r.peer = m.Object()
		r.debug = m.Object()
		return r
	case crc_upload_getCdnFile:
		r := TL_upload_getCdnFile{}
		r.file_token = m.StringBytes()
		r.offset = m.Long()
		r.limit = m.Int()
		return r
	case crc_upload_reuploadCdnFile:
		r := TL_upload_reuploadCdnFile{}
		r.file_token = m.StringBytes()
		r.request_token = m.StringBytes()
		return r
	case crc_help_getCdnConfig:
		r := TL_help_getCdnConfig{}
		return r
	case crc_langpack_getLangPack:
		r := TL_langpack_getLangPack{}
		r.lang_pack = m.String()
		r.lang_code = m.String()
		return r
	case crc_langpack_getStrings:
		r := TL_langpack_getStrings{}
		r.lang_pack = m.String()
		r.lang_code = m.String()
		r.keys = m.VectorString()
		return r
	case crc_langpack_getDifference:
		r := TL_langpack_getDifference{}
		r.lang_pack = m.String()
		r.lang_code = m.String()
		r.from_version = m.Int()
		return r
	case crc_langpack_getLanguages:
		r := TL_langpack_getLanguages{}
		r.lang_pack = m.String()
		return r
	case crc_channels_editBanned:
		r := TL_channels_editBanned{}
		r.channel = m.Object()
		r.participant = m.Object()
		r.banned_rights = m.Object()
		return r
	case crc_channels_getAdminLog:
		r := TL_channels_getAdminLog{}
		r.flags = m.Int()
		r.channel = m.Object()
		r.q = m.String()
		if r.flags&(1<<0) != 0 {
			r.events_filter = m.Object()
		}
		if r.flags&(1<<1) != 0 {
			r.admins = m.Vector()
		}
		r.max_id = m.Long()
		r.min_id = m.Long()
		r.limit = m.Int()
		return r
	case crc_upload_getCdnFileHashes:
		r := TL_upload_getCdnFileHashes{}
		r.file_token = m.StringBytes()
		r.offset = m.Long()
		return r
	case crc_messages_sendScreenshotNotification:
		r := TL_messages_sendScreenshotNotification{}
		r.peer = m.Object()
		r.reply_to = m.Object()
		r.random_id = m.Long()
		return r
	case crc_channels_setStickers:
		r := TL_channels_setStickers{}
		r.channel = m.Object()
		r.stickerset = m.Object()
		return r
	case crc_messages_getFavedStickers:
		r := TL_messages_getFavedStickers{}
		r.hash = m.Long()
		return r
	case crc_messages_faveSticker:
		r := TL_messages_faveSticker{}
		r.id = m.Object()
		r.unfave = m.Object()
		return r
	case crc_channels_readMessageContents:
		r := TL_channels_readMessageContents{}
		r.channel = m.Object()
		r.id = m.VectorInt()
		return r
	case crc_contacts_resetSaved:
		r := TL_contacts_resetSaved{}
		return r
	case crc_messages_getUnreadMentions:
		r := TL_messages_getUnreadMentions{}
		r.flags = m.Int()
		r.peer = m.Object()
		if r.flags&(1<<0) != 0 {
			r.top_msg_id = m.Int()
		}
		r.offset_id = m.Int()
		r.add_offset = m.Int()
		r.limit = m.Int()
		r.max_id = m.Int()
		r.min_id = m.Int()
		return r
	case crc_channels_deleteHistory:
		r := TL_channels_deleteHistory{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.for_everyone = true
		}
		r.channel = m.Object()
		r.max_id = m.Int()
		return r
	case crc_help_getRecentMeUrls:
		r := TL_help_getRecentMeUrls{}
		r.referer = m.String()
		return r
	case crc_channels_togglePreHistoryHidden:
		r := TL_channels_togglePreHistoryHidden{}
		r.channel = m.Object()
		r.enabled = m.Object()
		return r
	case crc_messages_readMentions:
		r := TL_messages_readMentions{}
		r.flags = m.Int()
		r.peer = m.Object()
		if r.flags&(1<<0) != 0 {
			r.top_msg_id = m.Int()
		}
		return r
	case crc_messages_getRecentLocations:
		r := TL_messages_getRecentLocations{}
		r.peer = m.Object()
		r.limit = m.Int()
		r.hash = m.Long()
		return r
	case crc_messages_sendMultiMedia:
		r := TL_messages_sendMultiMedia{}
		r.flags = m.Int()
		if r.flags&(1<<5) != 0 {
			r.silent = true
		}
		if r.flags&(1<<6) != 0 {
			r.background = true
		}
		if r.flags&(1<<7) != 0 {
			r.clear_draft = true
		}
		if r.flags&(1<<14) != 0 {
			r.noforwards = true
		}
		if r.flags&(1<<15) != 0 {
			r.update_stickersets_order = true
		}
		if r.flags&(1<<16) != 0 {
			r.invert_media = true
		}
		r.peer = m.Object()
		if r.flags&(1<<0) != 0 {
			r.reply_to = m.Object()
		}
		r.multi_media = m.Vector()
		if r.flags&(1<<10) != 0 {
			r.schedule_date = m.Int()
		}
		if r.flags&(1<<13) != 0 {
			r.send_as = m.Object()
		}
		return r
	case crc_messages_uploadEncryptedFile:
		r := TL_messages_uploadEncryptedFile{}
		r.peer = m.Object()
		r.file = m.Object()
		return r
	case crc_account_getWebAuthorizations:
		r := TL_account_getWebAuthorizations{}
		return r
	case crc_account_resetWebAuthorization:
		r := TL_account_resetWebAuthorization{}
		r.hash = m.Long()
		return r
	case crc_account_resetWebAuthorizations:
		r := TL_account_resetWebAuthorizations{}
		return r
	case crc_messages_searchStickerSets:
		r := TL_messages_searchStickerSets{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.exclude_featured = true
		}
		r.q = m.String()
		r.hash = m.Long()
		return r
	case crc_upload_getFileHashes:
		r := TL_upload_getFileHashes{}
		r.location = m.Object()
		r.offset = m.Long()
		return r
	case crc_help_getTermsOfServiceUpdate:
		r := TL_help_getTermsOfServiceUpdate{}
		return r
	case crc_help_acceptTermsOfService:
		r := TL_help_acceptTermsOfService{}
		r.id = m.Object()
		return r
	case crc_account_getAllSecureValues:
		r := TL_account_getAllSecureValues{}
		return r
	case crc_account_getSecureValue:
		r := TL_account_getSecureValue{}
		r.types = m.Vector()
		return r
	case crc_account_saveSecureValue:
		r := TL_account_saveSecureValue{}
		r.value = m.Object()
		r.secure_secret_id = m.Long()
		return r
	case crc_account_deleteSecureValue:
		r := TL_account_deleteSecureValue{}
		r.types = m.Vector()
		return r
	case crc_users_setSecureValueErrors:
		r := TL_users_setSecureValueErrors{}
		r.id = m.Object()
		r.errors = m.Vector()
		return r
	case crc_account_getAuthorizationForm:
		r := TL_account_getAuthorizationForm{}
		r.bot_id = m.Long()
		r.scope = m.String()
		r.public_key = m.String()
		return r
	case crc_account_acceptAuthorization:
		r := TL_account_acceptAuthorization{}
		r.bot_id = m.Long()
		r.scope = m.String()
		r.public_key = m.String()
		r.value_hashes = m.Vector()
		r.credentials = m.Object()
		return r
	case crc_account_sendVerifyPhoneCode:
		r := TL_account_sendVerifyPhoneCode{}
		r.phone_number = m.String()
		r.settings = m.Object()
		return r
	case crc_account_verifyPhone:
		r := TL_account_verifyPhone{}
		r.phone_number = m.String()
		r.phone_code_hash = m.String()
		r.phone_code = m.String()
		return r
	case crc_account_sendVerifyEmailCode:
		r := TL_account_sendVerifyEmailCode{}
		r.purpose = m.Object()
		r.email = m.String()
		return r
	case crc_account_verifyEmail:
		r := TL_account_verifyEmail{}
		r.purpose = m.Object()
		r.verification = m.Object()
		return r
	case crc_help_getDeepLinkInfo:
		r := TL_help_getDeepLinkInfo{}
		r.path = m.String()
		return r
	case crc_contacts_getSaved:
		r := TL_contacts_getSaved{}
		return r
	case crc_channels_getLeftChannels:
		r := TL_channels_getLeftChannels{}
		r.offset = m.Int()
		return r
	case crc_account_initTakeoutSession:
		r := TL_account_initTakeoutSession{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.contacts = true
		}
		if r.flags&(1<<1) != 0 {
			r.message_users = true
		}
		if r.flags&(1<<2) != 0 {
			r.message_chats = true
		}
		if r.flags&(1<<3) != 0 {
			r.message_megagroups = true
		}
		if r.flags&(1<<4) != 0 {
			r.message_channels = true
		}
		if r.flags&(1<<5) != 0 {
			r.files = true
		}
		if r.flags&(1<<5) != 0 {
			r.file_max_size = m.Long()
		}
		return r
	case crc_account_finishTakeoutSession:
		r := TL_account_finishTakeoutSession{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.success = true
		}
		return r
	case crc_messages_getSplitRanges:
		r := TL_messages_getSplitRanges{}
		return r
	case crc_invokeWithMessagesRange:
		r := TL_invokeWithMessagesRange{}
		r._range = m.Object()
		r.query = m.Object()
		return r
	case crc_invokeWithTakeout:
		r := TL_invokeWithTakeout{}
		r.takeout_id = m.Long()
		r.query = m.Object()
		return r
	case crc_messages_markDialogUnread:
		r := TL_messages_markDialogUnread{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.unread = true
		}
		r.peer = m.Object()
		return r
	case crc_messages_getDialogUnreadMarks:
		r := TL_messages_getDialogUnreadMarks{}
		return r
	case crc_contacts_toggleTopPeers:
		r := TL_contacts_toggleTopPeers{}
		r.enabled = m.Object()
		return r
	case crc_messages_clearAllDrafts:
		r := TL_messages_clearAllDrafts{}
		return r
	case crc_help_getAppConfig:
		r := TL_help_getAppConfig{}
		r.hash = m.Int()
		return r
	case crc_help_saveAppLog:
		r := TL_help_saveAppLog{}
		r.events = m.Vector()
		return r
	case crc_help_getPassportConfig:
		r := TL_help_getPassportConfig{}
		r.hash = m.Int()
		return r
	case crc_langpack_getLanguage:
		r := TL_langpack_getLanguage{}
		r.lang_pack = m.String()
		r.lang_code = m.String()
		return r
	case crc_messages_updatePinnedMessage:
		r := TL_messages_updatePinnedMessage{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.silent = true
		}
		if r.flags&(1<<1) != 0 {
			r.unpin = true
		}
		if r.flags&(1<<2) != 0 {
			r.pm_oneside = true
		}
		r.peer = m.Object()
		r.id = m.Int()
		return r
	case crc_account_confirmPasswordEmail:
		r := TL_account_confirmPasswordEmail{}
		r.code = m.String()
		return r
	case crc_account_resendPasswordEmail:
		r := TL_account_resendPasswordEmail{}
		return r
	case crc_account_cancelPasswordEmail:
		r := TL_account_cancelPasswordEmail{}
		return r
	case crc_help_getSupportName:
		r := TL_help_getSupportName{}
		return r
	case crc_help_getUserInfo:
		r := TL_help_getUserInfo{}
		r.user_id = m.Object()
		return r
	case crc_help_editUserInfo:
		r := TL_help_editUserInfo{}
		r.user_id = m.Object()
		r.message = m.String()
		r.entities = m.Vector()
		return r
	case crc_account_getContactSignUpNotification:
		r := TL_account_getContactSignUpNotification{}
		return r
	case crc_account_setContactSignUpNotification:
		r := TL_account_setContactSignUpNotification{}
		r.silent = m.Object()
		return r
	case crc_account_getNotifyExceptions:
		r := TL_account_getNotifyExceptions{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.compare_sound = true
		}
		if r.flags&(1<<2) != 0 {
			r.compare_stories = true
		}
		if r.flags&(1<<0) != 0 {
			r.peer = m.Object()
		}
		return r
	case crc_messages_sendVote:
		r := TL_messages_sendVote{}
		r.peer = m.Object()
		r.msg_id = m.Int()
		r.options = m.Vector()
		return r
	case crc_messages_getPollResults:
		r := TL_messages_getPollResults{}
		r.peer = m.Object()
		r.msg_id = m.Int()
		return r
	case crc_messages_getOnlines:
		r := TL_messages_getOnlines{}
		r.peer = m.Object()
		return r
	case crc_messages_editChatAbout:
		r := TL_messages_editChatAbout{}
		r.peer = m.Object()
		r.about = m.String()
		return r
	case crc_messages_editChatDefaultBannedRights:
		r := TL_messages_editChatDefaultBannedRights{}
		r.peer = m.Object()
		r.banned_rights = m.Object()
		return r
	case crc_account_getWallPaper:
		r := TL_account_getWallPaper{}
		r.wallpaper = m.Object()
		return r
	case crc_account_uploadWallPaper:
		r := TL_account_uploadWallPaper{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.for_chat = true
		}
		r.file = m.Object()
		r.mime_type = m.String()
		r.settings = m.Object()
		return r
	case crc_account_saveWallPaper:
		r := TL_account_saveWallPaper{}
		r.wallpaper = m.Object()
		r.unsave = m.Object()
		r.settings = m.Object()
		return r
	case crc_account_installWallPaper:
		r := TL_account_installWallPaper{}
		r.wallpaper = m.Object()
		r.settings = m.Object()
		return r
	case crc_account_resetWallPapers:
		r := TL_account_resetWallPapers{}
		return r
	case crc_account_getAutoDownloadSettings:
		r := TL_account_getAutoDownloadSettings{}
		return r
	case crc_account_saveAutoDownloadSettings:
		r := TL_account_saveAutoDownloadSettings{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.low = true
		}
		if r.flags&(1<<1) != 0 {
			r.high = true
		}
		r.settings = m.Object()
		return r
	case crc_messages_getEmojiKeywords:
		r := TL_messages_getEmojiKeywords{}
		r.lang_code = m.String()
		return r
	case crc_messages_getEmojiKeywordsDifference:
		r := TL_messages_getEmojiKeywordsDifference{}
		r.lang_code = m.String()
		r.from_version = m.Int()
		return r
	case crc_messages_getEmojiKeywordsLanguages:
		r := TL_messages_getEmojiKeywordsLanguages{}
		r.lang_codes = m.VectorString()
		return r
	case crc_messages_getEmojiURL:
		r := TL_messages_getEmojiURL{}
		r.lang_code = m.String()
		return r
	case crc_folders_editPeerFolders:
		r := TL_folders_editPeerFolders{}
		r.folder_peers = m.Vector()
		return r
	case crc_messages_getSearchCounters:
		r := TL_messages_getSearchCounters{}
		r.flags = m.Int()
		r.peer = m.Object()
		if r.flags&(1<<2) != 0 {
			r.saved_peer_id = m.Object()
		}
		if r.flags&(1<<0) != 0 {
			r.top_msg_id = m.Int()
		}
		r.filters = m.Vector()
		return r
	case crc_channels_getGroupsForDiscussion:
		r := TL_channels_getGroupsForDiscussion{}
		return r
	case crc_channels_setDiscussionGroup:
		r := TL_channels_setDiscussionGroup{}
		r.broadcast = m.Object()
		r.group = m.Object()
		return r
	case crc_messages_requestUrlAuth:
		r := TL_messages_requestUrlAuth{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.peer = m.Object()
		}
		if r.flags&(1<<1) != 0 {
			r.msg_id = m.Int()
		}
		if r.flags&(1<<1) != 0 {
			r.button_id = m.Int()
		}
		if r.flags&(1<<2) != 0 {
			r.url = m.String()
		}
		return r
	case crc_messages_acceptUrlAuth:
		r := TL_messages_acceptUrlAuth{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.write_allowed = true
		}
		if r.flags&(1<<1) != 0 {
			r.peer = m.Object()
		}
		if r.flags&(1<<1) != 0 {
			r.msg_id = m.Int()
		}
		if r.flags&(1<<1) != 0 {
			r.button_id = m.Int()
		}
		if r.flags&(1<<2) != 0 {
			r.url = m.String()
		}
		return r
	case crc_messages_hidePeerSettingsBar:
		r := TL_messages_hidePeerSettingsBar{}
		r.peer = m.Object()
		return r
	case crc_contacts_addContact:
		r := TL_contacts_addContact{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.add_phone_privacy_exception = true
		}
		r.id = m.Object()
		r.first_name = m.String()
		r.last_name = m.String()
		r.phone = m.String()
		return r
	case crc_contacts_acceptContact:
		r := TL_contacts_acceptContact{}
		r.id = m.Object()
		return r
	case crc_channels_editCreator:
		r := TL_channels_editCreator{}
		r.channel = m.Object()
		r.user_id = m.Object()
		r.password = m.Object()
		return r
	case crc_contacts_getLocated:
		r := TL_contacts_getLocated{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.background = true
		}
		r.geo_point = m.Object()
		if r.flags&(1<<0) != 0 {
			r.self_expires = m.Int()
		}
		return r
	case crc_channels_editLocation:
		r := TL_channels_editLocation{}
		r.channel = m.Object()
		r.geo_point = m.Object()
		r.address = m.String()
		return r
	case crc_channels_toggleSlowMode:
		r := TL_channels_toggleSlowMode{}
		r.channel = m.Object()
		r.seconds = m.Int()
		return r
	case crc_messages_getScheduledHistory:
		r := TL_messages_getScheduledHistory{}
		r.peer = m.Object()
		r.hash = m.Long()
		return r
	case crc_messages_getScheduledMessages:
		r := TL_messages_getScheduledMessages{}
		r.peer = m.Object()
		r.id = m.VectorInt()
		return r
	case crc_messages_sendScheduledMessages:
		r := TL_messages_sendScheduledMessages{}
		r.peer = m.Object()
		r.id = m.VectorInt()
		return r
	case crc_messages_deleteScheduledMessages:
		r := TL_messages_deleteScheduledMessages{}
		r.peer = m.Object()
		r.id = m.VectorInt()
		return r
	case crc_account_uploadTheme:
		r := TL_account_uploadTheme{}
		r.flags = m.Int()
		r.file = m.Object()
		if r.flags&(1<<0) != 0 {
			r.thumb = m.Object()
		}
		r.file_name = m.String()
		r.mime_type = m.String()
		return r
	case crc_account_createTheme:
		r := TL_account_createTheme{}
		r.flags = m.Int()
		r.slug = m.String()
		r.title = m.String()
		if r.flags&(1<<2) != 0 {
			r.document = m.Object()
		}
		if r.flags&(1<<3) != 0 {
			r.settings = m.Vector()
		}
		return r
	case crc_account_updateTheme:
		r := TL_account_updateTheme{}
		r.flags = m.Int()
		r.format = m.String()
		r.theme = m.Object()
		if r.flags&(1<<0) != 0 {
			r.slug = m.String()
		}
		if r.flags&(1<<1) != 0 {
			r.title = m.String()
		}
		if r.flags&(1<<2) != 0 {
			r.document = m.Object()
		}
		if r.flags&(1<<3) != 0 {
			r.settings = m.Vector()
		}
		return r
	case crc_account_saveTheme:
		r := TL_account_saveTheme{}
		r.theme = m.Object()
		r.unsave = m.Object()
		return r
	case crc_account_installTheme:
		r := TL_account_installTheme{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.dark = true
		}
		if r.flags&(1<<1) != 0 {
			r.theme = m.Object()
		}
		if r.flags&(1<<2) != 0 {
			r.format = m.String()
		}
		if r.flags&(1<<3) != 0 {
			r.base_theme = m.Object()
		}
		return r
	case crc_account_getTheme:
		r := TL_account_getTheme{}
		r.format = m.String()
		r.theme = m.Object()
		return r
	case crc_account_getThemes:
		r := TL_account_getThemes{}
		r.format = m.String()
		r.hash = m.Long()
		return r
	case crc_auth_exportLoginToken:
		r := TL_auth_exportLoginToken{}
		r.api_id = m.Int()
		r.api_hash = m.String()
		r.except_ids = m.VectorLong()
		return r
	case crc_auth_importLoginToken:
		r := TL_auth_importLoginToken{}
		r.token = m.StringBytes()
		return r
	case crc_auth_acceptLoginToken:
		r := TL_auth_acceptLoginToken{}
		r.token = m.StringBytes()
		return r
	case crc_account_setContentSettings:
		r := TL_account_setContentSettings{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.sensitive_enabled = true
		}
		return r
	case crc_account_getContentSettings:
		r := TL_account_getContentSettings{}
		return r
	case crc_channels_getInactiveChannels:
		r := TL_channels_getInactiveChannels{}
		return r
	case crc_account_getMultiWallPapers:
		r := TL_account_getMultiWallPapers{}
		r.wallpapers = m.Vector()
		return r
	case crc_messages_getPollVotes:
		r := TL_messages_getPollVotes{}
		r.flags = m.Int()
		r.peer = m.Object()
		r.id = m.Int()
		if r.flags&(1<<0) != 0 {
			r.option = m.StringBytes()
		}
		if r.flags&(1<<1) != 0 {
			r.offset = m.String()
		}
		r.limit = m.Int()
		return r
	case crc_messages_toggleStickerSets:
		r := TL_messages_toggleStickerSets{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.uninstall = true
		}
		if r.flags&(1<<1) != 0 {
			r.archive = true
		}
		if r.flags&(1<<2) != 0 {
			r.unarchive = true
		}
		r.stickersets = m.Vector()
		return r
	case crc_payments_getBankCardData:
		r := TL_payments_getBankCardData{}
		r.number = m.String()
		return r
	case crc_messages_getDialogFilters:
		r := TL_messages_getDialogFilters{}
		return r
	case crc_messages_getSuggestedDialogFilters:
		r := TL_messages_getSuggestedDialogFilters{}
		return r
	case crc_messages_updateDialogFilter:
		r := TL_messages_updateDialogFilter{}
		r.flags = m.Int()
		r.id = m.Int()
		if r.flags&(1<<0) != 0 {
			r.filter = m.Object()
		}
		return r
	case crc_messages_updateDialogFiltersOrder:
		r := TL_messages_updateDialogFiltersOrder{}
		r.order = m.VectorInt()
		return r
	case crc_stats_getBroadcastStats:
		r := TL_stats_getBroadcastStats{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.dark = true
		}
		r.channel = m.Object()
		return r
	case crc_stats_loadAsyncGraph:
		r := TL_stats_loadAsyncGraph{}
		r.flags = m.Int()
		r.token = m.String()
		if r.flags&(1<<0) != 0 {
			r.x = m.Long()
		}
		return r
	case crc_stickers_setStickerSetThumb:
		r := TL_stickers_setStickerSetThumb{}
		r.flags = m.Int()
		r.stickerset = m.Object()
		if r.flags&(1<<0) != 0 {
			r.thumb = m.Object()
		}
		if r.flags&(1<<1) != 0 {
			r.thumb_document_id = m.Long()
		}
		return r
	case crc_bots_setBotCommands:
		r := TL_bots_setBotCommands{}
		r.scope = m.Object()
		r.lang_code = m.String()
		r.commands = m.Vector()
		return r
	case crc_messages_getOldFeaturedStickers:
		r := TL_messages_getOldFeaturedStickers{}
		r.offset = m.Int()
		r.limit = m.Int()
		r.hash = m.Long()
		return r
	case crc_help_getPromoData:
		r := TL_help_getPromoData{}
		return r
	case crc_help_hidePromoData:
		r := TL_help_hidePromoData{}
		r.peer = m.Object()
		return r
	case crc_phone_sendSignalingData:
		r := TL_phone_sendSignalingData{}
		r.peer = m.Object()
		r.data = m.StringBytes()
		return r
	case crc_stats_getMegagroupStats:
		r := TL_stats_getMegagroupStats{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.dark = true
		}
		r.channel = m.Object()
		return r
	case crc_account_getGlobalPrivacySettings:
		r := TL_account_getGlobalPrivacySettings{}
		return r
	case crc_account_setGlobalPrivacySettings:
		r := TL_account_setGlobalPrivacySettings{}
		r.settings = m.Object()
		return r
	case crc_help_dismissSuggestion:
		r := TL_help_dismissSuggestion{}
		r.peer = m.Object()
		r.suggestion = m.String()
		return r
	case crc_help_getCountriesList:
		r := TL_help_getCountriesList{}
		r.lang_code = m.String()
		r.hash = m.Int()
		return r
	case crc_messages_getReplies:
		r := TL_messages_getReplies{}
		r.peer = m.Object()
		r.msg_id = m.Int()
		r.offset_id = m.Int()
		r.offset_date = m.Int()
		r.add_offset = m.Int()
		r.limit = m.Int()
		r.max_id = m.Int()
		r.min_id = m.Int()
		r.hash = m.Long()
		return r
	case crc_messages_getDiscussionMessage:
		r := TL_messages_getDiscussionMessage{}
		r.peer = m.Object()
		r.msg_id = m.Int()
		return r
	case crc_messages_readDiscussion:
		r := TL_messages_readDiscussion{}
		r.peer = m.Object()
		r.msg_id = m.Int()
		r.read_max_id = m.Int()
		return r
	case crc_contacts_blockFromReplies:
		r := TL_contacts_blockFromReplies{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.delete_message = true
		}
		if r.flags&(1<<1) != 0 {
			r.delete_history = true
		}
		if r.flags&(1<<2) != 0 {
			r.report_spam = true
		}
		r.msg_id = m.Int()
		return r
	case crc_stats_getMessagePublicForwards:
		r := TL_stats_getMessagePublicForwards{}
		r.channel = m.Object()
		r.msg_id = m.Int()
		r.offset = m.String()
		r.limit = m.Int()
		return r
	case crc_stats_getMessageStats:
		r := TL_stats_getMessageStats{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.dark = true
		}
		r.channel = m.Object()
		r.msg_id = m.Int()
		return r
	case crc_messages_unpinAllMessages:
		r := TL_messages_unpinAllMessages{}
		r.flags = m.Int()
		r.peer = m.Object()
		if r.flags&(1<<0) != 0 {
			r.top_msg_id = m.Int()
		}
		return r
	case crc_phone_createGroupCall:
		r := TL_phone_createGroupCall{}
		r.flags = m.Int()
		if r.flags&(1<<2) != 0 {
			r.rtmp_stream = true
		}
		r.peer = m.Object()
		r.random_id = m.Int()
		if r.flags&(1<<0) != 0 {
			r.title = m.String()
		}
		if r.flags&(1<<1) != 0 {
			r.schedule_date = m.Int()
		}
		return r
	case crc_phone_joinGroupCall:
		r := TL_phone_joinGroupCall{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.muted = true
		}
		if r.flags&(1<<2) != 0 {
			r.video_stopped = true
		}
		r.call = m.Object()
		r.join_as = m.Object()
		if r.flags&(1<<1) != 0 {
			r.invite_hash = m.String()
		}
		r.params = m.Object()
		return r
	case crc_phone_leaveGroupCall:
		r := TL_phone_leaveGroupCall{}
		r.call = m.Object()
		r.source = m.Int()
		return r
	case crc_phone_inviteToGroupCall:
		r := TL_phone_inviteToGroupCall{}
		r.call = m.Object()
		r.users = m.Vector()
		return r
	case crc_phone_discardGroupCall:
		r := TL_phone_discardGroupCall{}
		r.call = m.Object()
		return r
	case crc_phone_toggleGroupCallSettings:
		r := TL_phone_toggleGroupCallSettings{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.reset_invite_hash = true
		}
		r.call = m.Object()
		if r.flags&(1<<0) != 0 {
			r.join_muted = m.Object()
		}
		return r
	case crc_phone_getGroupCall:
		r := TL_phone_getGroupCall{}
		r.call = m.Object()
		r.limit = m.Int()
		return r
	case crc_phone_getGroupParticipants:
		r := TL_phone_getGroupParticipants{}
		r.call = m.Object()
		r.ids = m.Vector()
		r.sources = m.VectorInt()
		r.offset = m.String()
		r.limit = m.Int()
		return r
	case crc_phone_checkGroupCall:
		r := TL_phone_checkGroupCall{}
		r.call = m.Object()
		r.sources = m.VectorInt()
		return r
	case crc_messages_deleteChat:
		r := TL_messages_deleteChat{}
		r.chat_id = m.Long()
		return r
	case crc_messages_deletePhoneCallHistory:
		r := TL_messages_deletePhoneCallHistory{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.revoke = true
		}
		return r
	case crc_messages_checkHistoryImport:
		r := TL_messages_checkHistoryImport{}
		r.import_head = m.String()
		return r
	case crc_messages_initHistoryImport:
		r := TL_messages_initHistoryImport{}
		r.peer = m.Object()
		r.file = m.Object()
		r.media_count = m.Int()
		return r
	case crc_messages_uploadImportedMedia:
		r := TL_messages_uploadImportedMedia{}
		r.peer = m.Object()
		r.import_id = m.Long()
		r.file_name = m.String()
		r.media = m.Object()
		return r
	case crc_messages_startHistoryImport:
		r := TL_messages_startHistoryImport{}
		r.peer = m.Object()
		r.import_id = m.Long()
		return r
	case crc_messages_getExportedChatInvites:
		r := TL_messages_getExportedChatInvites{}
		r.flags = m.Int()
		if r.flags&(1<<3) != 0 {
			r.revoked = true
		}
		r.peer = m.Object()
		r.admin_id = m.Object()
		if r.flags&(1<<2) != 0 {
			r.offset_date = m.Int()
		}
		if r.flags&(1<<2) != 0 {
			r.offset_link = m.String()
		}
		r.limit = m.Int()
		return r
	case crc_messages_getExportedChatInvite:
		r := TL_messages_getExportedChatInvite{}
		r.peer = m.Object()
		r.link = m.String()
		return r
	case crc_messages_editExportedChatInvite:
		r := TL_messages_editExportedChatInvite{}
		r.flags = m.Int()
		if r.flags&(1<<2) != 0 {
			r.revoked = true
		}
		r.peer = m.Object()
		r.link = m.String()
		if r.flags&(1<<0) != 0 {
			r.expire_date = m.Int()
		}
		if r.flags&(1<<1) != 0 {
			r.usage_limit = m.Int()
		}
		if r.flags&(1<<3) != 0 {
			r.request_needed = m.Object()
		}
		if r.flags&(1<<4) != 0 {
			r.title = m.String()
		}
		return r
	case crc_messages_deleteRevokedExportedChatInvites:
		r := TL_messages_deleteRevokedExportedChatInvites{}
		r.peer = m.Object()
		r.admin_id = m.Object()
		return r
	case crc_messages_deleteExportedChatInvite:
		r := TL_messages_deleteExportedChatInvite{}
		r.peer = m.Object()
		r.link = m.String()
		return r
	case crc_messages_getAdminsWithInvites:
		r := TL_messages_getAdminsWithInvites{}
		r.peer = m.Object()
		return r
	case crc_messages_getChatInviteImporters:
		r := TL_messages_getChatInviteImporters{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.requested = true
		}
		if r.flags&(1<<3) != 0 {
			r.subscription_expired = true
		}
		r.peer = m.Object()
		if r.flags&(1<<1) != 0 {
			r.link = m.String()
		}
		if r.flags&(1<<2) != 0 {
			r.q = m.String()
		}
		r.offset_date = m.Int()
		r.offset_user = m.Object()
		r.limit = m.Int()
		return r
	case crc_messages_setHistoryTTL:
		r := TL_messages_setHistoryTTL{}
		r.peer = m.Object()
		r.period = m.Int()
		return r
	case crc_account_reportProfilePhoto:
		r := TL_account_reportProfilePhoto{}
		r.peer = m.Object()
		r.photo_id = m.Object()
		r.reason = m.Object()
		r.message = m.String()
		return r
	case crc_channels_convertToGigagroup:
		r := TL_channels_convertToGigagroup{}
		r.channel = m.Object()
		return r
	case crc_messages_checkHistoryImportPeer:
		r := TL_messages_checkHistoryImportPeer{}
		r.peer = m.Object()
		return r
	case crc_phone_toggleGroupCallRecord:
		r := TL_phone_toggleGroupCallRecord{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.start = true
		}
		if r.flags&(1<<2) != 0 {
			r.video = true
		}
		r.call = m.Object()
		if r.flags&(1<<1) != 0 {
			r.title = m.String()
		}
		if r.flags&(1<<2) != 0 {
			r.video_portrait = m.Object()
		}
		return r
	case crc_phone_editGroupCallParticipant:
		r := TL_phone_editGroupCallParticipant{}
		r.flags = m.Int()
		r.call = m.Object()
		r.participant = m.Object()
		if r.flags&(1<<0) != 0 {
			r.muted = m.Object()
		}
		if r.flags&(1<<1) != 0 {
			r.volume = m.Int()
		}
		if r.flags&(1<<2) != 0 {
			r.raise_hand = m.Object()
		}
		if r.flags&(1<<3) != 0 {
			r.video_stopped = m.Object()
		}
		if r.flags&(1<<4) != 0 {
			r.video_paused = m.Object()
		}
		if r.flags&(1<<5) != 0 {
			r.presentation_paused = m.Object()
		}
		return r
	case crc_phone_editGroupCallTitle:
		r := TL_phone_editGroupCallTitle{}
		r.call = m.Object()
		r.title = m.String()
		return r
	case crc_phone_getGroupCallJoinAs:
		r := TL_phone_getGroupCallJoinAs{}
		r.peer = m.Object()
		return r
	case crc_phone_exportGroupCallInvite:
		r := TL_phone_exportGroupCallInvite{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.can_self_unmute = true
		}
		r.call = m.Object()
		return r
	case crc_phone_toggleGroupCallStartSubscription:
		r := TL_phone_toggleGroupCallStartSubscription{}
		r.call = m.Object()
		r.subscribed = m.Object()
		return r
	case crc_phone_startScheduledGroupCall:
		r := TL_phone_startScheduledGroupCall{}
		r.call = m.Object()
		return r
	case crc_phone_saveDefaultGroupCallJoinAs:
		r := TL_phone_saveDefaultGroupCallJoinAs{}
		r.peer = m.Object()
		r.join_as = m.Object()
		return r
	case crc_phone_joinGroupCallPresentation:
		r := TL_phone_joinGroupCallPresentation{}
		r.call = m.Object()
		r.params = m.Object()
		return r
	case crc_phone_leaveGroupCallPresentation:
		r := TL_phone_leaveGroupCallPresentation{}
		r.call = m.Object()
		return r
	case crc_stickers_checkShortName:
		r := TL_stickers_checkShortName{}
		r.short_name = m.String()
		return r
	case crc_stickers_suggestShortName:
		r := TL_stickers_suggestShortName{}
		r.title = m.String()
		return r
	case crc_bots_resetBotCommands:
		r := TL_bots_resetBotCommands{}
		r.scope = m.Object()
		r.lang_code = m.String()
		return r
	case crc_bots_getBotCommands:
		r := TL_bots_getBotCommands{}
		r.scope = m.Object()
		r.lang_code = m.String()
		return r
	case crc_account_resetPassword:
		r := TL_account_resetPassword{}
		return r
	case crc_account_declinePasswordReset:
		r := TL_account_declinePasswordReset{}
		return r
	case crc_auth_checkRecoveryPassword:
		r := TL_auth_checkRecoveryPassword{}
		r.code = m.String()
		return r
	case crc_account_getChatThemes:
		r := TL_account_getChatThemes{}
		r.hash = m.Long()
		return r
	case crc_messages_setChatTheme:
		r := TL_messages_setChatTheme{}
		r.peer = m.Object()
		r.emoticon = m.String()
		return r
	case crc_channels_viewSponsoredMessage:
		r := TL_channels_viewSponsoredMessage{}
		r.channel = m.Object()
		r.random_id = m.StringBytes()
		return r
	case crc_channels_getSponsoredMessages:
		r := TL_channels_getSponsoredMessages{}
		r.channel = m.Object()
		return r
	case crc_messages_getMessageReadParticipants:
		r := TL_messages_getMessageReadParticipants{}
		r.peer = m.Object()
		r.msg_id = m.Int()
		return r
	case crc_messages_getSearchResultsCalendar:
		r := TL_messages_getSearchResultsCalendar{}
		r.flags = m.Int()
		r.peer = m.Object()
		if r.flags&(1<<2) != 0 {
			r.saved_peer_id = m.Object()
		}
		r.filter = m.Object()
		r.offset_id = m.Int()
		r.offset_date = m.Int()
		return r
	case crc_messages_getSearchResultsPositions:
		r := TL_messages_getSearchResultsPositions{}
		r.flags = m.Int()
		r.peer = m.Object()
		if r.flags&(1<<2) != 0 {
			r.saved_peer_id = m.Object()
		}
		r.filter = m.Object()
		r.offset_id = m.Int()
		r.limit = m.Int()
		return r
	case crc_messages_hideChatJoinRequest:
		r := TL_messages_hideChatJoinRequest{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.approved = true
		}
		r.peer = m.Object()
		r.user_id = m.Object()
		return r
	case crc_messages_hideAllChatJoinRequests:
		r := TL_messages_hideAllChatJoinRequests{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.approved = true
		}
		r.peer = m.Object()
		if r.flags&(1<<1) != 0 {
			r.link = m.String()
		}
		return r
	case crc_messages_toggleNoForwards:
		r := TL_messages_toggleNoForwards{}
		r.peer = m.Object()
		r.enabled = m.Object()
		return r
	case crc_messages_saveDefaultSendAs:
		r := TL_messages_saveDefaultSendAs{}
		r.peer = m.Object()
		r.send_as = m.Object()
		return r
	case crc_channels_getSendAs:
		r := TL_channels_getSendAs{}
		r.peer = m.Object()
		return r
	case crc_account_setAuthorizationTTL:
		r := TL_account_setAuthorizationTTL{}
		r.authorization_ttl_days = m.Int()
		return r
	case crc_account_changeAuthorizationSettings:
		r := TL_account_changeAuthorizationSettings{}
		r.flags = m.Int()
		if r.flags&(1<<3) != 0 {
			r.confirmed = true
		}
		r.hash = m.Long()
		if r.flags&(1<<0) != 0 {
			r.encrypted_requests_disabled = m.Object()
		}
		if r.flags&(1<<1) != 0 {
			r.call_requests_disabled = m.Object()
		}
		return r
	case crc_channels_deleteParticipantHistory:
		r := TL_channels_deleteParticipantHistory{}
		r.channel = m.Object()
		r.participant = m.Object()
		return r
	case crc_messages_sendReaction:
		r := TL_messages_sendReaction{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.big = true
		}
		if r.flags&(1<<2) != 0 {
			r.add_to_recent = true
		}
		r.peer = m.Object()
		r.msg_id = m.Int()
		if r.flags&(1<<0) != 0 {
			r.reaction = m.Vector()
		}
		return r
	case crc_messages_getMessagesReactions:
		r := TL_messages_getMessagesReactions{}
		r.peer = m.Object()
		r.id = m.VectorInt()
		return r
	case crc_messages_getMessageReactionsList:
		r := TL_messages_getMessageReactionsList{}
		r.flags = m.Int()
		r.peer = m.Object()
		r.id = m.Int()
		if r.flags&(1<<0) != 0 {
			r.reaction = m.Object()
		}
		if r.flags&(1<<1) != 0 {
			r.offset = m.String()
		}
		r.limit = m.Int()
		return r
	case crc_messages_setChatAvailableReactions:
		r := TL_messages_setChatAvailableReactions{}
		r.peer = m.Object()
		r.available_reactions = m.Object()
		return r
	case crc_messages_getAvailableReactions:
		r := TL_messages_getAvailableReactions{}
		r.hash = m.Int()
		return r
	case crc_messages_setDefaultReaction:
		r := TL_messages_setDefaultReaction{}
		r.reaction = m.Object()
		return r
	case crc_messages_translateText:
		r := TL_messages_translateText{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.peer = m.Object()
		}
		if r.flags&(1<<0) != 0 {
			r.id = m.VectorInt()
		}
		if r.flags&(1<<1) != 0 {
			r.text = m.Vector()
		}
		r.to_lang = m.String()
		return r
	case crc_messages_getUnreadReactions:
		r := TL_messages_getUnreadReactions{}
		r.flags = m.Int()
		r.peer = m.Object()
		if r.flags&(1<<0) != 0 {
			r.top_msg_id = m.Int()
		}
		r.offset_id = m.Int()
		r.add_offset = m.Int()
		r.limit = m.Int()
		r.max_id = m.Int()
		r.min_id = m.Int()
		return r
	case crc_messages_readReactions:
		r := TL_messages_readReactions{}
		r.flags = m.Int()
		r.peer = m.Object()
		if r.flags&(1<<0) != 0 {
			r.top_msg_id = m.Int()
		}
		return r
	case crc_contacts_resolvePhone:
		r := TL_contacts_resolvePhone{}
		r.phone = m.String()
		return r
	case crc_phone_getGroupCallStreamChannels:
		r := TL_phone_getGroupCallStreamChannels{}
		r.call = m.Object()
		return r
	case crc_phone_getGroupCallStreamRtmpUrl:
		r := TL_phone_getGroupCallStreamRtmpUrl{}
		r.peer = m.Object()
		r.revoke = m.Object()
		return r
	case crc_messages_searchSentMedia:
		r := TL_messages_searchSentMedia{}
		r.q = m.String()
		r.filter = m.Object()
		r.limit = m.Int()
		return r
	case crc_messages_getAttachMenuBots:
		r := TL_messages_getAttachMenuBots{}
		r.hash = m.Long()
		return r
	case crc_messages_getAttachMenuBot:
		r := TL_messages_getAttachMenuBot{}
		r.bot = m.Object()
		return r
	case crc_messages_toggleBotInAttachMenu:
		r := TL_messages_toggleBotInAttachMenu{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.write_allowed = true
		}
		r.bot = m.Object()
		r.enabled = m.Object()
		return r
	case crc_messages_requestWebView:
		r := TL_messages_requestWebView{}
		r.flags = m.Int()
		if r.flags&(1<<4) != 0 {
			r.from_bot_menu = true
		}
		if r.flags&(1<<5) != 0 {
			r.silent = true
		}
		r.peer = m.Object()
		r.bot = m.Object()
		if r.flags&(1<<1) != 0 {
			r.url = m.String()
		}
		if r.flags&(1<<3) != 0 {
			r.start_param = m.String()
		}
		if r.flags&(1<<2) != 0 {
			r.theme_params = m.Object()
		}
		r.platform = m.String()
		if r.flags&(1<<0) != 0 {
			r.reply_to = m.Object()
		}
		if r.flags&(1<<13) != 0 {
			r.send_as = m.Object()
		}
		return r
	case crc_messages_prolongWebView:
		r := TL_messages_prolongWebView{}
		r.flags = m.Int()
		if r.flags&(1<<5) != 0 {
			r.silent = true
		}
		r.peer = m.Object()
		r.bot = m.Object()
		r.query_id = m.Long()
		if r.flags&(1<<0) != 0 {
			r.reply_to = m.Object()
		}
		if r.flags&(1<<13) != 0 {
			r.send_as = m.Object()
		}
		return r
	case crc_messages_requestSimpleWebView:
		r := TL_messages_requestSimpleWebView{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.from_switch_webview = true
		}
		if r.flags&(1<<2) != 0 {
			r.from_side_menu = true
		}
		r.bot = m.Object()
		if r.flags&(1<<3) != 0 {
			r.url = m.String()
		}
		if r.flags&(1<<4) != 0 {
			r.start_param = m.String()
		}
		if r.flags&(1<<0) != 0 {
			r.theme_params = m.Object()
		}
		r.platform = m.String()
		return r
	case crc_messages_sendWebViewResultMessage:
		r := TL_messages_sendWebViewResultMessage{}
		r.bot_query_id = m.String()
		r.result = m.Object()
		return r
	case crc_messages_sendWebViewData:
		r := TL_messages_sendWebViewData{}
		r.bot = m.Object()
		r.random_id = m.Long()
		r.button_text = m.String()
		r.data = m.String()
		return r
	case crc_bots_setBotMenuButton:
		r := TL_bots_setBotMenuButton{}
		r.user_id = m.Object()
		r.button = m.Object()
		return r
	case crc_bots_getBotMenuButton:
		r := TL_bots_getBotMenuButton{}
		r.user_id = m.Object()
		return r
	case crc_account_getSavedRingtones:
		r := TL_account_getSavedRingtones{}
		r.hash = m.Long()
		return r
	case crc_account_saveRingtone:
		r := TL_account_saveRingtone{}
		r.id = m.Object()
		r.unsave = m.Object()
		return r
	case crc_account_uploadRingtone:
		r := TL_account_uploadRingtone{}
		r.file = m.Object()
		r.file_name = m.String()
		r.mime_type = m.String()
		return r
	case crc_bots_setBotBroadcastDefaultAdminRights:
		r := TL_bots_setBotBroadcastDefaultAdminRights{}
		r.admin_rights = m.Object()
		return r
	case crc_bots_setBotGroupDefaultAdminRights:
		r := TL_bots_setBotGroupDefaultAdminRights{}
		r.admin_rights = m.Object()
		return r
	case crc_phone_saveCallLog:
		r := TL_phone_saveCallLog{}
		r.peer = m.Object()
		r.file = m.Object()
		return r
	case crc_channels_toggleJoinToSend:
		r := TL_channels_toggleJoinToSend{}
		r.channel = m.Object()
		r.enabled = m.Object()
		return r
	case crc_channels_toggleJoinRequest:
		r := TL_channels_toggleJoinRequest{}
		r.channel = m.Object()
		r.enabled = m.Object()
		return r
	case crc_payments_exportInvoice:
		r := TL_payments_exportInvoice{}
		r.invoice_media = m.Object()
		return r
	case crc_messages_transcribeAudio:
		r := TL_messages_transcribeAudio{}
		r.peer = m.Object()
		r.msg_id = m.Int()
		return r
	case crc_messages_rateTranscribedAudio:
		r := TL_messages_rateTranscribedAudio{}
		r.peer = m.Object()
		r.msg_id = m.Int()
		r.transcription_id = m.Long()
		r.good = m.Object()
		return r
	case crc_payments_assignAppStoreTransaction:
		r := TL_payments_assignAppStoreTransaction{}
		r.receipt = m.StringBytes()
		r.purpose = m.Object()
		return r
	case crc_payments_assignPlayMarketTransaction:
		r := TL_payments_assignPlayMarketTransaction{}
		r.receipt = m.Object()
		r.purpose = m.Object()
		return r
	case crc_payments_canPurchasePremium:
		r := TL_payments_canPurchasePremium{}
		r.purpose = m.Object()
		return r
	case crc_help_getPremiumPromo:
		r := TL_help_getPremiumPromo{}
		return r
	case crc_messages_getCustomEmojiDocuments:
		r := TL_messages_getCustomEmojiDocuments{}
		r.document_id = m.VectorLong()
		return r
	case crc_messages_getEmojiStickers:
		r := TL_messages_getEmojiStickers{}
		r.hash = m.Long()
		return r
	case crc_messages_getFeaturedEmojiStickers:
		r := TL_messages_getFeaturedEmojiStickers{}
		r.hash = m.Long()
		return r
	case crc_account_updateEmojiStatus:
		r := TL_account_updateEmojiStatus{}
		r.emoji_status = m.Object()
		return r
	case crc_account_getDefaultEmojiStatuses:
		r := TL_account_getDefaultEmojiStatuses{}
		r.hash = m.Long()
		return r
	case crc_account_getRecentEmojiStatuses:
		r := TL_account_getRecentEmojiStatuses{}
		r.hash = m.Long()
		return r
	case crc_account_clearRecentEmojiStatuses:
		r := TL_account_clearRecentEmojiStatuses{}
		return r
	case crc_messages_reportReaction:
		r := TL_messages_reportReaction{}
		r.peer = m.Object()
		r.id = m.Int()
		r.reaction_peer = m.Object()
		return r
	case crc_messages_getTopReactions:
		r := TL_messages_getTopReactions{}
		r.limit = m.Int()
		r.hash = m.Long()
		return r
	case crc_messages_getRecentReactions:
		r := TL_messages_getRecentReactions{}
		r.limit = m.Int()
		r.hash = m.Long()
		return r
	case crc_messages_clearRecentReactions:
		r := TL_messages_clearRecentReactions{}
		return r
	case crc_messages_getExtendedMedia:
		r := TL_messages_getExtendedMedia{}
		r.peer = m.Object()
		r.id = m.VectorInt()
		return r
	case crc_auth_importWebTokenAuthorization:
		r := TL_auth_importWebTokenAuthorization{}
		r.api_id = m.Int()
		r.api_hash = m.String()
		r.web_auth_token = m.String()
		return r
	case crc_account_reorderUsernames:
		r := TL_account_reorderUsernames{}
		r.order = m.VectorString()
		return r
	case crc_account_toggleUsername:
		r := TL_account_toggleUsername{}
		r.username = m.String()
		r.active = m.Object()
		return r
	case crc_channels_reorderUsernames:
		r := TL_channels_reorderUsernames{}
		r.channel = m.Object()
		r.order = m.VectorString()
		return r
	case crc_channels_toggleUsername:
		r := TL_channels_toggleUsername{}
		r.channel = m.Object()
		r.username = m.String()
		r.active = m.Object()
		return r
	case crc_channels_deactivateAllUsernames:
		r := TL_channels_deactivateAllUsernames{}
		r.channel = m.Object()
		return r
	case crc_channels_toggleForum:
		r := TL_channels_toggleForum{}
		r.channel = m.Object()
		r.enabled = m.Object()
		return r
	case crc_channels_createForumTopic:
		r := TL_channels_createForumTopic{}
		r.flags = m.Int()
		r.channel = m.Object()
		r.title = m.String()
		if r.flags&(1<<0) != 0 {
			r.icon_color = m.Int()
		}
		if r.flags&(1<<3) != 0 {
			r.icon_emoji_id = m.Long()
		}
		r.random_id = m.Long()
		if r.flags&(1<<2) != 0 {
			r.send_as = m.Object()
		}
		return r
	case crc_channels_getForumTopics:
		r := TL_channels_getForumTopics{}
		r.flags = m.Int()
		r.channel = m.Object()
		if r.flags&(1<<0) != 0 {
			r.q = m.String()
		}
		r.offset_date = m.Int()
		r.offset_id = m.Int()
		r.offset_topic = m.Int()
		r.limit = m.Int()
		return r
	case crc_channels_getForumTopicsByID:
		r := TL_channels_getForumTopicsByID{}
		r.channel = m.Object()
		r.topics = m.VectorInt()
		return r
	case crc_channels_editForumTopic:
		r := TL_channels_editForumTopic{}
		r.flags = m.Int()
		r.channel = m.Object()
		r.topic_id = m.Int()
		if r.flags&(1<<0) != 0 {
			r.title = m.String()
		}
		if r.flags&(1<<1) != 0 {
			r.icon_emoji_id = m.Long()
		}
		if r.flags&(1<<2) != 0 {
			r.closed = m.Object()
		}
		if r.flags&(1<<3) != 0 {
			r.hidden = m.Object()
		}
		return r
	case crc_channels_updatePinnedForumTopic:
		r := TL_channels_updatePinnedForumTopic{}
		r.channel = m.Object()
		r.topic_id = m.Int()
		r.pinned = m.Object()
		return r
	case crc_channels_deleteTopicHistory:
		r := TL_channels_deleteTopicHistory{}
		r.channel = m.Object()
		r.top_msg_id = m.Int()
		return r
	case crc_channels_reorderPinnedForumTopics:
		r := TL_channels_reorderPinnedForumTopics{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.force = true
		}
		r.channel = m.Object()
		r.order = m.VectorInt()
		return r
	case crc_channels_toggleAntiSpam:
		r := TL_channels_toggleAntiSpam{}
		r.channel = m.Object()
		r.enabled = m.Object()
		return r
	case crc_channels_reportAntiSpamFalsePositive:
		r := TL_channels_reportAntiSpamFalsePositive{}
		r.channel = m.Object()
		r.msg_id = m.Int()
		return r
	case crc_messages_setDefaultHistoryTTL:
		r := TL_messages_setDefaultHistoryTTL{}
		r.period = m.Int()
		return r
	case crc_messages_getDefaultHistoryTTL:
		r := TL_messages_getDefaultHistoryTTL{}
		return r
	case crc_contacts_exportContactToken:
		r := TL_contacts_exportContactToken{}
		return r
	case crc_contacts_importContactToken:
		r := TL_contacts_importContactToken{}
		r.token = m.String()
		return r
	case crc_photos_uploadContactProfilePhoto:
		r := TL_photos_uploadContactProfilePhoto{}
		r.flags = m.Int()
		if r.flags&(1<<3) != 0 {
			r.suggest = true
		}
		if r.flags&(1<<4) != 0 {
			r.save = true
		}
		r.user_id = m.Object()
		if r.flags&(1<<0) != 0 {
			r.file = m.Object()
		}
		if r.flags&(1<<1) != 0 {
			r.video = m.Object()
		}
		if r.flags&(1<<2) != 0 {
			r.video_start_ts = m.Double()
		}
		if r.flags&(1<<5) != 0 {
			r.video_emoji_markup = m.Object()
		}
		return r
	case crc_channels_toggleParticipantsHidden:
		r := TL_channels_toggleParticipantsHidden{}
		r.channel = m.Object()
		r.enabled = m.Object()
		return r
	case crc_messages_sendBotRequestedPeer:
		r := TL_messages_sendBotRequestedPeer{}
		r.peer = m.Object()
		r.msg_id = m.Int()
		r.button_id = m.Int()
		r.requested_peers = m.Vector()
		return r
	case crc_account_getDefaultProfilePhotoEmojis:
		r := TL_account_getDefaultProfilePhotoEmojis{}
		r.hash = m.Long()
		return r
	case crc_account_getDefaultGroupPhotoEmojis:
		r := TL_account_getDefaultGroupPhotoEmojis{}
		r.hash = m.Long()
		return r
	case crc_auth_requestFirebaseSms:
		r := TL_auth_requestFirebaseSms{}
		r.flags = m.Int()
		r.phone_number = m.String()
		r.phone_code_hash = m.String()
		if r.flags&(1<<0) != 0 {
			r.safety_net_token = m.String()
		}
		if r.flags&(1<<1) != 0 {
			r.ios_push_secret = m.String()
		}
		return r
	case crc_messages_getEmojiGroups:
		r := TL_messages_getEmojiGroups{}
		r.hash = m.Int()
		return r
	case crc_messages_getEmojiStatusGroups:
		r := TL_messages_getEmojiStatusGroups{}
		r.hash = m.Int()
		return r
	case crc_messages_getEmojiProfilePhotoGroups:
		r := TL_messages_getEmojiProfilePhotoGroups{}
		r.hash = m.Int()
		return r
	case crc_messages_searchCustomEmoji:
		r := TL_messages_searchCustomEmoji{}
		r.emoticon = m.String()
		r.hash = m.Long()
		return r
	case crc_messages_togglePeerTranslations:
		r := TL_messages_togglePeerTranslations{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.disabled = true
		}
		r.peer = m.Object()
		return r
	case crc_account_getAutoSaveSettings:
		r := TL_account_getAutoSaveSettings{}
		return r
	case crc_account_saveAutoSaveSettings:
		r := TL_account_saveAutoSaveSettings{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.users = true
		}
		if r.flags&(1<<1) != 0 {
			r.chats = true
		}
		if r.flags&(1<<2) != 0 {
			r.broadcasts = true
		}
		if r.flags&(1<<3) != 0 {
			r.peer = m.Object()
		}
		r.settings = m.Object()
		return r
	case crc_account_deleteAutoSaveExceptions:
		r := TL_account_deleteAutoSaveExceptions{}
		return r
	case crc_stickers_changeSticker:
		r := TL_stickers_changeSticker{}
		r.flags = m.Int()
		r.sticker = m.Object()
		if r.flags&(1<<0) != 0 {
			r.emoji = m.String()
		}
		if r.flags&(1<<1) != 0 {
			r.mask_coords = m.Object()
		}
		if r.flags&(1<<2) != 0 {
			r.keywords = m.String()
		}
		return r
	case crc_stickers_renameStickerSet:
		r := TL_stickers_renameStickerSet{}
		r.stickerset = m.Object()
		r.title = m.String()
		return r
	case crc_stickers_deleteStickerSet:
		r := TL_stickers_deleteStickerSet{}
		r.stickerset = m.Object()
		return r
	case crc_messages_getBotApp:
		r := TL_messages_getBotApp{}
		r.app = m.Object()
		r.hash = m.Long()
		return r
	case crc_messages_requestAppWebView:
		r := TL_messages_requestAppWebView{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.write_allowed = true
		}
		r.peer = m.Object()
		r.app = m.Object()
		if r.flags&(1<<1) != 0 {
			r.start_param = m.String()
		}
		if r.flags&(1<<2) != 0 {
			r.theme_params = m.Object()
		}
		r.platform = m.String()
		return r
	case crc_bots_setBotInfo:
		r := TL_bots_setBotInfo{}
		r.flags = m.Int()
		if r.flags&(1<<2) != 0 {
			r.bot = m.Object()
		}
		r.lang_code = m.String()
		if r.flags&(1<<3) != 0 {
			r.name = m.String()
		}
		if r.flags&(1<<0) != 0 {
			r.about = m.String()
		}
		if r.flags&(1<<1) != 0 {
			r.description = m.String()
		}
		return r
	case crc_bots_getBotInfo:
		r := TL_bots_getBotInfo{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.bot = m.Object()
		}
		r.lang_code = m.String()
		return r
	case crc_auth_resetLoginEmail:
		r := TL_auth_resetLoginEmail{}
		r.phone_number = m.String()
		r.phone_code_hash = m.String()
		return r
	case crc_chatlists_exportChatlistInvite:
		r := TL_chatlists_exportChatlistInvite{}
		r.chatlist = m.Object()
		r.title = m.String()
		r.peers = m.Vector()
		return r
	case crc_chatlists_deleteExportedInvite:
		r := TL_chatlists_deleteExportedInvite{}
		r.chatlist = m.Object()
		r.slug = m.String()
		return r
	case crc_chatlists_editExportedInvite:
		r := TL_chatlists_editExportedInvite{}
		r.flags = m.Int()
		r.chatlist = m.Object()
		r.slug = m.String()
		if r.flags&(1<<1) != 0 {
			r.title = m.String()
		}
		if r.flags&(1<<2) != 0 {
			r.peers = m.Vector()
		}
		return r
	case crc_chatlists_getExportedInvites:
		r := TL_chatlists_getExportedInvites{}
		r.chatlist = m.Object()
		return r
	case crc_chatlists_checkChatlistInvite:
		r := TL_chatlists_checkChatlistInvite{}
		r.slug = m.String()
		return r
	case crc_chatlists_joinChatlistInvite:
		r := TL_chatlists_joinChatlistInvite{}
		r.slug = m.String()
		r.peers = m.Vector()
		return r
	case crc_chatlists_getChatlistUpdates:
		r := TL_chatlists_getChatlistUpdates{}
		r.chatlist = m.Object()
		return r
	case crc_chatlists_joinChatlistUpdates:
		r := TL_chatlists_joinChatlistUpdates{}
		r.chatlist = m.Object()
		r.peers = m.Vector()
		return r
	case crc_chatlists_hideChatlistUpdates:
		r := TL_chatlists_hideChatlistUpdates{}
		r.chatlist = m.Object()
		return r
	case crc_chatlists_getLeaveChatlistSuggestions:
		r := TL_chatlists_getLeaveChatlistSuggestions{}
		r.chatlist = m.Object()
		return r
	case crc_chatlists_leaveChatlist:
		r := TL_chatlists_leaveChatlist{}
		r.chatlist = m.Object()
		r.peers = m.Vector()
		return r
	case crc_bots_reorderUsernames:
		r := TL_bots_reorderUsernames{}
		r.bot = m.Object()
		r.order = m.VectorString()
		return r
	case crc_bots_toggleUsername:
		r := TL_bots_toggleUsername{}
		r.bot = m.Object()
		r.username = m.String()
		r.active = m.Object()
		return r
	case crc_messages_setChatWallPaper:
		r := TL_messages_setChatWallPaper{}
		r.flags = m.Int()
		if r.flags&(1<<3) != 0 {
			r.for_both = true
		}
		if r.flags&(1<<4) != 0 {
			r.revert = true
		}
		r.peer = m.Object()
		if r.flags&(1<<0) != 0 {
			r.wallpaper = m.Object()
		}
		if r.flags&(1<<2) != 0 {
			r.settings = m.Object()
		}
		if r.flags&(1<<1) != 0 {
			r.id = m.Int()
		}
		return r
	case crc_account_invalidateSignInCodes:
		r := TL_account_invalidateSignInCodes{}
		r.codes = m.VectorString()
		return r
	case crc_channels_clickSponsoredMessage:
		r := TL_channels_clickSponsoredMessage{}
		r.channel = m.Object()
		r.random_id = m.StringBytes()
		return r
	case crc_contacts_editCloseFriends:
		r := TL_contacts_editCloseFriends{}
		r.id = m.VectorLong()
		return r
	case crc_stories_canSendStory:
		r := TL_stories_canSendStory{}
		r.peer = m.Object()
		return r
	case crc_stories_sendStory:
		r := TL_stories_sendStory{}
		r.flags = m.Int()
		if r.flags&(1<<2) != 0 {
			r.pinned = true
		}
		if r.flags&(1<<4) != 0 {
			r.noforwards = true
		}
		if r.flags&(1<<7) != 0 {
			r.fwd_modified = true
		}
		r.peer = m.Object()
		r.media = m.Object()
		if r.flags&(1<<5) != 0 {
			r.media_areas = m.Vector()
		}
		if r.flags&(1<<0) != 0 {
			r.caption = m.String()
		}
		if r.flags&(1<<1) != 0 {
			r.entities = m.Vector()
		}
		r.privacy_rules = m.Vector()
		r.random_id = m.Long()
		if r.flags&(1<<3) != 0 {
			r.period = m.Int()
		}
		if r.flags&(1<<6) != 0 {
			r.fwd_from_id = m.Object()
		}
		if r.flags&(1<<6) != 0 {
			r.fwd_from_story = m.Int()
		}
		return r
	case crc_stories_editStory:
		r := TL_stories_editStory{}
		r.flags = m.Int()
		r.peer = m.Object()
		r.id = m.Int()
		if r.flags&(1<<0) != 0 {
			r.media = m.Object()
		}
		if r.flags&(1<<3) != 0 {
			r.media_areas = m.Vector()
		}
		if r.flags&(1<<1) != 0 {
			r.caption = m.String()
		}
		if r.flags&(1<<1) != 0 {
			r.entities = m.Vector()
		}
		if r.flags&(1<<2) != 0 {
			r.privacy_rules = m.Vector()
		}
		return r
	case crc_stories_deleteStories:
		r := TL_stories_deleteStories{}
		r.peer = m.Object()
		r.id = m.VectorInt()
		return r
	case crc_stories_togglePinned:
		r := TL_stories_togglePinned{}
		r.peer = m.Object()
		r.id = m.VectorInt()
		r.pinned = m.Object()
		return r
	case crc_stories_getAllStories:
		r := TL_stories_getAllStories{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.next = true
		}
		if r.flags&(1<<2) != 0 {
			r.hidden = true
		}
		if r.flags&(1<<0) != 0 {
			r.state = m.String()
		}
		return r
	case crc_stories_getPinnedStories:
		r := TL_stories_getPinnedStories{}
		r.peer = m.Object()
		r.offset_id = m.Int()
		r.limit = m.Int()
		return r
	case crc_stories_getStoriesArchive:
		r := TL_stories_getStoriesArchive{}
		r.peer = m.Object()
		r.offset_id = m.Int()
		r.limit = m.Int()
		return r
	case crc_stories_getStoriesByID:
		r := TL_stories_getStoriesByID{}
		r.peer = m.Object()
		r.id = m.VectorInt()
		return r
	case crc_stories_toggleAllStoriesHidden:
		r := TL_stories_toggleAllStoriesHidden{}
		r.hidden = m.Object()
		return r
	case crc_stories_readStories:
		r := TL_stories_readStories{}
		r.peer = m.Object()
		r.max_id = m.Int()
		return r
	case crc_stories_incrementStoryViews:
		r := TL_stories_incrementStoryViews{}
		r.peer = m.Object()
		r.id = m.VectorInt()
		return r
	case crc_stories_getStoryViewsList:
		r := TL_stories_getStoryViewsList{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.just_contacts = true
		}
		if r.flags&(1<<2) != 0 {
			r.reactions_first = true
		}
		if r.flags&(1<<3) != 0 {
			r.forwards_first = true
		}
		r.peer = m.Object()
		if r.flags&(1<<1) != 0 {
			r.q = m.String()
		}
		r.id = m.Int()
		r.offset = m.String()
		r.limit = m.Int()
		return r
	case crc_stories_getStoriesViews:
		r := TL_stories_getStoriesViews{}
		r.peer = m.Object()
		r.id = m.VectorInt()
		return r
	case crc_stories_exportStoryLink:
		r := TL_stories_exportStoryLink{}
		r.peer = m.Object()
		r.id = m.Int()
		return r
	case crc_stories_report:
		r := TL_stories_report{}
		r.peer = m.Object()
		r.id = m.VectorInt()
		r.reason = m.Object()
		r.message = m.String()
		return r
	case crc_stories_activateStealthMode:
		r := TL_stories_activateStealthMode{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.past = true
		}
		if r.flags&(1<<1) != 0 {
			r.future = true
		}
		return r
	case crc_contacts_setBlocked:
		r := TL_contacts_setBlocked{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.my_stories_from = true
		}
		r.id = m.Vector()
		r.limit = m.Int()
		return r
	case crc_stories_sendReaction:
		r := TL_stories_sendReaction{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.add_to_recent = true
		}
		r.peer = m.Object()
		r.story_id = m.Int()
		r.reaction = m.Object()
		return r
	case crc_bots_canSendMessage:
		r := TL_bots_canSendMessage{}
		r.bot = m.Object()
		return r
	case crc_bots_allowSendMessage:
		r := TL_bots_allowSendMessage{}
		r.bot = m.Object()
		return r
	case crc_bots_invokeWebViewCustomMethod:
		r := TL_bots_invokeWebViewCustomMethod{}
		r.bot = m.Object()
		r.custom_method = m.String()
		r.params = m.Object()
		return r
	case crc_stories_getPeerStories:
		r := TL_stories_getPeerStories{}
		r.peer = m.Object()
		return r
	case crc_stories_getAllReadPeerStories:
		r := TL_stories_getAllReadPeerStories{}
		return r
	case crc_stories_getPeerMaxIDs:
		r := TL_stories_getPeerMaxIDs{}
		r.id = m.Vector()
		return r
	case crc_stories_getChatsToSend:
		r := TL_stories_getChatsToSend{}
		return r
	case crc_stories_togglePeerStoriesHidden:
		r := TL_stories_togglePeerStoriesHidden{}
		r.peer = m.Object()
		r.hidden = m.Object()
		return r
	case crc_payments_getPremiumGiftCodeOptions:
		r := TL_payments_getPremiumGiftCodeOptions{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.boost_peer = m.Object()
		}
		return r
	case crc_payments_checkGiftCode:
		r := TL_payments_checkGiftCode{}
		r.slug = m.String()
		return r
	case crc_payments_applyGiftCode:
		r := TL_payments_applyGiftCode{}
		r.slug = m.String()
		return r
	case crc_payments_getGiveawayInfo:
		r := TL_payments_getGiveawayInfo{}
		r.peer = m.Object()
		r.msg_id = m.Int()
		return r
	case crc_payments_launchPrepaidGiveaway:
		r := TL_payments_launchPrepaidGiveaway{}
		r.peer = m.Object()
		r.giveaway_id = m.Long()
		r.purpose = m.Object()
		return r
	case crc_account_updateColor:
		r := TL_account_updateColor{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.for_profile = true
		}
		if r.flags&(1<<2) != 0 {
			r.color = m.Int()
		}
		if r.flags&(1<<0) != 0 {
			r.background_emoji_id = m.Long()
		}
		return r
	case crc_channels_updateColor:
		r := TL_channels_updateColor{}
		r.flags = m.Int()
		if r.flags&(1<<1) != 0 {
			r.for_profile = true
		}
		r.channel = m.Object()
		if r.flags&(1<<2) != 0 {
			r.color = m.Int()
		}
		if r.flags&(1<<0) != 0 {
			r.background_emoji_id = m.Long()
		}
		return r
	case crc_account_getDefaultBackgroundEmojis:
		r := TL_account_getDefaultBackgroundEmojis{}
		r.hash = m.Long()
		return r
	case crc_premium_getBoostsList:
		r := TL_premium_getBoostsList{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.gifts = true
		}
		r.peer = m.Object()
		r.offset = m.String()
		r.limit = m.Int()
		return r
	case crc_premium_getMyBoosts:
		r := TL_premium_getMyBoosts{}
		return r
	case crc_premium_applyBoost:
		r := TL_premium_applyBoost{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.slots = m.VectorInt()
		}
		r.peer = m.Object()
		return r
	case crc_premium_getBoostsStatus:
		r := TL_premium_getBoostsStatus{}
		r.peer = m.Object()
		return r
	case crc_premium_getUserBoosts:
		r := TL_premium_getUserBoosts{}
		r.peer = m.Object()
		r.user_id = m.Object()
		return r
	case crc_channels_toggleViewForumAsMessages:
		r := TL_channels_toggleViewForumAsMessages{}
		r.channel = m.Object()
		r.enabled = m.Object()
		return r
	case crc_messages_searchEmojiStickerSets:
		r := TL_messages_searchEmojiStickerSets{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.exclude_featured = true
		}
		r.q = m.String()
		r.hash = m.Long()
		return r
	case crc_channels_getChannelRecommendations:
		r := TL_channels_getChannelRecommendations{}
		r.channel = m.Object()
		return r
	case crc_stats_getStoryStats:
		r := TL_stats_getStoryStats{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.dark = true
		}
		r.peer = m.Object()
		r.id = m.Int()
		return r
	case crc_stats_getStoryPublicForwards:
		r := TL_stats_getStoryPublicForwards{}
		r.peer = m.Object()
		r.id = m.Int()
		r.offset = m.String()
		r.limit = m.Int()
		return r
	case crc_help_getPeerColors:
		r := TL_help_getPeerColors{}
		r.hash = m.Int()
		return r
	case crc_help_getPeerProfileColors:
		r := TL_help_getPeerProfileColors{}
		r.hash = m.Int()
		return r
	case crc_stories_getStoryReactionsList:
		r := TL_stories_getStoryReactionsList{}
		r.flags = m.Int()
		if r.flags&(1<<2) != 0 {
			r.forwards_first = true
		}
		r.peer = m.Object()
		r.id = m.Int()
		if r.flags&(1<<0) != 0 {
			r.reaction = m.Object()
		}
		if r.flags&(1<<1) != 0 {
			r.offset = m.String()
		}
		r.limit = m.Int()
		return r
	case crc_channels_updateEmojiStatus:
		r := TL_channels_updateEmojiStatus{}
		r.channel = m.Object()
		r.emoji_status = m.Object()
		return r
	case crc_account_getChannelDefaultEmojiStatuses:
		r := TL_account_getChannelDefaultEmojiStatuses{}
		r.hash = m.Long()
		return r
	case crc_account_getChannelRestrictedStatusEmojis:
		r := TL_account_getChannelRestrictedStatusEmojis{}
		r.hash = m.Long()
		return r
	case crc_messages_getSavedDialogs:
		r := TL_messages_getSavedDialogs{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.exclude_pinned = true
		}
		r.offset_date = m.Int()
		r.offset_id = m.Int()
		r.offset_peer = m.Object()
		r.limit = m.Int()
		r.hash = m.Long()
		return r
	case crc_messages_getSavedHistory:
		r := TL_messages_getSavedHistory{}
		r.peer = m.Object()
		r.offset_id = m.Int()
		r.offset_date = m.Int()
		r.add_offset = m.Int()
		r.limit = m.Int()
		r.max_id = m.Int()
		r.min_id = m.Int()
		r.hash = m.Long()
		return r
	case crc_messages_deleteSavedHistory:
		r := TL_messages_deleteSavedHistory{}
		r.flags = m.Int()
		r.peer = m.Object()
		r.max_id = m.Int()
		if r.flags&(1<<2) != 0 {
			r.min_date = m.Int()
		}
		if r.flags&(1<<3) != 0 {
			r.max_date = m.Int()
		}
		return r
	case crc_messages_getPinnedSavedDialogs:
		r := TL_messages_getPinnedSavedDialogs{}
		return r
	case crc_messages_toggleSavedDialogPin:
		r := TL_messages_toggleSavedDialogPin{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.pinned = true
		}
		r.peer = m.Object()
		return r
	case crc_messages_reorderPinnedSavedDialogs:
		r := TL_messages_reorderPinnedSavedDialogs{}
		r.flags = m.Int()
		if r.flags&(1<<0) != 0 {
			r.force = true
		}
		r.order = m.Vector()
		return r

	default:
		m.err = fmt.Errorf("Unknown constructor: \u002508x", constructor)
		return nil

	}

}
